Nobody asked you to show up. Every experienced product manager hasheard some version of those words at some point in their career. In this case, those painfully frustrating words are from Ken Norton, partner at Google Ventures, in a blog post titled "How to Hire a Product Manager. "Think about a company for a second. Engineers build the product. Designers make sure it has a great user experience and looks good. Marketing makes sure customers know about the product. Sales getspotential customers to open their wallets to buy the product. What moredoes a company need? Where does a product manager fit into that mix? Those simple questions are what cause not only the confusion, but also the opportunity that comes with product management. Heck, if you'retransitioning into product management, these questions might make you worry that product managers are irrelevant. And if you are currently aproduct manager, you might feel a sudden need to justify your existence. Truthfully, without a product manager a company will continue to operatepretty well-to a point. Yet with a strong product manager a companycan become great. What Do Product Managers Do? Put simply, a product manager (PM) represents the customer No one buys aproduct because they want to give the company money. Customers buy anduse products because the products address their needs. Done properly,the products let the customers be awesome. The end result ofrepresenting the customer is that a PM helps the customer be awesome. There's a lot behind this simple definition, though. Adam Nash, CEO ofWealthfront and former VP of product at LinkedIn, summed up productmanagement by saying, PMs figure out what game a company is playing, andhow it keeps score (hint: it's not always about how much money thecompany makes). Day to day, PMs must understand both business strategy and execution.They must first figure out who the customers are and what problems thecustomers have. They must know how to set a vision, finding the rightopportunities in a sea of possibilities, by using both data andintuition. They must know how to define success, for the customer andthe product, by prioritizing doing what is right over doing what iseasy. They must know how to work with engineers and designers to get theright product built, keeping it as simple as possible. They must knowhow to work with marketing to explain to the customer how the productfills the customer's need better than a competitor's product. They mustdo whatever's needed to help ship the product, finding solutions ratherthan excuses. Sometimes, this even means a PM getting coffee for a teamthat's working long hours to show appreciation. By the way, PMs manageproducts, not people, so they must achieve everything using softinfluence, effective communication, leadership, and trust­-not orders. Even though it's not always obvious what PMs do from the outside, theygenuinely do a lot! PMs do so much that they're sometimes even called"Mini CEOs. "Ironically, the thing a PM does the most is say no. Some peoplebelieve that product managers just dictate what features to build. Giveneveryone has lots of ideas for features, why bother with a PM? It's truethat everyone has lots of ideas, some of them good, but most ideaspeople have are for things they want,not necessarily things customers want.For example, think of an engineer who spends her days using crypticcommand-line tools-I'm sure you know someone like this! This engineerprobably prefers keyboard shortcuts, dislikes GUIs, and favors usingcode to explicitly specify meaning. Now, imagine that engineer is partof a team working on an iPad word processor for senior citizens. Do youthink the features the engineer would prioritize match what thecustomers need? A large part of a PM's job is to figure out the smallnumber of key features to prioritize for the customer, and to lay thegroundwork for long-term business viability by gracefully saying "no" tothe numerous requests that don't fit the customer's needs. Similar but DifferentIt's also worth looking at roles that are related to, but differentfrom, product management. These jobs get confused with productmanagement because in some companies a product manager will also handlethese roles' responsibilities, even though they aren't the productmanager's primary strengths. For example, remember how we said a good PMwould do whatever it took to ship the product? Further confusing things,all of these related roles are abbreviated "PM. "Project managers are most oftenconfused with product managers. While there are many subtle differences,they can be summed up by saying that a project manager owns the scheduleand helps ensure the team is on track to meet any deadlines. The projectmanager will often work with the product manager, and a product managerwill provide input on the schedule. Project managers are masters ofschedules and Gantt charts, not of representing customers.Program managers are usually a bit moresimilar to product managers, but program managers generally focus moreon the "getting it built" side, working closely with Engineering andOperations. If you're building a wearable, for example, the programmanager will likely be in touch with the manufacturing facilityfrequently, whereas a product manager will have limited directinteraction with them. Program managers tend to be masters of execution,sort of like a "super" project manager.To further confuse things, the title that describes what a productmanager does varies slightly from company to company. Microsoft, forexample, calls its product managers "Program Managers." Apple generallysplits the product manager role into the "Engineering Program Manager"(EPM), and the "Product Marketing Manager" (PMM), with the PMM beingcloser to our definition a product manager, and the EPM being closer toa project manager.Product managers are like the conductor in an orchestra. The conductornever makes a sound but is responsible for making the orchestra as awhole sound awesome to deliver a great performance to the audience.Great conductors understand and engage with everyone in the orchestra,using the right vocabulary with each section, diplomatically movingeveryone together toward the shared goal of a great performance.Project managers help keep all the rehearsals organized so that theorchestra will be prepared for the concerts. Program managers areinvolved in planning the entire season's schedule for the concert hall,setting things up so that the project managers can make each performancesuccessful. Becoming a PMThere's no obvious path to becoming a product manager. And if you'rereviewing résumés for potential PM hires, especially if you're astart-up founder, it's not obvious what to look for. Most careers have avery clear-cut path-you go to school, study computer science, and thenyou're set to become an engineer. Product management isn't one of thosecareers.Because product management is a relatively new discipline, it has a muchless formalized training process than other careers. Given that the roleoften comes down to "doing whatever it takes to ship a product thatcustomers will love and that achieves business goals," product managersshould be smart, talented people who can figure things out on their own.Beyond that, product managers commonly have an intersection of atechnical background-not just engineering-such as industryexpertise, and communication skills. The most common type of productmanager is someone with an engineering/computer science background whobecame interested in business. PMs often start out as individuallycontributing engineers who then find themselves taking on moreresponsibilities: conducting customer interviews, working with Design tovalidate ideas, and possibly even collaborating with marketing to makesure what they're working on aligns with customer needs. They're notnecessarily the best coders or the most definitive domain experts, buttheir mix of skills makes them unique. Sometimes PMs come from Design,Marketing, or even business school!At Product School, we often talk about the Product Triangle (Figure1-1). This is a simple way to visualize and understand where productmanagement (ideally) sits in relation to other core departments:Engineering (product development), Design, and Marketing. This diagramis helpful for two reasons. First, it visually emphasizes that productmanagement is a generalist role and PMs need to be able to work withsignificantly different domains. Second, as you go through the processof building a product, you will shift your balance to different parts ofthe triangle-more on this shortly. Thinking about which leg of thetriangle you're focusing on will let you think about the right way tocommunicate-you'll talk with Design differently than you doEngineering-and the right goals to set during each phase.A common question about becoming a PM is, how technical do PMs have tobe? They need to know enough that theycan work effectively with engineers, participating in things like bugprioritization and scoping meetings, but they don't need a computerscience or electrical engineering degree. Especially for software PMs,knowing how to code even a little will be beneficial, and if you want tobecome a PM but don't know how to code, we'd highly recommend learningthe basics. Fortunately, there are plenty of resources to help youlearn-you can enroll in a boot camp like Code School or Hack Reactoror take an online course from lynda.com or Udemy. A big benefit to learning to code is that PMs frequently rely on a wayof thinking common to coding-top-down design and bottom-upimplementation. This means that you think about the big picture, breakit down into small pieces, and then build those small pieces first.After building the small pieces, you combine them to get the bigpicture. Learning to code will give you consistent practice thinkingthis way.Another common question is, how business-oriented do PMs have tobe? PMs don't need an MBA-in fact,some tech companies prefer not to hire MBAs-nor do they need a salesbackground. They should understand the industry of the company they'reinterested in and be able to answer the following questions: Who are thecustomers? Who are the major players? What differentiates one companyfrom another? How do the businesses make money? PMs should alsounderstand basic financial concepts such as revenue vs. profit-revenueis how much money a company takes in, and profit is how much is leftafter expenses.In general, when we're working with people who want to make thetransition to being a product manager, we recommend they start with anindustry/company they're already very familiar with. That makes for aneasier transition because they likely know the answers to many of thequestions above, even if they don't explicitly realize it! After youhave a few years of product management experience, it's fairly easy toswitch to a new domain, as you know the right questions to ask to besuccessful. If you're a founder looking to build your start-up's productteam, we'd recommend focusing on finding the best product personpossible, even if that person isn't familiar with your domain. Types of Product ManagersWhile you will often hear people talk about product managers in thegeneral sense, you will also hear about specialized product managers.Depending on your background, you might find one of thesespecializations a more appropriate career choice than the general role. The most common specialization is technical product management. This refers to a PM who has a strong technicalbackground, and who works on a technical product. For example, thisperson might work on a software API where the end customer is a softwaredeveloper. Technical PMs won't be writing the code or performingtechnical tasks, but they need to understand the details of what goesinto those tasks. Another specialization is strategic product management. This role is the complement to a technical PM,and it's someone who has a strong business-oriented background. Once in a while, you'll also see titles linked to specific verticals ortasks, such as growth product manager ormobile product manager. These roles are morefocused than the general PM role, and a person in such a role will havea more specific set of skills, such as being an expert in all thedifferent things you can do to grow a product-that is, get morecustomers using it. How Product Managers Get Products BuiltWhile sometimes it might seem like the CEO imagines a product in theshower, and then tells the engineering team to build it, any one who hasbeen a CEO knows this is not the case. Product management is similarlymisunderstood by the general public. On TV you're likely to see the guyget out of the shower and start hacking on a laptop with bright greentext, occasionally solving a hard problem by drawing on glass. The realworld doesn't work like that. So, how do products get built? What does aproduct manager really do, and how?In reality, products continuously undergo a product-development lifecycle, and a product manager shepherds the product through each phase,owning some phases and contributing to others. The product-developmentlife cycle involves discrete steps, and each step emphasizes a differentleg of the Product Triangle.While the steps are well defined, there are multiple approaches to howthese steps can be implemented. On one end of the spectrum there's thelean approach, based on Toyota'smanufacturing methods and adapted to software/product development bySteve Blank and Eric Ries. The lean methodology focuses on very fast,iterative cycles where your goal is to make something small, release it,learn from it, and use that knowledge to figure out what to do next.Lean cycles might happen in just a few days. On the opposite end of thespectrum you have the waterfallapproach, where you build something big in a very linear fashion-youspend a lot of time planning a product, and once you've decided what todo, that's what you're going to build and ship even if it takes a longtime. The product moves through each process step by step and, like awaterfall, things flow one way, and-almost-never change once they'redefined it. Waterfall cycles might take a year or more.For software product development, larger and older companies tend to usea waterfall approach, whereas many start-ups use a lean approach. As youmight expect intuitively-and there have been many studies to back thisup-building products with a lean approach is more successful becauseyou're not risking everything on a potentially long, slow-to-createproject. Instead, you risk a little bit to build something small, learnfrom it, and iterate. For that reason, even larger and older companiesare shifting towards a lean approach, moving away from waterfall.The most common approach you'll encounter is a hybrid of waterfall andlean where the PM will plan a bit upfront to find the right opportunity,but then the teams will implement the product in an iterative way. Thisis nice because it lets you keep a big-picture goal in mind, but changecourse if needed such as if you find a significant technical obstacle orfind that customers don't want the product you're building. We'll mainlyfocus on a hybrid approach in this book.Hardware product development takes a more waterfall approach becauseit's harder to change things you're physically building. For example,hardware requires a lot more planning up front, and the iterative cyclesduring development to get new hardware builds are a lot longer than withsoftware. However, the overall principles for building products are verysimilar to those for software, and the process is similar enough thatthe life cycle stages we'll teach you about apply for both hardware andsoftware product management.In future chapters we'll dig into each stage of the product-developmentlife cycle in depth. For now, let's look at an overview of each stage,starting with the planning phase.The Product-Development Life CycleEvery product goes through five key conceptual stages1. Finding and planning the right opportunity2. Designing the solution3. Building the solution4. Sharing the solution5. Assessing the solutionPut another way, this process involves figuring out what problem to workon, figuring out how to solve it, building the solution, getting it incustomers' hands, and seeing if it worked for them. Sounds easy, right?Conceptually, it is! The devil's in the details. To help you see howeach stage connects, before we dive deep, let's look at a high-leveloverview of each stage.Finding and Planning the Right OpportunityThe very first phase of the product-development life cycle is to findand clearly define the next opportunity to pursue. The world's a sea ofpossibilities! What should you build next? Usually, it's up to theproduct manager to create and sort through all the possibilities,picking the right one to focus on next.This phase is a critical part of your job. Unlike the other phases,where other disciplines take the lead, this phase is where productleads, taking input from other disciplines. It's probably the mostdifferent from anything expected in another position. Because this is socore to your job, we'll cover finding the right opportunity in extremedepth, breaking it down into three parts: strategically understanding acompany (Chapter 2), creating an opportunity hypothesis (Chapter 3), andvalidating that hypothesis (Chapter 4). To a product manager, strategically understanding a company involveslearning about aspects of the company that contribute to its productsuccess including its target customers, its expertise, its competitivelandscape, and more. Understanding these aspects, which we sometimesrefer to as a company's context, will help you make the right productdecisions, and start to find focus in the sea of possibilities. A simpleexample is CNN.com's team. They are great at building softwareproducts-including a website and mobile apps-that deliver the newsquickly and efficiently to their customers. Because their PMs know theyhave software and not hardware expertise, they are-probably-notencouraging CNN.com to build a news-focused smart watch, or otherhardware product.Clearly identifying the company's goals, another strategic element, willhelp you narrow down and prioritize the possibilities. At a high level,company goals fall into three categories: growth, revenue, and customersatisfaction. Specifically, does the company want to get more users forthe product, increase its revenue from the current customers, or makeits current customers happier? If the goal is revenue, how does thecompany currently monetize their product, and how can you increase thevalue for customers to make them more willing to pay for the product? Ifthe goal is growth, what's stopping new customers from using theproduct? If the goal is to delight their customers, what can you deliverthat they would love, but wouldn't expect? By understanding the currentgoals you can think strategically, and make sure the products you'rebuilding align with those goals, helping the company be successful.In addition to these, there are some other strategic company contextquestions you should know the answer to: What is the company buildingnow? What does it excel at compared to its competitors? Who are the keycustomers you aim to solve a problem for? What's the company's vision,and-more fundamentally-why does the company exist?With the company's context in mind, the next step, which we'll cover inChapter 3, is to create an opportunity hypothesis. What do you believeis the right thing to work on next? It could be something as small asfixing a bug that's been in your backlog for a while, or something aslarge as building an entirely new product.These opportunity hypotheses come from many different places. Looking athow existing customers use your product is a common source of newopportunities, allowing you to find ways to better serve yourcustomers-and your company's goals. A metric is a measurement of a task a customer does withyour product. Collectively, your metrics can provide some great insight!From metrics, you might find an opportunity, such as wanting to gethigher engagement with a component of your product.For example, CNN.com likely keeps track of what headlines visitors clickon, how many people start watching each video, how many finish watchingeach video, how many scroll down and read each article, and more. Theymight then use this data to pull out conclusions, such as, "We shouldprioritize video content instead of text because people tend to watchvideos to completion and see each ad, whereas very few people readarticles to completion."After thinking about the company's context and goals, talking withusers, analyzing usage data, looking at existing bug reports and featurerequests, and using other approaches we'll cover in Chapter 3, you'llhave an idea about what to do next. But before you start to build afeature, you should do some type of validation work to ensure this isthe right opportunity to pursue, and that it actually will help youachieve your goals. You have limited time and resources, and spending alittle bit of time validating an opportunity hypothesis can often saveyou significant time and money by keeping you focused on the bestopportunities. Chapter 4 goes into depth about how to validate an idea.Once you've validated your idea, you'll need to develop it intosomething your teams can implement. An important part of theproduct-planning phase in the product-development life cycle is scopingthe opportunity. Scoping means clearlydefining the opportunity and the customers you want to target, alongwith the requirements for the solution. If you're building a pen, do youneed it to work in space? Underwater? Upside down? You'll want toclearly define these situations to help everyone understand what theproduct will need to do when it's finished.When working in lean or hybrid environments, you'll often hear thephrase minimum viable product (MVP).This is a term from lean methodology that simply means, "What's the mostminimally featured thing you can build that will address the opportunitywell for most of your target customers and validate your opportunity?"In other words, if you were to think about the core function you'retrying to let customers accomplish, what's the simplest product you canbuild that lets them achieve that goal?Continuing our CNN example, if you went back in time and were working onthe first version of CNN's mobile app, what's the simplest app you couldbuild that would provide value to your customers? It might be somethingwith a list of news headlines and a refresh button, and when you tap oneach, you see the video for the story. Again, the key to identifying theMVP is that you're focused on the core functionality it provides to theuser-news, in this case-rather than focusing on all the possiblefeatures you might build in addition to that core function.Identifying the MVP is a key part of scoping a product because it helpsyou identify the most important thing to build first-we'll cover tipson how to do that in Chapter 5. This lets you focus your design anddevelopment efforts to create a-hopefully-useful product that youcan deliver to customers quickly, whether as shipped software orsoftware tested in house. Testing the MVP with real customers will helpyou figure out what other features will be in and out of scope, as youquickly will get real feedback about what customers like and don't like.Note that an MVP doesn't mean the product is bad or poorly built. Infact, quite the opposite-it should be very good at what it does, butit should focus on doing only a few key tasks.Contrast this with non-MVP-based approaches to product development,which are especially common in waterfall development. In that world, youend up spending lots of time trying to build the "perfect" product withevery feature you can imagine, it takes forever to build, and once it'sout in the real world you discover that customers don't use half thefeatures you thought they would.A key differentiator between lean and waterfall is that lean leveragesMVPs. With a lean approach, you build the simplest thing you can, gatherdata about how customers use it, and then refine the product if needed.This will let you work quite effectively, building only the featurescustomers want and will use rather than wasting time building thingscustomers don't care about.Spending lots of time iterating internally and building features withoutreleasing a product can be quite harmful to your business. With ourhypothetical CNN app example, if we didn't take an MVP-based approach,we might decide to replicate the website completely, including featureslike comments, user-submitted video, and customized news streams.Building all those features could delay our launch by months, and whoknows how much of our customer base would use those features on theirphones. Yes, we could use metrics from the website to prioritize thesefeatures, but hopefully you get the point. Additionally, while we weretaking lots of time and building features for our unreleased app, ourcustomers wanted a mobile news app and turned to Fox News or anothercompetitor that built its app using an MVP-based approach. The customerscared about the core function-getting news on the go-not about allthe extra features. And it's hard to get customers back after they'veturned to a competitor!Most companies using a hybrid model never build a true MVP, but ratheran MVP with some extra key features they believe will make the productmore enticing. If you know for certain customers will want those keyfeatures, incorporating them from the start will help shorten theiteration cycle.To be fair, hardware development often requires you to try to build morethan an MVP because releasing a hardware update is much more complexthan a software update. But keeping the MVP in mind, even with hardware,will help you prioritize your development efforts.Sometimes, as we'll discuss in Chapter 4, your very first MVP will behuman-powered rather than automated. For example, if you're a PM at Yelpand want to add a restaurant-recommendation feature, eventually you'llcreate a fully automated algorithm to generate recommendations. But youcould build an initial MVP that makes it appear that the user is gettingautomated recommendations when it actually has a human making andsending these lists. If many people like and use this feature, thengreat, you'll build the automation engine. If no one uses it, then thisvery lightweight MVP saved you the time and effort of building the fullfeature.Just as important as scoping the problem is defining your successmetrics. What are your goals with the product, and how do you keep scoreto see if you're achieving them?Going back to CNN.com, its ultimate goal might be to become the placepeople go to for news. This means its success metrics include the numberof views on a piece of content, the percentage of people who consumeeach piece of content, the number of articles read or videos watched ina session, and how often the person comes back to CNN.com. The reason wedon't solely use page views on a piece of content is because a personmight click on an article but never read it. That means that person isnot actually getting news/consuming content from CNN.com.Product managers create a document that encompasses the entire planningphase, called a product requirements document (PRD), collecting all this planning informationin one spot. A PRD contains the explanation for why you're pursuing thisopportunity, the scoped problem definition, the success metrics, andmore. But you don't create the PRD in isolation-you'll work with yourteam, your boss, and other product stakeholders to make sure theopportunity and requirements are clear and the goals are achievable.One of the biggest reasons that other stakeholders, such as design andengineering leads, are involved in the PRD is that it will be up tothem-not the product manager-to figure out the right solution forthis opportunity. After all, the design and engineering teams are theexperts in their domains, and the product manager is not, even if shestarted her career in one of those domains!PRDs gained a bad reputation from waterfall development because theywere huge dictating documents that people disliked reading. In fact, thelean model largely doesn't use PRDs. In the hybrid model, the PRD istreated as a great communications tool to get everyone on the same pageand as a living-not dictating-document. Over the product-developmentlife cycle, the PRD will expand to contain more information, but itstarts by clearly stating the problem and why we're working on it. Whenthe product's built, the PRD provides a great reference for the salesand support teams to understand what's in the product and why. We'll goover how to effectively write and use a PRD in Chapter 5.Once we have this first draft of a PRD-clearly identifying theopportunity/problem and success metrics-and all stakeholders haveagreed on the right problem to focus on next, we'll move on to the nextphase of the product-development life cycle.Designing the SolutionDuring this phase, covered in depth in Chapter 6, we'll figure out afeasible solution to the problem we've identified.Here, PMs will primarily work with the design team, but the engineeringteam will offer input as well, to help gauge feasibility. For example, aCNN.com PM might have found that her readers complete a lot morearticles when a virtual reality 360° video is included, meaning bettersuccess metrics, and the PM wants to integrate 360° videos into morecontent. The design team might then create designs where every breakingnews story has a live-streaming 360° video to put viewers right therewith the reporter, but the engineering team might not be able to build alive-streaming solution. This means the design team needs to come upwith another solution that the engineering team can implement.Even though the PM won't be coming up with the solution herself, she'llstay actively involved in this phase. She'll likely work closely withdesign to conduct user research, looking at people's current behavior.She'll also help communicate with Engineering to ensure Design isn'tworking in isolation-that everyone is working together to solve thecustomer's problems.Contrary to popular belief, design doesn't just mean what the solutionlooks like. Design involves aspects like information architecture (Inwhat order are things presented to the user?), wireframes (Where shouldthe information live on the screen?), and pixels (How does it look?).It's uncommon to find a designer who's an expert on every one of theseaspects, and a PM will likely be working with a design team rather thanwith just one designer to figure out how the product should function andlook.If possible, you'll want the design team to produce prototypes of thesolutions that they can test with customers to validate the design.These prototypes could be printouts that you swap in when the customerclicks on something, clickable mockups working with fake data, etc. Thekey is to have something that accurately represents the solution, butthat you can mock up without having to actually build the solution.Design is done when you have validated a prototype as a suitablesolution, Engineering has agreed to the viability of the solution, andyou've defined the look and feel of the solution that all stakeholdershave agreed to.Building the SolutionOnce you've defined the problem and designed a solution, it's time tobuild it.Companies have different approaches to implementing solutions, dependingon their history, the product, and their desires. For example, if you'reworking on a mobile app, it's very easy to release a new version tocustomers every week, and development is likely focused on smaller butmore frequent releases-lean development is very common with mobile andweb apps. If you're building hardware, there is a long time between theproduct's design and when its hardware is ready for mass production.Hardware-engineering companies generally have fewer but veryhigh-quality releases. After all, it's difficult to release a hardwareupdate to fix a bug!In Chapter 7, we'll cover some of the most common software-developmentmethodologies, along with tips for working with engineers. Suffice it tosay the PM will stay involved throughout development, helping toprioritize bugs (backlog grooming), test software, and do whatever'sneeded to help the product ship.A note of caution if you're currently an engineer who wants totransition to product management-development might turn out to be themost frustrating phase to you because you are not an engineer anymore.You will not be writing code for the product, or telling people whatcode to write. Your job is to stand aside, and let the people who arestill engineers write the code. You help them however else you can, evenif it's getting them coffee, but don't tell them what to do unless theyask for your help.Furthermore, as a PM, you'll be put into positions where you have tonegotiate taking on technical debt, meaning you need to ask Engineeringto write kludgey code that isn't sustainable in the long term to getsomething done in the short term.Engineers hate taking on technical debt-they want to write a completeanswer from the outset. If you come from an engineering background,taking on technical debt can be hard. As a PM, you'll often have to makehard tradeoff decisions, accepting short-term debt to provide customervalue faster. The opposite is true as well, which is hard for PMs from anon-technical background. You'll have to pay off that debtlater-cleaning up the code-otherwise the code can get unwieldy, andit can become very hard to iterate on the project.Also, although we're presenting the product-development life cycle in avery linear fashion, it's a lot more iterative in real life, especiallybetween designing and building the solution. For example, while Designwill have figured out the most common use cases in the prototypingstage, there are likely many edge cases that will come up whileEngineering's building the product. Product, Design, and Engineeringwill work together to address these needs and questions that arise whileworking on the product.During the development phase a PM should try to find effectiveopportunities to share prototypes of the product with customers orpeople inside the company, so that you can get early feedback about theproduct. Does it address the customer's need effectively, or is there abig tradeoff you didn't anticipate? If you prioritize building theminimum viable product you previously identified, then you can starttesting the core product once the MVP's ready. It's important to ask forthis feedback at the right times-if you wait until right before yourelease to get feedback, you might not have time to act on what youlearn.New information that affects the product's scope might come up duringdevelopment, too. Going back to our example of 360° live-streaming onCNN.com, maybe a third-party company released a tool that makes it veryeasy to live-stream these videos. That'd make it simple for CNN.com'sengineers to add on-the-scene 360° video to breaking news stories, whichwas originally deemed out of scope because of the technical challenge.In the product-development approach we're presenting in this book, it'salways best to do more investigation up front, so that you don't wasteresources designing a solution and then have to change large parts ofit. But the best product managers are ones who know they can't defineeverything perfectly up front, and that it's generally impractical tospend months trying to do so. Instead they do their best to plan, butalso seek out new information to help the product get better, and reactto any needed changes with open arms.The development phase of the product-development life cycle is done whena working product that has been thoroughly tested is ready for release.Sharing the SolutionAs much as we'd like to believe that if we build it, they will come, theworld doesn't work that way. Product marketing (Chapter 8)-in fact,marketing in general-is an incredibly important part of theproduct-development life cycle, and really begins after we've built thesolution. This phase of the life cycle is where we launch our product,sharing it with the world and letting our customers know how our productwill help them.Effectively telling the world about our product is so important thatsome companies even create a separate position, the product marketingmanager. A PMM is very similar to a PM,but a PM tends to be more internally focused-getting the productbuilt-while a PMM is externally focused-working with customers tounderstand their needs and to communicate the product's value.Early in the first stage of the product-development life cycle, evenbefore scoping the opportunity, it should be clear what this productwill do for the customer. This isn't a list of what features it has orwhat the product does, but rather what problem it will solve. In theproduct marketing phase of the product-development life cycle, youfigure out how to succinctly and effectively communicate how the productsolves that problem and makes the customer awesome. It's essentiallystorytelling, and we call it "messaging."For example, going back to CNN.com's 360° VR video streaming feature, ifwe promoted the feature itself, "Live 360° VR video streaming," mostcustomers wouldn't know what that meant-or care. Instead of talkingabout the specific feature, we can focus on the value and the benefitthis feature provides: "Be on the scene with our reporters." We mightthen go on to say what the feature is and how to use it, but we've ledwith a clear message about why a customer should care.This phase of the product-development life cycle is more than justmessaging, though. We'll also plan for the product's release. Releasemight involve planning a beta test, creating marketing assets for awebsite or ad, working with key partners before release, briefing thepress, or planning a launch event. The exact needs will vary from launchto launch.Broadly, this phase of the product-development life cycle is done whenthe product is launched, but there will likely be many marketingcampaigns and tasks to help achieve the product's success metrics beyondthe launch. Marketing will continue even while the team, internally, hasmoved on to the next version of the product, or to a completelydifferent product.Assessing the SolutionThe last phase of the product-development life cycle is to assess howthe just-completed iteration of the cycle went, see if you're on trackto achieve your success metrics, and come up with a recommendation forwhat to do in the next iteration. As you might guess, thatrecommendation feeds into the initial planning phase of the nextiteration.During this phase, you will meet with the team that you built theproduct with and assess how it went. Did everyone get so burned out thathalf the team quit? Was the team very happy with the process and excitedto work on the next project? What was the team's overall competitivestrength, and what could they improve at? Use this feedback to determinewhat went well, and what you should do differently the next time around.Now that the product's released, you should start seeing real data abouthow people are using it. Is it in line with your expectations, or issomething far off? And most importantly, does it look like you're ontrack to achieve your success metrics? For example, CNN.com could lookat how many people are watching its new 360° broadcasts and whether theoverall number of people getting their content from CNN has increasedafter the release of this new feature. If the number of people watchingthese broadcasts and seeking out more content on CNN improved, then yourproduct was a success. If it's unchanged, then you should evaluate whythis strategy didn't work how you expected-why don't customers likeit?Once you've had a chance to see how your new product was received byyour customers, you'll put together a recommendation for what's next:should you iterate more on this feature/product, move on to somethingelse, or end-of-life this feature/product? This recommendation will helpinform the next iteration through the product-development life cycle,and we'll explain how to create a good recommendation in Chapter 9.As you can see, there's a lot to product management and theproduct-development life cycle! But don't worry, the following chapterswill break each step down into more detail and help you understand howto be a great product manager who makes awesome products that customerslove.One of the first things a great product manager should do before eventhinking about a product is to understand the company that makes it.Every company is a little bit different, and they have differentpriorities, values, strengths, and weaknesses. Knowing these detailsabout a company-understanding the full context of its currentsituation-is the starting point to find and evaluate productopportunities and make strategic product decisions. We'll build upon howto leverage these details in the following chapters.Analyzing a company breaks down into three main categories: What productare we building? How do we know if our product's good? What else hasbeen, is being, and will be built?What Product Are We Building?This category of analysis is focused on the company's current product.This might be an existing product that you're tasked with improving, orit might be the next new product that you want to build.Why Does the Company Exist?The most fundamental thing to understand about a company is why itexists. What's its mission statement or, even more importantly, its corebelief: the value it adds to the world that differentiates it from othercompanies?Simon Sinek has a great TED talk called "How Great Leaders InspireAction" and a book on the same topic, Start With Why. In both, he advocates for what he calls the GoldenCircle (Figure 2-1). Specifically, he says that the "why" of a companyis what people actually care about and buy into. How you deliver thatvalue and the products you create will build on top of this core value.From a product point of view that "why" is your guiding light-it willhelp you figure out what fits with the company's reason to exist andwhat doesn't. Put another way, the products you build are a means to anend. That "end" is the bigger picture and what customers buy into/wantto achieve when they buy your products.Think about storytelling-the "why" is the theme. What's this storyabout? What specific viewpoint does the writer want to share with theworld that led to her writing the story? Themes in movies are oftenobvious: love conquers all, revenge doesn't lead to happiness, etc. Acompany's theme can be a little harder to decipher. Often its theme isexpressed as a value within the company's mission statement, which youcan usually find on the website. But even if a company has a clearmission statement with a clear theme, it may forget about it when makingdecisions, leading to mixed results.Let's look at Sinek's example of Apple. If Apple started with the"what," which many companies do, Sinek asserts its messaging would read,"We make great computers. They're user-friendly, beautifully designed,and easy to use. Want to buy one?" That's fine, but it sounds prettygeneric. Many other PC manufacturers even make the same claim!Instead, recall the Think Different campaign Apple ran in the late '90s,which talked about Apple's "why" without even mentioning the products:"Here's to the crazy ones." Starting from that mission statement, Sineksays a more realistic marketing message from Apple would be, "Witheverything we do, we aim to challenge the status quo. We aim to thinkdifferently. Our products are user-friendly, beautifully designed, andeasy to use. We just happen to make great computers. Want to buy one?"That version starts with the "why" (challenging the status quo), thenmoves into the "how" (being user-friendly, etc.), and finally the "what"(selling great computers). It's way more compelling than the firstversion, and it also says a lot more about what Apple represents, andwho they are as a company."Why" is at the core of the Golden Circle because it's the mostfundamental thing you need to understand about a company. Everything acompany does, from the products it builds to the feature decisions itmakes for those products, should emerge from that value. If it doesn't,there's a good chance that decision isn't working well for the company.Google writes its mission statement as, "To organize the world'sinformation and make it universally accessible and useful." There's animplicit value proposition of driving the human race forward, whichGoogle does, primarily with data. It's unlikely to make a toaster oven,even a Wi-Fi-connected one, because that doesn't organize the world'sinformation, make it accessible, or drive us forward. However, Googledid purchase Nest, which made appliance-like devices, including athermostat and a smoke detector. Nest's products involve organizinginformation about your home and applying computer science to thatinformation to make your home function better. The Nest Thermostatlearns your behavior and automatically adapts how it heats and coolsyour house to save energy-thereby saving you money-while stillkeeping you comfortable.It's worth noting that every company whose fundamental mission is "tomake money" rather than focusing on what value it can add to customers'lives has failed. Sinek discusses this in detail in his talk. If yourcompany functions well and customers want the products you're making,you'll make money. Revenue is validation that a company is doing theright thing for its customers-revenue should not be a company's reasonfor existing. This isn't true for only socially conscious companies likeTOMS, the shoe company, but for all companies. Customers will pay foryour product because it makes their lives better, not because they wantto give you money.Similarly, companies that start without a mission, but rather with someinvention that they're trying to find a use for, often fail.Specifically, if your company started because someone said, "This is acool idea-can we sell it?" rather than "This invention would makepeople's lives better because...," you have a solution looking for aproblem. An engineering innovation by itself doesn't make aproduct-products are solutions to problems people encounter. You'lloften hear startups talk about "pivoting" because they found customersdidn't want the product they made, and the startup is trying torepurpose what it built to something customers will use.Some companies are moderately successful without having a clear missionstatement. But they struggle to grow because it's be unclear to theirleadership why their product was successful and how to expand theproduct line. The result is a product portfolio that feels verydisconnected. Misfit, which was purchased by Fossil, achieved successwith its Shine wearable activity tracker, but it didn't have a clearmission. Its follow-up products included a smart light bulb and sleepsensor, and they failed to gain much attention. Misfit appears to beaware of this problem and has tried to fix it, though, as it's nowfocused on making wearables a natural part of your life, withfashion-conscious activity trackers, and smart headphones with abuilt-in activity tracker. The implicit value proposition is that Misfitwants you to live a better life, and it achieves that by enabling you toanalyze your life, especially your health.As a product manager, keeping the company's core value proposition inmind will help you understand the company's vision. Understanding thevision will let you understand the company's goals, which lets youunderstand its product roadmap. We're getting ahead of ourselves here!Suffice it to say, your first task when looking at a company from aproduct point of view needs to be understanding its "why."Customers and PersonasThe most fundamental part of a company, after why it exists, is who it'ssolving problems for. Essentially, who are the customers for yourproduct, and why are they buying your product? You will optimize yourproducts for these people.Let's imagine we're building a camera accessory that plugs into theiPhone, like the DxO ONE. Your customers are likely people who enjoyshooting with their smartphones, but want better image quality than thebuilt-in camera provides. Since we're iPhone-specific, we won't careabout people with Android phones. And, since we're building an accessorythat people need to pay extra for, we will ignore people who are happywith the built-in camera.But even amongst all the customers we do care about, there's a lot ofvariability. Maybe one loves taking photos of his dogs while anothertakes photos of her ferrets. Dealing with lots of real people and theirvariability can make for complex discussions-our camera accessory hasto work with cats, dogs, ferrets, rabbits, etc. Instead, it would beeasier if we just abstracted things and said, "Our customers take photosof their pets."We can take the various common traits we care about in our potentialcustomers and abstract them out into a persona. A persona is afictional, typical customer, and defining key personas lets you segmentyour customers by highlighting the things your customers care about thatare relevant to your product. Personas are tools to help you understandyour customers, they are not actual end customers. A great way to thinkabout the difference is that Facebook and Snapchat have many of the samecustomers, but their internal personas-how they segment thosecustomers and what aspects of the product they care about-aredifferent.You've likely already talked about a persona without realizing it. Whensomeone asks, "Can my mom use it?" they don't mean their actual mom, shemight be a rocket scientist. Instead, they mean the "mom" persona of amiddle-aged person who is never the first to buy new technology, andwill break many gadgets simply by turning them on. When we say, "Can mymom use it?" we're actually asking if the product is user-friendlyenough that someone in the "mom" persona can use the product to achievea goal without breaking it and without asking for help.Good personas will have a picture and a fictional name. They willinclude any relevant details about the person's life such asdemographics, outside activities, and common tasks, as well as whatproblems the person is looking to solve. Think of a full persona as away to bring a typical customer to life-you want enough detail thatyou can imagine yourself in the persona's shoes. Roman Pichler put thisinto a template you can fill out to start crafting your own personasWhile it's tempting to make your personas very detailed, describingevery aspect of the person's life, they can quickly become overwhelmedwith lots of irrelevant details. Keep them as sparse as possibleoverall, but with enough detail that they're believable and represent areal target market. If you're wondering how to do this, write a detailedpersona, and for every statement you make about the person, if it's notrelevant to your product, delete it.The key things you're looking for are this person's priorities, relatedto your product/area of expertise. What is the persona "IT Tech Tom"trying to do that's significant and what's actually insignificant: Whatextreme pain points does he have and what pain points are insignificant?What are the things he must have from any solution you create? Forexample, IT Tech Tom might be very busy his entire workday with customersupport tickets. He would likely favor a new automated machinedeployment system over one that involves lots of manual intervention.A way to envision these customer's priorities is to imagine thecustomer's journey. What problem is a given persona trying to solve,what does he do when he tries to solve it, and what happens as a result?Tell us a story about the customer.Don't forget about the social or emotional side. Dental headgear cansolve orthodontic problems-a significant pain point-but do you wantto be the kid on the playground who has to wear headgear for two years?Other factors, like which distribution channels reach the variouspersonas, and whether they're willing to pay for different parts of theproduct, can help differentiate personas.Personas contain demographic information only if it's relevant. Forexample, Airbnb's "host" personas probably don't include how much eachperson makes per year, but they likely do include why a persona isinterested in renting her place out. A young urban host might be rentinga couch or second bedroom to help pay for his condo. In fact, he mighthave to do so, meaning he cares most about maximizing how much he getsfor his space vs. having someone there all the time. A retired couplewho are snowbirds, flying from Pennsylvania to Florida each winter,might want to rent out their vacation home when they're not using it, tosupplement their income. They'll likely prefer Airbnb guests who stayfor longer periods of time, and treat the home like their own, even ifit means their vacation home is empty periodically.This might be counter to what you know about typical marketing theory,where demographics are key. Again and again, product theory and practicehave shown that focusing on a common problem, pain, or desire yieldsbetter segmentation than demographics.Harvard Business School professor Clayton Christensen has been workingon a customer-segmentation approach he calls "jobs to be done" for overa decade. Thinking this way helps build great personas. The exampleChristensen gives is that when a fast-food company tried to improve itsmilkshake sales, it first did traditional demographic segmentation andasked each persona (e.g., the 18-35-year-old milkshake drinker) abouther ideal shake and implemented changes. Sales were stagnant.But when the fast-food company focused on who bought milkshakes, whenthey bought them, and where they drank them, it found a different way tosegment its customers. One segment bought milkshakes in the morning tokeep them feeling full until lunch. As an added benefit, the morningmilkshake gave them something to occupy their free hand while drivingduring a boring commute. That group wants a milkshake that takes a whileto drink so that it lets them feel full longer and lasts for thecommute. Now consider another segment: customers buying milkshakes as aspecial treat for young children. Kids likely just want a tasty treatand don't have the patience to drink a milkshake for 30 minutes. Usingpains and goals instead of just demographics will help you segment yourcustomers into useful personas.It's possible your product has multiple personas. For example, thepeople who read and write reviews on Yelp are customers, but thebusinesses these people review are also Yelp's customers. Createmultiple personas if needed, and identify the primary one you want tosatisfy.Sometimes the customer and the buyer-the person using the product andthe person actually purchasing it-aren't the same, such as parentsbuying a swing set for their kids. This is common with enterprisesoftware, and you'll need to create separatepersonas for these cases.Ultimately your goal with each persona is to have enough information anddetail about that category of customer that you can imagine yourself inthis person's shoes. This will help you empathize with that customer,understand his pain points, and think about ways your product can solvethat pain (we'll go into this in depth in Chapter 3).Because personas help you understand what a group of customers is like,a key piece of a persona is to be authentic-if you find your personais incredibly busy, working 80+ hours/week, how much time do you thinkhe'll have to learn how to use your product? If you fail to note howmuch your persona works, you could make the wrong product decisions,errantly assuming this persona has time to watch a long onboarding videotutorial.Whenever you start working on a new product or at a new company, findout as soon as possible who the relevant personas are. Make sure they'reclearly written down in the Name/Picture/Details/Goals format. Manycompanies use Word or Google Docs files with their persona data, andthere are specialized tools that explicitly manage your personas andorganize the research that goes into each one (As of the time ofwriting, the landscape of persona tools is so in flux that we've electedto leave it up to you to search and find what's current).If there's nothing written down, it's still likely the company has arough idea of who its customers are. Use that knowledge to write down afirst draft of the persona, you will revise it over time.It's not mandatory to have pre-existing customer knowledge to build apersona. Just make your personas rough at first, and as you learn moreabout your customers, refine the personas, perhaps dividing them up andcreating a new persona when key differences appear. You might even findas you talk with customers and show them prototypes of yourproduct/feature that someone you thought was a certain persona reallyisn't.Take Airbnb, for example. Even though business travelers travelfrequently, they might not be the best persona for Airbnb to focus onbecause they expense their hotel rooms, meaning they're not pricesensitive, they care more about service than connecting with the host,and they often have rewards cards that let them accumulate free staysfor personal travel. Airbnb focuses on making interactions with yourhost and other locals part of your travel experience. Businesstravelers, however, are there to work, not to feel like a local. All ofthat means they're currently better served by regular hotels, and Airbnbmight choose not to spend lots of time targeting that persona right now.You'll also want to ensure your personas align with what your productdoes. If you're building payroll software for a small to medium-sizebusiness, your personas should be based on coffee shops and doctor'soffices, not a stay-at-home dad. Stay-at-home dads won't have any reasonto buy your software, and you want to spend your time making decisionsbased on the customers who will buy and use your software.Note that "everyone" is not a persona, as "everyone" is too vague tohelp you make decisions. Many people think that big companies likeGoogle, Facebook, and Apple target "everyone," but they don't and arequite forward about it. Facebook started off targeted at one persona,college students. Over time Facebook grew, adding high-school studentsand beyond, and its current customer base is very diverse. Facebooklikely has many internal personas, but when it releases new features,they're still targeted at specific personas. A "Henrietta High-SchoolStudent" persona doesn't care about the reviews feature on businesspages, but a business that created a Facebook page certainly does!Another great attribute to consider about your personas is where on theadoption curve they fall. Not everyone buys/starts using something newat the same time. There's a general theory of adoption-which can referto a new product or a new feature-that says there's a tiny group ofearly adopters that have to be the first to have new things-think ofthe first person you know to own a smartwatch. Then, there's a slightlylarger group of people who like being one of the first-but notnecessarily the first-to have somethingnew-think of the first person you know who bought an Apple Watch butdidn't own a previous smartwatch.Unfortunately, there's a gap (see Figure 2-3) before you get to the nextgroup of people. If your product's awesome and delivers on a valueproposition your customers care about, you'll continue on to the nextstep, mass-market adoption, when the bulk of potential customers buy/useyour product. Eventually, even the late adopters-the people who alwaysseem to be years behind everyone else technology-wise-will start usingyour product. Considering where your various personas fit into thiscurve will help you understand when they're likely to adopt your newproduct or feature. This will help prioritize features. Early adopterswill tolerate missing features that laggards might require, for example.The adoption curve where the x-axis represents the groups of customers that will potentially purchaseyour product over time. The y-axis represents the approximate marketshare of each group.But if your product isn't awesome, when you hit the chasm beforemass-market adoption, your growth will stop because your product doesn'tprovide enough value to most people's lives. The mass market won't adoptit.Whenever you think about how to make a product better, your firstthoughts should be about who the target personas are and what needs theyhave that aren't currently being met by the product. This gives you agreat immediate filter to make sure you're making strategic decisionsabout what to do next.Use CasesUse cases are simply how a companyexpects each persona to use the company's product to achieve a goal.They provide the context to let you understand the link between yourpersonas and your products.Day to day, a PM will need to think about what use cases they want tosupport for their product, which helps in finding and prioritizingopportunities. The use cases will affect everything from what featuresyou prioritize to solve your customers' problems to what customersyou'll market your product to.For example, a key use case for an iPhone is checking your email on thego. Apple will make product decisions for the iPhone that help you knowwhen you have new mail, and let you reply to mail, compose new mail,etc. Conversely, the iPhone isn't designed to help you press cloves ofgarlic, although you could theoretically use it to do so­-we'drecommend buying a garlic press instead. Apple cares about the former,not the latter. The choices it makes will be focused on improving emailon the go, even if it means a future iPhone is no good for cooking withgarlic.That example is pretty drastic and obvious, so let's look at a moresubtle example companies often face. One major category of company iscalled enterprise or B2B (business to business), which applies tocompanies that create tools to address other companies' work-relatedneeds. B2B companies will frequently pick a size of customer company tofocus on-small, medium, or large-and then further focus on selectindustry verticals.Gusto, formerly ZenPayroll, is an HR-solutions company for smallbusinesses. It realized that small businesses have a wide range offairly complex "run the business" (RTB)needs such as HR, accounting, and office-administration. One personusually can't do all of those tasks, small businesses don't have theresources to hire many people to do those tasks, and existing tools likeADP are overkill for small businesses.Gusto's initial persona was likely a small-business owner-we'll callher "Suzanne Small Business Owner." The Gusto website lists instances ofthis persona, including in her repertoire tech startups, coffee shops,auto shops, creative agencies, law firms, and restaurants. Those are thecustomers Gusto targets.Let's pretend Suzanne owns a coffee shop. Put yourself in her shoes fora second-what are the RTB tasks she has to deal with? The simplestones are around payroll: she wants a way to collect W2-relatedinformation (US-government-required work forms) for her employees, shewants an easy way to pay employees, and she wants an automated way toprovide them with tax information. These situations she wants toaddress-problems she wants to solve-are use cases she might want touse Gusto for, and Gusto will likely build features to solve theseproblems.At the top of Gusto's website is a Payroll link. When you click on ityou'll see that Gusto specifically states how it has employeeself-onboarding for W2s and more, payroll solutions, and automatedtaxes. It has built features into its product to enable it to work inthese use cases that its target persona, Suzanne Small Business Owner,has.Gusto initially focused on one use main use case: payroll management.But over time it has expanded to cover more use cases, such as healthinsurance. Over time, Gusto will likely continue to help smallbusinesses simplify their RTB tasks. They'll be addressing more usecases that Suzanne Small Business Owner deals with.However, if a large business tried to use Gusto, the business would findfeatures it needed lacking because its requirements are more complexthan those of the small businesses that Gusto targets. Gusto doesn'thandle all the use cases for a large business, but a more complexproduct like ADP does handle those use cases.Down the road, Gusto could choose to expand to support another customer,a large business. To address that customer, Gusto would create personasto represent the different types of large-business customers, like"Multinational Matt." Gusto would then add features to the product toaddress the use cases large business have but small businesses don't,like dealing with multiple international offices. This would be one wayto grow and to gain more customers. However, supporting large businessesand their use cases isn't currently a priority for Gusto, so it hasn'tbuilt features to address these needs.By focusing on specific use cases for specific personas, you can ensurethat your product addresses the needs of those personas effectively,which makes your end customers happy. Adding features to support new usecases or making it easier to achieve current use cases is a commonsource of product opportunities.Enterprise vs. Consumer CompaniesRelated to use cases and personas is knowing if the company isdeveloping enterprise (B2B) or consumer (also calledbusiness-to-consumer or B2C) products. This simply means asking whetherend customers are using the product in their personal lives, or at work.You likely don't need payroll software at home, and you likely don'tneed a smartphone-connected sous vide device at work.The primary difference in how these companies function is that B2Binvolves more decision makers, and the people who decide to buy theproduct are often not the ones using it-e.g., a CTO will approvebuying software for HR, but it's HR who uses it day to day. B2Bcompanies often have larger sales forces with specialized roles such assales engineers who help integrate the product into the customer'senvironment, and customer-training roles. You're unlikely to just startusing SalesForce out of the box, for example, nor are you expected to.B2B software also historically emphasized utility over usability: thatis, as long as it solved your problem, it's OK if it's really painful touse. However, B2B technology has shifted to focus more on the endcustomer rather than just the decision maker. As we've seen with Slack,Gusto, and more, B2B companies are acting more like B2C companies,creating software with intuitive design that you can use out of the boxwith little training, just like you don't need training to use Facebook.The tools and techniques you'll learn in this book will apply to bothstyles of companies. You'll build personas and break down use casesregardless of whether you're building B2B or B2C products. Just be awarethat you'll have to do extra legwork to account for the additionaldecision makers and their personas in a B2B company. B2B software isalso more likely to be subject to legal compliance requirements and toneed to function in a multi-user environment, which creates additionalfundamental product requirements that B2C software doesn't have.How Do We Know If Our Product's Good?In Chapter 1, we mentioned that a big part of product management isknowing how we keep score. Metrics, in particular success metrics, arehow we measure that score.Metrics are the measurement ofdifferent aspects of your product. These might include things withinyour product, like how many people complete a task, or things affectedby your product, like how much revenue you're making. Success metrics,sometimes called key performance indicators (KPIs), are the key metrics that define how wekeep score, like how many goals you scored in a soccer game.Success metrics are useful because they help us validate if our currentstrategy is working, and if it's not we can dig into the overall metricsto come up with a hypothesis for how we could make changes to achieveour success metrics (more on this in Chapter 3). While productmanagement sometimes feels like more of an art than a science, metricsprovide the data-driven, scientific backbone to product management.Your success metrics are defined by your current strategy and goals.Overall company success metrics come from the company's short- andlong-term strategy goals, with long-term metrics being defined by thecompany's core values-the "why" we talked about earlier. If part ofyour company's mission is that you want your customers to love yourproducts, then a key ongoing, long-term strategy company success metricwill be how satisfied your customers are with each product.You will have additional success metrics that change over time based onyour short-term goals. For example, it's common to see companiesswitching their short-term goal from growth (people are using ourproduct) to revenue (people like our product enough to pay for it). Whengoals change, what was a success metric one week might just beconsidered a regular metric the next week.Generally, you'll have separate company and product success metrics, andthe product success metrics will support the company metrics. Maybe yourcurrent company success metric is brand awareness, a common initialsuccess metric for startups. In that case, your product success metricswill include number of downloads of your app, visits to your website,and so on: metrics that indicate people are aware of your company andproducts.Later on, your strategy might shift to making your app part of people'slives, in which case your success metrics will focus on engagement: Ofthose who downloaded the app, how many complete a core task? How manycustomers do that task each day/week/month? As your strategy and success metrics change, yourproduct plan and the features you choose to work on will similarlyshift-you want to make sure what you're working on supports your goalsand success metrics.It's critical to compare these metrics over time, allowing you to see ifyour strategy is working. You might be using revenue as a successmetric-getting people to open their wallets is a sign they value yourproduct-and perhaps you have $1 million in revenue right now. Thatseems great until you realize you had $10 million in revenue lastmonth.A common question PMs deal with is, how do we pick the right goals andsupporting success metrics to focus on?In general, it depends on your company. But Sarah Tavel, who wasPinterest's founding PM for search and discovery and is now a partner atGreylock, noticed a trend in the success metrics of successfulconsumer-focused internet startups, and she wrote up her findings in ablog post entitled "The Hierarchy of Engagement."Tavel noted that there are three distinct strategy phases startups, andby extension new products, go through: engagement, retention, andself-perpetuating. Startups that go through all three tend to turn intomultibillion-dollar companies, whereas startups that get stuck in onephase commonly fail.The goal of the first phase is to get customers using your product andcompleting the core action, like posting a photo to Instagram. This is asign they're engaged with your product, and we could say that completingthe core action is a success metric that supports an engagement goal.Pinterest's core action is pinning something. In 2011, when Pinterestwas growing well, over 50% of its weekly users were still pinningthings. Compare this to Viddy, a video-sharing startup that becamepopular in 2012. When Facebook started featuring Viddy content on April24, Viddy's growth skyrocketed to about 35 million users, as you see inFigure 2-4. But the daily active users and the people actually postingcontent was much lower, peaking around 5 million users, or around 14% ofall users. Even though Viddy appeared to be doing well, with lots ofpeople signing up, very few completed that core action. Viddy shut downin late 2014.Now let's look at the second of Tavel's three phases, retention. Aftercompanies saw good engagement-what "good" means varies-they'd shifttowards retaining users with success metrics around how frequently thosecustomers use the product in a given time period. The idea is that ifthe product gets better for users over time, they will keep using it andthey'll miss out if they leave. In fact, it's better to have slightlyslower growth but a higher percentage of customers continuously usingthe product than constant growth but low retention because you'll end upwith more customers over time.A simple example of this is frequent-flier points on airlines: The moreyou fly, the more status you achieve and the more pleasant flyingbecomes. In software, think about social networks. The bigger theaudience you've built up on Twitter, the more you'd have to lose bystopping using Twitter and trying to rebuild your audience on anothernetwork. Products that don't encourage customers to continuously usethem are easily replaceable. Lyft and Uber are the same for an endcustomer whether you've ridden once or a hundred times. You likely justrequest a ride from whichever service has the shortest wait time. And ifa new competitor comes around that offers an incentive, such as ride 10times and get $10 in credit, you lose nothing by deleting the Uber appand using the competitor instead.The final phase that Tavel describes is when your goal isself-perpetuation. This means your product has various loops that keepthe customer engaged, and encourage other customers to get engaged. Yoursuccess metrics will be around how often people complete these loops.Pinterest gets better when more people post pins because this leads tobetter discovery of new, relevant things to pin. And sharingnotifications (which we'll look at more in Chapter 3 with the HookCanvas) encourage both new customers to pin something and existing usersto return to the product.Tavel goes on to describe cohort performance as the ultimate successmetric your company should look at over time, encompassing all three ofthese stages. Specifically, look at the number of weekly userscompleting the core action and the percentage of weekly active userscompleting the core action over time. This shows growth from the size ofthe cohort, engagement from the ratio of users completing the coreaction, and retention from your performance over time.While these stages don't apply directly to some products, like a B2Bproduct a company mandates its employees use, the principles are stillapplicable. You want your customers to be able to complete the coretasks in your product smoothly and repeatedly, and as long as those coretasks align with use cases your customers care about, your product isoff to a good start.Vanity vs. Actionable MetricsAs product managers, we see a lot of metrics. Some are more helpful tous than others, and we often talk about two categories of metrics:vanity and actionable. Vanitymetrics are those that sound useful, andmight be great for some other business need, but don't help us measureproduct performance. Actionablemetrics are real data we can use to makedecisions.Let's look at an example, using Tavel's first phase, engagement. Whenyou're launching a new product, say an app, as a product manager yourgoal is to have people completing the core task. Maybe 1 million peopledownloaded your app on the first day-congrats! That sounds awesome,right? While getting someone to be aware of and download your app is thefirst step, it doesn't mean they actually opened and used yourapp-things look very different if only 10 people actually completedyour app's core task.Numbers like page views and downloads are vanity metrics because theysound useful. They might be useful in investor pitch decks, negotiatingdisplay-ad prices,1 million people look at our pages each day!,and for other company needs. But from aproduct management point of view, they don't help us measure if ourproduct is successful.Instead, product managers need to focus on actionable metrics that letus make decisions. Now that we know only 10 people completed ourproduct's core task, we can look at other metrics to try and figure outwhy so few people were engaged with the app.How to Measure MetricsThe most common way you'll measure metrics is by adding bits of codeinto your product to measure customer behavior, and to automaticallycollect the individual measurements into an analytics tool, like GoogleAnalytics.Usually these measurements are very simple: How many people uploaded afile? How many people clicked this button? How much time did a personspend looking at a web page or a screen in an app? Early on when planning a product, you'll want tothink about what metrics you want to capture and work with yourdevelopment team to capture those metrics (Chapter 5). For legalreasons, customers often have to opt in to providing this analyticsdata, which is why you frequently see disclosures in usage term sheetsor pop-ups in software alerting customers that you're collecting usagedata for a product.However, not every metric gets captured automatically. It's tough toknow from an automated tool whether customers like your product or swearat it multiple times a day when they use it. If your long-term goal isfor customers to love your product, what should you do? Companiesfrequently use surveys and interviews to sample groups of customers andgauge these higher-level metrics. Sometimes these surveys are automated,such as a pop-up asking how you like the app on a scale from 1 to 10.Net Promoter Score®The Net Promoter Score (NPS) is a metric developed by Satmetrix, Bain &Co., and Fred Reichheld. It's a high-level way to gauge overall customersatisfaction with your product by seeing how likely customers are torecommend it to others, on a scale from --100 to 100. The idea is thatif customers love your product, they'll tell others about it. If they'reambivalent, they could switch to a competitor. And if they dislike it,they might tell others to stay away and cost you business.NPS is measured by asking customers, "On a scale of 1--10, how likely isit that you would recommend \brand\ to a friend or colleague?"Promoters rank your brand 9 or 10 andare "loyal enthusiasts who will keep buying and refer others, fuelinggrowth." These are the people you want! Passives will rank you 7 or 8 and are "satisfied butunenthusiastic customers who are vulnerable to competitive offerings."Detractors score you from 0 to 6 and"are unhappy customers who can damage your brand and impede growththrough negative word-of-mouth."From those replies, the NPS is the percentage of promoters minus thepercentage of detractors, giving you a score from --100 to 100.Reichheld, in his 2003 article about NPS, entitled "The One Number YouNeed to Grow," found that many companies' NPS were low, with a medianbeing 16 across 400 companies, showing that a lot of companies have workto do to improve customer satisfaction!Measuring NPS over time is a way to see how customers are reacting tothe product changes you make (or don't make). If your company's goal iscustomer satisfaction, with NPS as your success metric, and your NPS islower than you'd like, then your immediate product goals will be aroundimproving your customers' happiness. We'll dig into how to figure outwhat changes to make to improve customer satisfaction in Chapters 3 and4.Whew-for such a simple concept, there's sure a lot to success metrics.But they are incredibly important to product managers, as they let usfigure out if our product and the strategy we're taking are meeting ourshort- and long-term goals.What Else Has Been, Is Being, and Will Be Built?Unfortunately you can't look at a product or a company in completeisolation around this moment in time. What the company did in the pastlikely has an impact on where it is now. Microsoft completely missed thestart of the mobile era, and that has led to its drive now to be"mobile-first, cloud-first."It's also worth thinking about where a product might go next. Whilesometimes you'll build a product by releasing it to customers, gettingfeedback, and reacting to customer demand, you'll also often need tothink about the long term to support overall company strategicinitiatives. What do you want to do in three months, in six months, orin two years that you need to lay the groundwork for today? Maybe yourproduct is free right now but your company wants to add a subscriptionpayment system-your customers aren't asking to pay you each month, butyour company needs to generate revenue to survive. You'll need to dowork now so that you can handle billing information later.RoadmapCompanies generally collect their product plans into a roadmap. Aroadmap is a document that shows whatthe company/product is doing now, what the company/product plans to doover the next N months, what thecompany/product plans to do later, roughly how much effort eachhigh-level task will take, what products the company will create, andwhat features they will have, etc. It's a valuable tool to help peoplecommunicate about the company, both internally by helping employeesunderstand what projects you're working on next, and externally byhelping partners anticipate your needs or plan for products you'rereleasing, a situation common with hardware-component providers.Roadmaps are often fairly detailed in the short term-short term being3 to 6 months for most software, 6 to 12 months for large softwareprojects, and 12 to 18 months for hardware-and become more vague overthe long term. This happens over the long term because priorities canchange, and it's not worth planning out details for things that mightnot happen. Just knowing you want to work on something at a high levelis sufficient.Companies and products will have related roadmaps. The company-level onedefines how all the products come together, and the productone-obviously-focuses on each specific product. Company roadmaps aregenerally determined by senior executives at a company, such as the CEOor the head of product. Product roadmaps are created by the product'sPMs, and are often influenced by andexert influence over the company roadmap.The factors we discussed at the very beginning of this chapter, in the"What Product Are We Building?" section, affect the roadmap, too. Thebest roadmaps are ones where the company has set goals to achieve andthen planned projects that will help it achieve those goals. Theseroadmaps will also provide the sense of the ownership needed for eachproject, and determine the order in which the projects should happen.The next chapters will cover how we find opportunities and how items endup on the roadmap, but for now simply know that roadmaps are notarbitrary.Roadmaps take many forms. Sometimes they're a spreadsheet using colorsto show all the scheduled projects, their timeframes, and what goal eachproject supports. Other times companies use a special tool like Aha! thathas additional features, such as bug-tracking integration with Jira sothat you can dig into specific details like how each bug relates to theroadmap. It doesn't matter what tool you use to create your roadmap-itmatters that you have a roadmap.There's one major risk with roadmaps-you don't know the future, and ifyour plans change someone might ask you later on why you didn't deliveran item on the roadmap. Keeping roadmaps up to date and keeping itemsfurther out intentionally vague-even if you have more accurate timingestimates-can help alleviate this issue.Competition and ClimateThe last element to think about when trying to understand a company iswhat's going on around that company: What are other people building?Who are the company's main competitors? How are their target use cases,personas, and end customers different? How are their products different?How are they winning or losing compared to another company? Are youaware of who's out there?At Product School, we had a student who cofounded a service focused onhelping schools book their facilities for other events. Originally, heand his company were not aware of any other competitors. However, whilethe student was in class and working on his final project, he discoveredthat another company had pivoted from focusing on broader bookingservices to focusing specifically on schools. While this was validationthat there's an opportunity with the use cases his company was targetingand it focused on delivering a better product than its competitors, itstressed him out knowing that his company wasn't the only one playing inthat space anymore!Beyond competition, what's going on in the industry in general? Has somebroader invention or change caused every company to drastically alterits plans? For example, as smartwatches become popular, many companiesare racing to create their own watches or versions of their apps forwatches. And with Google Chrome now blocking Flash ads, ad techcompanies are forced to adjust their plans to deal with this change. Broader world changes can impact a company, too. China devalued itscurrency in August 2015, possibly to keep its manufacturing ratesattractive, and that has had an impact on revenue for companies thatsell in China. It also might have had an influence any company lookingto build its products in Vietnam.The world, and especially technology, doesn't stand still! A great PMwill stay on top of the news to make sure that her company doesn't fallby the wayside because it missed a broader force that changed!A 5C AnalysisIf you've ever talked with consultants or MBAs, you probably heard themname-drop a framework or seven. There is a variety of "standard"frameworks in the business world-we say "standard" because there aremany similar frameworks, and different companies pick differentstandards. We'll cover some common ones in this book, but we will alwaysprioritize presenting things with a product focus, even if it means wedon't use a framework.There's a framework called 5C that's similar to the areas we justcovered. It's a situational framework,meaning it helps you understand a company's current situation so thatyou can create an opportunity hypothesis. The 5C structure isgeneric-useful to product, marketing, and more-whereas the way wepresented the sections in this chapter is very focused on productmanagement. It's good to know what the "C"s stand for because you'lllikely hear 5C mentioned. Plus if you need to do a situational analysison your feet in a meeting or interview, it's relatively easy toremember.Company: This refers to the company'sexperience, technology, culture, goals, and more. It's similar to thematerial we covered in the "Why Does the Company Exist?," "How Do WeKnow If Our Product's Good?," and "What Else Has Been, Is Being, andWill Be Built?" sections.Customers: Who are the people buying thisproduct? What are the market segments? How big are they? What arepeople's goals with buying this product? How do they make buyingdecisions? Where do they buy this type or product? This is similar towhat we covered in the "Customers and Personas" and "Use Cases"sections.Collaborators: Who are the externalpeople who make the product possible, including distributors, suppliers,logistical operators, groundwork support personnel, and so on?Competitors: Who is competing for yourcustomers' money? This includes actual and potential competitors. Youshould look at how they position their product, the market size theyaddress, their strengths and weaknesses, and more.Climate:These are the macro-environmental factors, like cultural, regulatory, ortechnological trends and innovations.Sometimes product managers add a "P" to the 5C structure for "product,"and specifically call out the product(s) the company makes. This is amix of what we covered in the "What Else Has Been, Is Being, and Will BeBuilt?," "How Do We Know If Our Product's Good?," and "Use Cases"sections.Introducing Moover.ioThroughout this book, we'll use a fictional company, Moover.io, as acase study. Let's look at its company context using the principles inthis chapter.Moover was started about a year ago to help people save time-its"why"-initially focusing on making it easy to get estimates and book amove. Currently, Moover has an iOS app where you enter some very basicdetails about your move: zip codes to and from, date you want to move,packing needs, number of rooms, number of stairs, and any other specialnotes. You click "Submit", and over the next few days, moving companiesreturn bids. If you see one you like, you can tap "Book", and Mooversends a note to the moving company, which follows up with a phone callto confirm any needed information. Moover charges a small, fixed fee of$10 when you click "Book," using Apple Pay or PayPal. There's also asimple web dashboard app for the moving companies, where they can seeoutstanding bids with the basic information about the potentialcustomer's home, along with whether a customer accepted or rejected thebid.Moover's target use case is moving from and within bigger cities, asit's worked with only moving companies in San Francisco, New York, LosAngles, and Chicago to set up the service.Moover has two key personas. The first is the moving company, AntMoving. Ant is a mid-sized moving company with about 10 crews that hassomeone in the office who gives estimates over the phone full-time. Antdoesn't have a full online booking system set up because it's easier andcheaper to do things by hand. The second persona is Really Busy Rob.Rob's a busy person who likes using app services to handle the mundanedetails in life. He prefers Lyft to owning a car, orders dinner fromPostmates, and more. Rob doesn't mind paying a small fee for theseservices, as he feels his time outweighs the fee. Rob works a lot, andhaving to arrange a move is the last thing on his mind! Moover alsolearned from interviewing lots of potential "Robs" that Rob could easilybe "Roberta" because gender doesn't matter. Rob's likely been out ofschool for a few years and has accumulated enough stuff that hispossessions don't fit into his car anymore, and we won't find Rob on acollege campus.Moover has two current business goals: to find ways to improve customersatisfaction, and to grow the business. Moovers currently experiencinglimitations that prevent it from reaching this goal, for example, rightnow that follow-up phone call to plan details is annoying, especially ifthe moving company has to come on-site, and Moover has no way to handlespecial cases, like a piano. The people at Moover, however, aren't surewhat they should focus on next, nor are they sure if they're missing anopportunity.Right now, moving tech isn't exactly a hot market, and Moover's maincompetitors are specific companies' booking systems and people willingto make a few phone calls-or use a service like Fiverr to have someonemake the phone calls for him.Moover just raised $1 million and hired its second product manager:you! Throughout this book, we're going to help Moover figure out whatfeature to build next and walk through how to build it. Two TipThroughout this book, to give you an additional perspective, we'veasked experienced product managers to share their best advice about eachchapter's topic.Our first tip comes from Jeremy Toeman, vice president of products atCNET. Jeremy runs CNET's audience development, engagement, and socialmedia teams, and he's responsible for building CNET's multichannelproducts, including web, mobile, and apps. Jeremy has more than 20 yearsof experience, including being VP of product management at Sling Media;working on Dropcam, Sonos, and Sphero; and founding multiple companiesthat had successful exits. In other words, he knows what he's talkingabout! Here's what he has to say about personas.Making Personas Real with EmpathyWith \~20 years under my belt, I've noticed the consistent trend is forproduct managers to define personas with 90% demographics, and 10%wants/needs/emotions. Maybe less. For example, it's easy to createJill-a 23-year-old in a major metro who has a roommate, loves travel,and is very into the DJ scene. Jill is thinking about buying her firstcar. That's a great starting point. But it's barely the tip of theiceberg.Does Jill care about what the car says about her, or does she care aboutfuel efficiency? Is Jill focused on saving money, or on resale value?Does Jill care about the car tech, or just that it gets her places?Further, does Jill enjoy the research process, or does she just want tobe pointed in the right direction? Is she going to make a littlecomparison spreadsheet for herself, or just wing it?Far too often products are coming to market without considering theneeds of the individual, as opposed to pure demographic fit. All of theabove scenarios are valid to a product manager who is designing asite/app to cater to car buyers. But a simple review of car-buyingwebsites shows a distinct lack of consideration for emotional needsversus purely practical ones.When the TV industry tried to bring 3D technology into the house, theyshowed a distinct lack of empathy. Sure, 3D movies were performing wellin theaters, so it made logical sense to bring that kind of tech intothe home. But an empathic product manager could have easily predictedthe poor reception: movie theaters are primarily solitary (thoughshared) experiences, whereas family/living rooms are primarily socialexperiences. And no family wants to sit on the couch wearing a bunch ofgoofy glasses (not a problem in a darkened theater).Great product managers can put themselves into the mindset of thepersona, and really get into his/her skin to understand the wants andneeds and, most importantly, the emotional triggers of their users. Andtruly great product managers will cycle through many different personasas they consider the product's core needs. This process determines thesubtle differences that can take good products and transform them intoexceptional ones.A key part of your role as a product manager is understanding yourcustomers and their problems and needs, and making sure what you'rebuilding next is right for them, be it a feature or a new product. Atthe end of the day, very few companies fail because their technologydoesn't work. Companies fail for lack of customers.Here's a dirty secret: everyone thinks they know what their customersneed. But like we mentioned in Chapter 1, most people-even your boss'sboss-really have no idea what customers need until they've done somework! Every company has a different approach to figuring out whatcustomers want, and there are tweets, blog posts, books, and epic operasabout how to do so-well, maybe not operas, yet.We're going to take an approach modeled on the scientific method-comeup with a hypothesis about your customer needs and how you can addressthem, then validate or invalidate it. This chapter will cover differentways to generate a hypothesis. Chapter 4 will discuss how to validateit, and Chapter 5 will help you transition from ideation to execution.Keep in mind what we're teaching you is just one way to approachfiguring out what to do next, albeit it is a good one. A lot of thecontent in this chapter is a bit chicken-and-egg-some of the materialwe taught in Chapter 2 comes into play here, as does future materialfrom the Customer Development section of Chapter 4. Customer developmentcan influence your personas, use cases can inform opportunities, and soon. Rather than debate ad nauseam where to start, we've chosen anapproach. We encourage you to keep a similar mental model, based on thescientific method, no matter where you start, so that you're alwaysmaking informed decisions about what to do next.You Have Opinions, Not FactsThere's some bad news you should know up front. Generally, less than 50%of ideas you'll execute-even awesome ideas-improve the metricsthey're supposed to improve. Amazon tests all its new ideas and has datato back up this 50% figure. Yammer follows a similar practice and hasseen similar numbers. As a product manager, you want to find ways tospend your time on features that matter. This starts with accepting thatyour ideas start off as opinions and not facts.It's sometimes very hard for product managers to grasp that theiropinions are not necessarily truth. We like being right, and we'retaught in school that it's bad to be wrong. The real world-andbuilding products-isn't like that. It's OK to be wrong, but we want tofigure out if we're wrong as soon as possible and course-correct beforewe put lots of resources into our incorrect opinions. If you're wrongbut insist you're right, the product will fail. But if you're wrong,realize it quickly, and adjust accordingly, you're much more likely tosucceed.How often has someone said to you, "I have a million-dollar idea for aproduct that does x," and the voice insideyour head answers, "I wouldn't buy it." Lots of people have opinionsabout what product or feature to build. Everyone assumes they'reaverage, and that if they want something, lots of other people do, too.Because of this, many people go immediately from an idea right tobuilding it, never once seeing if others would actually buy the product.Early-stage startups frequently have this problem-these are also oftenthe startups that eschew product management. Unfortunately, thesecompanies end up in trouble because after spending lots of money tobuild a product, they find out no one wants it. As a result, bad thingshappen, ranging from their abandoning the product without recoupingtheir investment to going out of business.Wouldn't it be great if you could limit these disaster scenarios in acost-effective way? The approach we're going to teach you, focused oncreating and validating an idea, will let you quickly and cheaply filterout ideas that won't help you. Note we're not talking about "bad"ideas-an idea could be good but just not help you or your customers.Steve Blank, a tech entrepreneur, worked with a number of startups andnoticed a trend in the ones that failed. Specifically, these startupswould focus on their business plans and go right to product development,skipping any validation of their fundamental idea-sound familiar? Bythe time a startup would get feedback from customers, it would be so fardown a path that it'd be tough to make changes. Blank noticed thatstartups failed mainly due to lack of customers and a profitablebusiness model, and the ones he worked with and their investors didn'tsee value in taking time to figure out if people really wanted what theywere building. Ironically, this disconnect was especially an issue forthe startups' founders, who created the initial hypothesis the companywas founded on. They quickly became isolated from direct customerfeedback, as they hired people such as marketers to interact withcustomers for them.Blank's work led him to conclude that "in a startup no facts existinside the building; only opinions." He then created the idea ofcustomer development, which essentially says that whatever you come upwith at first is an opinion; you might be wrong, and you need tointeract with real potential customers to learn the truth ASAP. Thischapter is about forming a good opinion. Chapter 4 is about how to findout the truth about your opinion.Customer development became a core part of lean methodology, which webriefly mentioned in Chapter 1. Lean Startup is a business that appliesa product developmental methodology, adapted by Steve Blank and EricRies from Toyota's revolutionary manufacturing pipeline, toproduct/software development. Lean Startup is focused on helpingcompanies be successful by quickly and iteratively determining whatcustomers want, building something that fills only that need, validatingthe solution, and repeating.Customer development is a key part of Lean Startup because it's a way toquickly increase your learning, so as to avoid wasting time. We believethis approach is useful both in startups trying to develop their initialproduct and in established companies improving existing products. Afterall, a great PM needs to help the customer be awesome, and you want tofocus your time on building things they need!With this in mind, how do you create the best possible hypothesis aboutwhat your customers want?What's Your Goal And How Do You Want to Achieve It?The very first thing to establish is your goal for this productdevelopment life cycle iteration. Is your company focused on acquiringnew users? Does it want to improve revenue? There's no silver bullet topick the right goal to focus on-if you've achieved a core set ofengaged customers who continuously use your product, perhaps your nextgoal will be revenue, followed by growth. Your main priority is to picka specific goal. What you pick to work on next will be in service ofthis goal, and this is the core of how PMs strategically choose what towork on next.Next, you need to think about how to achieve that high-level goal withan actual product. How do you want to achieve that goal at a high level?Do you want to iterate on an existing product, finding ways to improveit? Do you want to build something completely new-a blue-skyopportunity, also sometimes called blue water or ocean? In making thisdecision you can focus your thinking so that you can determine thedetails about what to build to achieve your goal.Let's look at iteration first. Start by translating your higher-levelbusiness goal into a product goal, then focus on what changes we canmake to a product to help meet that goal. For example, the company mightwant improved customer satisfaction, which could translate into "gettingcustomers to read more articles" because that's a sign customers likethe content.Another example of using iteration to achieve a goal is when Facebookchanged the Like button to have different types of reactions, such aslove, sadness, and anger. Facebook's goal might have been to get moreengagement, and the Facebook PMs implicitly knew they wanted to improvethe core product rather than build something new. They decided toprovide users with more post-feedback reactions-liking a post aboutsomeone's dog dying never seemed like the right reaction, and some usersprobably chose to post nothing rather than like the post. The sadreaction now provides an easy way to give the poster feedback, leadingto more engagement on posts.Iterations aren't just small changes, though. An iteration might be acomplete overhaul or rewrite of the app or a feature, like when Gmailredid its "Compose" interface or when Apple switched from skeuomorphismto flat design in iOS 7. The key definition of an iterative change isthat you're taking an existing product and making it better.Iteration is incredibly important, as the first version of a product isnever perfect for all customers, and it's through iteration that aproduct evolves to become something customers love. If you don't haveproduct/market fit yet, we'd recommend focusing on achieving it beforetrying to focus on revenue or growth goals. What is also nice aboutiteration is that you already have information about how the customersare using the product, and your hypothesis about what to do next mightcome from quantitative sources (like how many users complain about abug), or qualitative sources (like ideas the support team has).The downside to iteration is that you can get stuck finding the "localmaxima." This means that you've optimized something really well, but youfocused so much on optimization that you missed a bigger shift thathappened. Think about Blockbuster Video. Blockbuster could've spent lotsof time iterating and come up with the ideal balance of price and rentaldays/late fees. It might have also iterated on the overall storeexperience, aiming to optimize number of rentals per customer, and comeup with an in-store recommendation tool to optimize customersatisfaction, ensuring that every customer walked out with a movie.However, it still would've gone out of business because it missed theglobal change where customers switched to streaming video. This is whereblue-sky thinking comes into play.A blue-sky opportunity is something totally new. The biggest blue-skyexamples occur when you believe the market/world is changing in acertain way, and you need to make a big transformation to address a needthat might not exist yet but you believe will exist in the future. Whilemaybe you could make changes to your existing product to address thisopportunity, this new opportunity is different enough that it's bestaddressed by building something new, designing from the ground up totake advantage of that opportunity. Blue-sky opportunities also arisewhen you see a new opportunity to expand your business into areas itdoesn't serve right now because you believe those areas will have futurevalue.To put it simply, blue-sky opportunities are about skating to where thepuck will be, not where it is now. Sometimes blue-sky opportunitiesarise by thinking more broadly or reframing how you're approaching aproblem: Blockbuster saw its business as "video stores" and was lockedinto handing customers tapes and DVDs. Netflix focused on "contentdelivery," and it didn't matter if that content came from the mail orstreaming video. By thinking about how to let customers watch movies andTV shows in a different way, Netflix saw a means to exceed Blockbuster'slocal maxima and find a new global maxima.Another example of reframing to find a blue-sky opportunity is thelife-insurance company MetLife. The company made an app, Infinity, tocreate your digital legacy by curating your memories. Digital legaciesare becoming far more of an issue than they were even 10 years ago. Yourlife-insurance company is the one business that knows for sure if you'realive, so who better to trust with the key to passing on your photos,documents, and more when you die?Sometimes, new technology and trends, like cloud computing, change howwe solve problems, creating new opportunities. Looking at photomanagement; we've moved from physical albums to digital tools such asiPhoto. But even after iPhoto had been out for about 15 years-aneternity for technology-Apple decided the future of photo managementwas in the cloud. Rather than try to make iPhoto capable of managing acloud-based photo library, Apple deprecated iPhoto in favor of anentirely new product, Photos. Unlike iPhoto, Photos was built from theground up for iOS, since most people take their photos with a smartphonerather than a digital camera.Another example of new technology creating blue-sky opportunities iswhen Facebook, recognizing the potential of virtual reality (VR), spent$2 billion to purchase Oculus, believing that the future value ofOculus' VR and its metaverse, to connect everyone together, would behuge and more than justify that price.The downside to blue-sky thinking is the potential risk. Blue-skythinking always requires a guess-even if it's a well-educatedone-about what is going to happen, and developing blue-sky productstakes resources away from iterating on existing products with realcustomers. New products almost always lose money at first because inaddition to taking resources to develop, you must convince customers touse this new tool, causing key metrics will be lower at first.This risk factor is where the "innovator's dilemma" comes from. It'shard for incumbent companies to justify trying to build the next bigthing when they could be spending their money growing their currentproduct, finding the local maxima. This leads companies to focus toomuch on their short-term goals, missing larger opportunities because ofthe short-term drop in profits that would result. After all, theircurrent business is doing well: why change? For this reason, privatestartups that can find a new opportunity stand a chance of disrupting anincumbent-did anyone expect taxis to be as disrupted as they have beenby the smartphone-app-based business model and the sharing economy?Of course, big companies don't want to be disrupted, so they're alsooften trying to find blue-sky opportunities. Alphabet is a great exampleof how a big company can address the innovator's dilemma-most ofAlphabet's revenue comes from Google search ads. If the company just sataround, optimizing that revenue, it'd have a few really great years. ButAlphabet knows that business model won't last forever, and it wouldrather find the next big thing before someone else does. Alphabet isconstantly trying to come up with the next big thing, and some of itswork-such as self-driving cars-looks promising but hasn't paid offyet, whereas other investments didn't work out as well as Alphabethoped-like buying Boston Dynamics. Unfortunately, if you followAlphabet stock, you'll see that investors don't like all theseexperimental bets-they want to see choices that give immediatereturns.If you have an existing product, it's totally reasonable if your firstopportunity hypothesis focuses on iteration rather than blue-skyimprovements. But as you work to validate your hypothesis, you mightrealize the best way to achieve your goals and address your customers'needs is by building something new.Thus far, you should have established a high-level company goal,translated that goal to a product goal with key success metrics(why you're making this change), andthought about if you want to accomplish your goal by changing yourexisting product or building something new (how you're going to accomplish your goal). Now let'slook at how we come up with whatspecifically we can do to accomplish our goal.Quantitatively Finding an Opportunity HypothesisThere are two major ways to determine what we want to do to achieve ourgoal: qualitative reasoning, and quantitative reasoning. Quantitativereasoning involves looking at data,interpreting it, and using that analysis to determine what to do next.Qualitative reasoning involves moreabstract concepts like looking at your overall product vision or yourintuition based on your knowledge of your customers in determining thenext step to take. We'll look at quantitative reasoning first becauseit's the most common way PMs determine what to build next.Quantitative sources are important because they allow us to collect dataon how people actually use our product, to use that data to findinsights, and then to apply those insights to determine what to do next.For example, perhaps Lyft wants to increase customer retention bygetting people to use Lyft instead of Uber. We can turn that into aspecific product goal by focusing on how to decrease the number of ridescancelled-fewer cancellations means more passengers served and happierdrivers, which means more payment. This will also come by tweaking thecurrent product, rather than building something new. When you cancel aride in Lyft, you need to specify a reason. A PM at Lyft could look atthe responses and come up with ideas about how to mitigate thosereasons. Maybe he notices that midday the number of people cancellingtheir rides due to wait times skyrockets compared to the morning orevening. As a result, perhaps he'd find ways to incentivize drivers tobe on the road midday, decreasing wait times, decreasing cancellations,and ultimately keeping customers in a Lyft rather than an Uber.Quantitative sources are also nice because, after we've come up with andimplemented our idea, we can compare the data before and after thechange, and determine if it was successful. Our Lyft PM would comparethe percentage of rides being cancelled and the reasons why to see ifhis change decreased the number of cancellations.It's worth noting that quantitative sources are useful for bothiterative and blue-sky opportunities, as are qualitative sources. Dataon how customers use your current product might yield ways you caniterate the current product, or they could point out a trend thatreveals an opportunity for a blue-sky project.Metrics and AnalyticsHow do you know what to do if you don't know what your customers aredoing? As we've discussed before, metrics are measurements of differenttasks users do within your product. Metrics are the most common sourceof quantitative data about your product and your customers.Metrics take many forms, from "How many people do you swipe right orleft on per session in this app?" to "How many people who came to yoursite via a specific affiliate's link completed a purchase?" In Chapters1 and 2 we talked about success metrics, which are the key indicators ofif you're achieving your goals and if your customers are winning. Whenworking with metrics, start by asking yourself if you're happy withwhere your success metric is-is it at the right level to effectivelyachieve your product goal, and if not, how can you improve this successmetric?Not every metric is a success metric. For example, our key successmetric might be how many people complete a purchase, but we'll alsomeasure how many people add items to a cart and how many people tap thecheckout button.Put together, these metrics give us a sense of what's going oncomprehensively with the product. If lots of people tap the checkoutbutton but very few actually complete a purchase, then we might have anopportunity to improve the checkout workflow so that more peoplecomplete a purchase. Workflows are often called funnels, and are great sources of opportunityhypotheses-we'll cover them shortly.We call the process of gathering and analyzing these metricscollectively analytics. Analytics letyou understand the state of your product, giving you a much better ideaabout what your customers are doing and how your product's working forthem. Analytics make metrics useful by giving them context, allowing youto discover insights about what to do next.Think about metrics as individual data points, such as a car's position,how fast it's traveling, the number of passengers, etc. In addition toseeing a success metric, like "the user turned the car off after drivingfor a while," analytics put those data points together to help yourealize the family's taking their weekly drive to Grandma's house.Analytics also let you see if the family made it to Grandma's or if theyran out of gas. If the family constantly runs out of gas beforeachieving their goal of getting to Grandma's, you as a PM will look forways to help them not run out of gas. OK, this metaphor's run out ofgas. Let's move on.Analytics and metrics are useful for several reasons. The first is thatpeople often aren't aware of exactly what they do, and numerous studieshave shown that self-reporting usage is unreliable. Automaticallyrecording their actions lets us see what people are really doing withour product and how they got there.If your product is very large, analytics can reveal a problem on onespecific section that you might not find manually. Imagine if you were aPM at Amazon, and you wanted to watch how many people bought eachproduct. If people stop buying various products, that's a warning youshould look at the product to see what's up. If you asked everyone whatthey bought, you'd have an impossible task because of the customervolume. If you randomly surveyed people, you'd likely miss many nicheproducts. Automated analytics, however, could easily find a productwhere the number purchased suddenly dropped from an average of five perday to zero.Finally, when you look at analytics over time, you can get a gauge forwhere you're going. Perhaps your growth rate has leveled off. If you'reunhappy with your trajectory, you'll dig into the component metrics tofind the problem, and determining a way to address that problem willform your opportunity hypothesis. Again, after you've implemented thesolution, you can re-evaluate these metrics to see if your strategyworked.There are many analytics tools, with Google Analytics (Figure 3-1) andMixpanel being two of the most popular for web and mobile apps. Addingthese tools to your product is fairly straightforward and just requiresa bit of tracking code and annotations so that you can track specificthings, such as how many times a user clicks Play on a video. Physicalproducts often require completely different analytics techniques, but asmore physical products become connected, it's possible to collectsimilar usage data.It's worth noting that analytics data isn't always perfect, and thoseimperfections can skew your analysis. If your app supports multipleplatforms, the event might accidentally be tagged as "eventA" on Androidand "event A" on iOS. This means you won't see the total times Event Ahappens unless you notice the problem and account for it.Other times, there are inherent issues in your analytics tools. GoogleAnalytics only samples a subset of your traffic for its reports, but forhigh-traffic websites that sample might not accurately represent yourreal data. If the data doesn't correctly represent what your customersare doing, you might make the wrong decisions.Let's dig into how to use analytics to look at specific metrics and findopportunities.Breaking Down AnalyticsThe first part of analytics is to make sure we're capturing the rightmetrics. Identify the key success metric supporting your goal and themetrics that support that goal. If your success metric is how engagedyour customers are, you should track how often they complete the core"success" action and the steps that lead to it. If the right metricsaren't there, then your first task for this iteration of theproduct-development life cycle is to implement analytics for thosemetrics.One common problem when you inherit an existing project is that aprevious, well-meaning PM has been recording every single possiblemetric. This leads to data overload, and it can be very hard to sort outthe useful metrics from the irrelevant ones. If you find yourself inthat situation, we recommend doing an analytics audit and reassessingwhat data points you're recording-removing the irrelevantones-before using the data to make decisions.The next part is how we group metrics together so that we can spottrends and opportunities. There are three key ways: segmentation, cohortanalysis, and funnels.Analytics track every customer equally and report the average behavior.For example, a new customer will use an app's first-use tutorial-somemight skip it-but a returning customer won't even see the first-usetutorial. If you simply looked at how often a customer views thetutorial out of how many times people use the app, it'd look like veryfew people use the tutorial overall. It's up to you to segment your data, which means grouping it by commoncharacteristics.Analytics tools often provide multiple ways to segment data. Commonchoices range from technical grouping (OS, browser, etc.) to behavioral(new/returning user) to demographics (country/language are common).After segmenting data, we can look at each metric, focusing on our keysuccess metric and the supporting metrics, and see if it's in line withour baseline expectation. If it's not, we'll flag this as a metric tofocus on.You might find something surprising for a metric unrelated to whatyou're working on right now. Feel free to note it for later, but don'tworry about it initially. There are lots of metrics for a product, andPMs can always find surprises. We're focused on a specific successmetric and the supporting metrics that lead to that success metric.Another way of grouping data is cohort analysis. This is very similar to segmentation, but it uses apoint in time as a key characteristic of the group and is often used tolook at behavior over time. For example, imagine your product's featuredon TV's Shark Tank-Dragon's Den in the UK-where hopeful entrepreneurs pitch theiridea to investors. You might want to compare how users who signed upbefore Shark Tank aired use the productcompared to people who sign up later. And you'd also ask how thosecohorts' usage compares after two months, after six months, etc. Or,more practically, what's customer engagement like over time withcustomers from before you created the first-use tutorial compared tocustomers who signed up after you implemented the tutorial? If you see asubstantial difference in behavior at a certain point, flag that metric.The last common method of grouping data is a funnel. This is when you measure key steps along auser's journey towards some task and group them together, in journeyorder. Typically a lot of people complete the first step and far fewercomplete the last; e.g., many people might go to an Amazon product page,a smaller number click Add to Cart, and a smaller number still completethe checkout. "Leakage" is when a customer stops moving forward in thefunnel.Nearly any sequential-action group of metrics (workflow) can form afunnel, and your goal is always to look at how a user goes frominitiating to completing an action. Not every customer enters yourproduct the same way (e.g., tapping an app on the home screen to open itthe first time, opening the app for the tenth time with a restoredstate, tapping a link that opens the app, etc.). Your analytics toollikely has a behavior flow report to see how users enter the funnel andwhere they go. Any place there's a substantial undesired falloff is apotential opportunity, and you should flag that particular metric.Dave McClure, the well-known venture capitalist who founded 500Startups, put together a talk called "Startup Metrics for Pirates,"where he came up with a general approach to metrics for an entireproduct, called AARRR metrics-although he put it together forstartups, where the success of a company depends on one product, it'suseful for any product. The acronym stands for the following:- Acquisition: How the user comes to your product.- Activation: The user's first visit to your product and her first happy experience.- Retention: The user liked your product enough to use it again (and hopefully again and again...).- Referral: The user likes it enough to tell someone about it.- Revenue: The user finds your product valuable enough that she pays for it.McClure suggests breaking down the key behavioral steps for your productinto these buckets (each bucket might have more than one metric withinit) and using this funnel to see how users go from discovering yourproduct to being willing to pay. Each large dip is a potentialopportunity and a metric to flag, and the ones towards the top of thefunnel are the ones to address first.Note that the part(s) of the funnel you focus on will depend on yourcompany and product goals. If your current goal is growth, you'd focuson the activation step rather than the revenue step.It's also important to note that not every dip in a funnel is bad. Forexample, the Nigerian spam emails asking you to provide your bankaccount to a prince (or something similar) have only a 0.1%click-through rate-meaning only 0.1% of the people who receive itclick the Send Money link. But this turns out to be an excellent filterfor gullible customers, as 70% of the people who click the link actuallysend money. If they optimized the click-through rate and 90% of peopleclicked the link, it's more likely that the site would be reported ortaken down, and the spammer would make less money overall.It's also reasonable to combine segmentation and cohort analysis andfunnels. For example, you might want to look at a funnel with cohortanalysis if your product were featured on Shark Tank. You could track how many people went fromclicking the checkout button to completing the purchase before you wenton Shark Tank, compared to how manypeople complete the checkout funnel after you were on TV.Ultimately, no matter how you look at your analytics, your goal is tofind a metric you believe is worth improving in order to achieve yourproduct and company goals.Turning Metrics into Opportunities by Asking WhyThe challenge with quantitative sources like metrics is that they tellyou what is happening but not why. Once you've identified a metric-ortwo-that you want to improve, how do you figure out what to do? Thereare a few ways to figure out what you should do, and one of the easiestis by asking "why." Specifically, ask yourself why you think the metricisn't where you want it to be. And if the answer isn't a hypothesis thatyou can test somehow, continue to ask yourself why until you get to aspecific hypothesis. Your goal is to get to the core problem, the rootof the deeper issue. You want to solve problems, not address symptoms.Asking why can help you find that core problem, leading you to thepotential opportunity to focus on validating.Here are a few ideas to help you. First, many people only focus on theend result of the funnel. They might say, "Not enough customers completea purchase." If this is the case, ask yourself why. Look back up throughthe funnel and see where the leakage occurs. Then, ask why it'soccurring there. You might need to go to that particular part of theproduct to see what might be blocking a user.Segmenting your audience and focusing in on how each segment behaves canlead to a better hypothesis. For example, perhaps your site's conversionrate looks low overall, but when you segment it by browser, you see theconversion rate for Safari customers is much higher than for Chromecustomers. Given there are more Chrome customers than Safari ones, theoverall average conversion rate appears low. As you ask yourself why andtry using the site in Chrome yourself, maybe you'll find a bug where aJavaScript error appears when you click Checkout in Chrome. Youropportunity hypothesis is that fixing this bug will improve acquisitionfor the shopping cart page, and eventually increase revenue.Here are a few common, interesting opportunities you'll find for mobileand web apps in metrics:- A low time on a screen and a high bounce rate-people who leave after viewing this content-on a page that's supposed to be important likely indicates a mismatch between expectations and reality. The content wasn't what the customers expected, so they left.- A long time on a screen and a high bounce rate could be fine if the page is a long article, but if it's a page with very little content but lots of links, it could indicate the screen is unclear.- A high number of screen views could indicate that this part of the app is important, therefore you need to optimize it well.- A low number of views could mean this section is hard to find.Intercom's Feature AuditA company called Intercom, which makes tools to let product owners seewho's using their product and communicate with them, has put together anumber of great resources on its blog, Inside Intercom, atblog.intercom.io. One of the techniquesIntercom shares is a way to look at your metrics and spot opportunities,called a feature audit.In a feature audit, you start by creating a graph of how many people use a feature on the x-axis vs. howoften they use it (See Table 3-1). Whendoing this, make sure to exclude "administrative" features such aspassword recovery, as they'll skew the result. The core value of yourproduct, the reason it exists and people buy it, should be at the topright (Feature C) because everyone should use it all the time.There are four sources of opportunity:1. Features on the top left of the graph are poorly adopted (Feature A in Table 3-1): very few people use them a lot. Sometimes that's OK-for example, if it's a niche feature for one key customer in an enterprise product that only that company uses-but often, you'll want to improve adoption of these features.2. The second source is a feature that all the people use occasionally (Feature D): is it something you want people to use more often?3. The third is that perhaps you should kill a feature if it's something in the bottom left that very few people use, and then only infrequently (Feature E).4. Last, you might choose to improve a key feature that many people use frequently (Features B & C).This view also shows a possible warning sign: if your product has onlyone feature that people use frequently, you're easily replaceable intheir workflow. Ideally you'll have a few key features that people usefrequently so that you're not a throwaway product when something betterin one area comes along.If there's an important feature you believe is for all customers butonly some customers use, you'll want to improve its adoption. To do so,focus on asking why, just like we discussed before. Note that you wantto be very explicit-don't just say, "customers don't see its value."Keep asking why until you get to the root cause. Why don't they see itsvalue? The feature doesn't save them time. Why doesn't it save themtime? There are too many steps to use the feature. Why are there toomany steps? Eventually, you'll come up with a list of issues preventingcustomers from adopting the feature (e.g., time saving might be only oneof many reasons a customer doesn't see a feature's value). Once you'vedone this you can focus on resolving those issues. Not all opportunitieswill be code changes, either. It's possible different marketing ordesign will help adoption.If there's a feature that many customers use infrequently but you thinkwould be beneficial if they used it more, it's possible users aren'tclear how it works, which you can check via a funnel. You can also checkthe value, with the help of Marketing. To motivate users to use it more,you can use the Hook Canvas, by Nir Eyal, author of Hooked, to help create habits in your software.Seen in Figure 3-2, the Hook Canvas has four elements. First is thetrigger-what happens to get the user to the product? Second-what'sthe absolute simplest thing you can get a customer to do that will givethem the reward? Third-what reward can you provide that's fulfillingand makes the user want more and invest in the product? Last, what tinybit of action can you get the customer to invest in doing that will leadto more triggers and get them to return?If you've heard of gamification, whichinvolves adding gaming mechanisms to non-game products, you've seen theHook Canvas in action. You might get an email from an airline sayingyou'll get bonus points if you sign up for a credit card. You fill outthe simplest form the airline can give you, and-assuming you'reapproved-you get enough points for a free domestic trip. That makesyou want to earn more points to get more free trips.Eyal uses Pinterest as an example in Figure 3-3.Another way of gathering data to find opportunities is by sending outsurveys, trying to gauge user satisfaction with different parts of yourproduct amongst statistically significant parts of your user base. InChapter 2 we discussed the most common high-level approach todetermining satisfaction, a Net Promoter Score (NPS). Again, it's simplythe question, "on a scale of 1--10, how likely is it that you wouldrecommend to a friend or colleague?" Higher scores meancustomers are happy and lower scores mean they're likely to be neutralor tell people not to buy your product.It's good to dive in beyond a general NPS and ask how satisfiedcustomers are with specific parts of your product. If they're less thana 10, have an open-ended question for feedback about how the productisn't meeting their needs and expectations. As you make changes to theproduct, you can resurvey to see how satisfaction changes over time.Some products now are integrating this satisfaction survey into theproduct. For example, random Twitter customers will see a tweet in theirtimeline saying they've been selected for a survey, and tools likeIntercom can be easily integratedand allow customers to provide feedback continuously.Surveys can be used to gather more specific data, and we'll covercrafting good ones in more depth in Chapter 4, when we look at how touse them to validate our hypothesis.Obviously, if a customer isn't satisfied and tells you why, that's apotential source of an opportunity hypothesis. But there are other waysto use survey data to find an opportunity, especially creating animportance vs. satisfaction graph.Internally, you should have a sense of how important each feature is tothe product. The features that are core to the product and used mostoften are likely the most important. For each feature, if you create agraph (See Figure 3-4) with customer satisfaction on the y-axis,increasing feature importance on the x-axis, and an y=x line, you'lleasily spot opportunities. An important feature that has lowsatisfaction will appear below the line, and it should be your firstpriority to improve.Generally, you'll trade off importance vs. how unsatisfied customersare, so you might work on something that's fairly important with verylow satisfaction (Feature A in Figure 3-4) before focusing on a featurethat's very important with moderate satisfaction (Feature B). Also, it'sfine if less important features have lower overall satisfaction; they'renot critical to the product. Should those features become moreimportant, then you should focus on improving them so that the usersatisfaction stays above the x=y line.What About Customer Interviews?It's possible that while you're talking to customers, for example, whileuser testing another feature, they might say something that sparks anidea in your mind. However, we believe that customer interviews shouldnot be the source of your first opportunity hypothesis. If you startcustomer interviews without even a vague sense of what you're looking tolearn, the interviews will be unfocused and not useful, and you'reunlikely to find a good hypothesis.Instead, we believe you should start with an opportunity hypothesis,even if it's vague, and then do customer interviews to validate it. It'spossible that while doing those interviews, you'll come up with a newhypothesis, and that's fine.Qualitatively Finding an Educated Opportunity HypothesisNot every opportunity arises from something that can be quantified andmeasured. As Henry Ford supposedly said, "If I had asked people whatthey wanted, they would've said a faster horse." Someone else once saidthat "data-driven optimization taken to its extreme just leads to porn."You can pull from a wide range of qualitative sources to findopportunities. The biggest challenge is that these will take more workto validate than quantitatively found opportunities, as they don't comedirectly from data: you'll have to find data to support them.Known Bugs and SugsThe simplest qualitative iterative opportunity (which is also arguablyquantitative) to look for is how a bug might be blocking customers fromsucceeding. For example, if you're trying to improve revenue and the QAteam discovers that when customers in Europe try to pay, your appcrashes while handling the US-dollar-to-euro rate conversion, then thenext thing you might choose to work on is fixing that crashing bug.The main way you'll validate a bug-related opportunity hypothesis is bylooking for data about how big of an issue the bug is-i.e., how oftendoes it occur and what impact does it have on the success metric? Maybethat conversion bug hasn't been reported by any actual users, and it'sreally something in the QA team's setup causing it. Or, if only a tinyportion of your customers are in Europe, then there are likely otherways to improve revenue you should focus on first.It might seem silly to explicitly list bugs as an opportunity toexplore-if you're an engineer, you'd likely prefer to have nobugs-but one of a PM's challenges is to weigh the overall value offixing a bug against that of not fixing the bug and doing something elseinstead. Quality's always important, but not every bug is a high enoughpriority to go fix immediately.Similarly, there might be existing "sugs" or feature requests in yourbacklog, which become the basis for your hypothesis. These might havecome from a variety of places, ranging from random ideas people have hadto data-driven sources like customer support tickets and insights fromusability studies- i.e., studies where you test how real customersinteract with the existing product/feature and note what they do welland what stumbling blocks they encounter.Related to this is paying off "technical debt." Sometimes engineeringhas to make internal changes that essentially "do the dishes" in thecode. It's important to periodically prioritize this engineering workbecause if you don't, it will become harder and harder to implement newfeatures down the road. Unfortunately, when you work on these projects,from a customer perspective nothing changes. To validate thisopportunity, you'll want to make sure that this is a good time to workon an internal cleanup rather than to deliver something new tocustomers, and that this internal cleanup will provide value to yourteam down the road, such as making it easier to implement anotheropportunity on the roadmap.IntuitionHow many times have you heard someone say, "I've got an idea for an app!Do you know anyone who can build it for me?" Sometimes there are goodideas, like being able to use an app to easily hail a car at anattractive price. Other times someone wants to build an app to helpmatch their socks to their trousers. Clearly, no one has good ideas allthe time, not even Steve Jobs-remember the iPod Sock?A common source of opportunity hypotheses is existing hypotheses you oryour company might already have based on your experience/priorknowledge. This is a great place to start because you likely do have astrong idea of what to build for your customers from your experience,but it's also potentially dangerous because this type of hypothesisoften doesn't get validated properly. Many times, people are afraid ofsomeone stealing their idea-which rarely actually happens-or theyjust don't want to find out that no one actually wants their idea.Unfortunately, the second step for many first-time product buildersisn't to validate their idea but rather to jump immediately intobuilding it. People like to assume that if they have a problem, manyother people do too, and these people will want their solution. This isrisky because it might be very costly to build the product, and no oneknows for sure if anyone else experiences this same problem or isinterested in the same solution as they are.The best way to come up with an idea on your own is not to think aboutwhat you the individual want but to really empathize with your targetpersonas, combining your knowledge of your customers' pain points withyour knowledge of what you could build and the overall goals and successmetrics that matter to the product and the company. As a PM, you're in aunique position to know what the major pain points for customers are,how they're reacting to your product, what the technical issues are withyour product, and what technical innovations have occurred within yourengineering team. We'll show you a tool, shortly, called the BusinessModel Canvas, to make the synthesis of this idea more concrete. A greatPM will also be paying attention to the broader tech world, thinkingabout how innovations elsewhere might apply to his product andcustomers.Here's a simple example of an intuition-derived hypothesis for Moover.They want to make booking a move as easy as calling an Uber, so thatmeans making it simple for moving companies to provide accurateestimates. Photos could help moving companies make accurate estimates,but people likely don't know how to take useful photos to show a spacefor moving companies. What if they added a feature where we had thecustomer stand in the middle of each room, slowly moving their cameraup/down as the customer spun around, generating a 360° photo on screen?That way every customer takes a good photo of the space in question.We can hypothesize that the result will make it easier for movingcompanies to give an accurate estimate. The next step would be tovalidate that photos, especially 360° ones, make it substantially easierfor moving companies to make accurate estimates. This could be done byusing an existing 360° app to take photos of a space and send both themand regular photos of a space to various moving companies, asking fortheir feedback.VisionYou, your boss, your company, etc., likely have an overall vision foryour products and the company that you want to achieve on a longer timehorizon. Specifically, it's an image of the future version of thecompany you're trying to create. For Walt Disney, this meant looking atsome land in Florida and having a vision of Disney World, knowing thateverything he wanted to do next would be about building Cinderella'scastle. For you, maybe you want to migrate from a locallydeployed-at-clients solution to a cloud-based one. You'll need to takesteps along the way to achieve this long-term vision, and you mightchoose to make one of these steps your next opportunity. As an aside,hopefully someone has done some validation on the overall vision!The challenge with these opportunities is assessing whether you canprovide an immediate value to customers or if it's delayedgratification. If you believe this opportunity will have an immediatebenefit, validate it like any other opportunity. But if it's somethingthat will take longer for customers to benefit from, you might only dosome internal validation to ensure it makes sense to work on thisproject right now since it takes resources away from other projects.Team IdeasOne of a PM's biggest challenges is a soft skill, soft power. No onereports to a PM: you can't tell people what to do. Instead you need toearn people's trust, and a great way to do that is to look at building aproduct as a team sport and not departments working in silos. No, it'snot a democracy, and at the end of the day you'll often be the onemaking calls about a product. But if other people know you listened toand acted upon their input, they'll feel included in the decision-makingprocess and happier with your decisions.A great place to include other teams is in this ideation step. There arelikely other teams that work closely with the customers, such as Design,Customer Support, Business Development, and Sales. Reach out to peopleon those teams and see what thoughts they've had based on theirexperience with customers and the product. Support teams especiallyappreciate this, as they spend all day working with actual customers,and they have great visibility into what the customers are doing withthe product and saying about it. They often can provide data likesupport tickets to back up their ideas.Beyond talking directly with other teams, you can organize a groupbrainstorming session. There are pros and cons to these sessions. A bigpro is that many people feel included, and one idea might inspiresomeone else to build upon it with a different idea. For example, thesales team might make one feature request that they think would help theproduct sell better, and the support team might mention there are a lotof tickets around that entire feature set, so perhaps it should becompletely redone.A big downside to group brainstorming is that people often fixate on afew ideas or ways of thinking, missing other opportunities. As the groupfacilitator, you need to help get the creative juices flowing. One wayto do that is to have everyone share the worst ideas they can think of,then figure out ways to make those ideas even worse. After you've donethat, flip over and focus on how to make the product better.Make sure to keep these sessions at least a little focused by listingyour current product goals and success metrics. If you want tobrainstorm ideas to increase engagement, for example, you're not goingto want to talk about putting more ads in the product.R&DRelated to teamwork, sometimes there are new inventions that a brilliantengineer, or team of engineers, creates. What's nice about theseinventions is that there's usually a prototype of some form so that youcan see it in action. Adding these inventions to the product-calledproductizing-is often how productsare pushed into the next generation, and they can be a major source ofcustomer delight because the customer didn't expect or ask for them.However, it can often be a rocky road from prototype to product, and theinitial product might have significant tradeoffs or limitations. If youchoose to pursue an opportunity like this, make sure to work closelywith Engineering to understand all the challenges you'll need to solveto make this prototype useful to customers in their daily lives.The CompetitionStravinsky, Faulkner, Picasso...regardless of who said it, you mighthave heard the quote, "Good artists copy. Great artists steal."Sometimes your competition has a great idea, and stealing it-andmaking it better-is your opportunity.Be careful with this source. "Because the other guy did it" is never avalid reason alone to create a feature-that's just copying. First ofall, how do you know the competition is smart, and isn't making amistake with this feature? You'll also want to make sure thisfeature/product fits within your company's context. Furthermore, youwant to think about where the puck's going to be, rather than where itis right now. If you're always stealing, you'll never be ahead. But thebenefit to this source is that you can see how the feature works in reallife, how customers react to it, and what you'd like to do differently.Here's a simple example: For years, many PC manufacturers madestripped-down, slow, small-keyboard, low-cost "netbooks," and manyanalysts kept calling for Apple to make one. Yet Apple prefershigh-quality, high-margin products, and instead of doing what everyoneelse was doing and what analysts thought Apple should do, it created theMacBook Air (which was incredibly small yet had a full-sized keyboard)and eventually the iPad. Both leveraged Apple's strengths, both wereloved by customers, and both had the margins Apple aims to keep. As ofwriting, netbooks are dead, and many PC manufacturers have created theirown MacBook Air and iPad knockoffs.Business Model and Value Proposition CanvasesAnother way to create an opportunity hypothesis is to explicitly analyzehow a product fits into a business and how the product provides valuefor the customer. Alexander Osterwalder and Yves Pigneur created twotools to help you determine those elements, the Business Model Canvas,and the newer Value Proposition Canvas, respectively. They also have twobooks, with the same titles as the tools themselves, that do a great jobexplaining these tools in more depth than we cover. Using these tools tolook at your product, you might see a missing link that lets you thinkup an opportunity.Business Model CanvasThe Business Model Canvas provides a way to look at all aspects of yourcompany with a different framing than we showed in Chapter 2. It's veryfocused on people, values, and revenue, and filling it out requires youto list facts and hypotheses (e.g., "We believe these people will bedistribution partners"). This tool was originally developed for astartup with one product, but it works for a product within a largecompany, too. Figure 3-5 shows this canvas, and you can find a versionto print and fill out atHere's what each block covers:Key partners: Who are the people outside thecompany, from suppliers to contractors, who make the business modelwork? What key resources do we get from them and what key activities dothey perform? Companies rarely do everythingthemselves, and working with partners lets you reduce risk and optimizeyour activities. There are generally three types of partnerships:alliances between non-competitors, strategic partnerships betweencompetitors, and joint ventures to build something new.Key activities: What are the tasks acompany must do well to deliver on its value? For example, Apple owns a number of keyactivities: software development, supply-chain management, storemanagement/distribution, and more. Samsung's phone unit is focused moreon supply-chain management and software development.Key resources: What are the mostimportant physical, financial, intellectual (patents, copyrights, etc.),or human resources the company needs to succeed? They can be owned or leased. For many companiesmaking hardware, human and intellectual resources are key, whereasmanufacturing is outsourced to an Asian partner.Value propositions: What's thebenefit/value that a certain group of your products or services providesfor a given persona? What customer pain points are you solving? The Value Proposition Canvas will dig into thismore, too.Customer relationships: What type ofrelationship, from personal to automated, do you want to establish witheach persona? For example, a high-valuecustomer might have a direct email for an account manager whereas theaverage customer might only have online support forums available. Alsoconsider what each segment expects, what you have now, how costly eachrelationship is, and how you expect to maintain each relationship.Channels: How does the company reacheach persona to deliver the value, including marketing, communication,distribution, sales, and support? How are you reaching them now? Whatworks best? How are the channelsintegrated, for example, are sales only via your website?Customer segments: Who are the key personas the company/product willserve? These are the most importantpersonas that you believe you'll create the most value for, and they'rewho you want to prioritize opportunities for. The Value PropositionCanvas will dive into this more.Cost structure: Where do your costs comefrom? This breaks down into fixed costs(salaries, rents, utilities) and variable costs (equipment purchases).For many companies, human resources are the greatest expense becausepeople are needed to do key activities so that the businesses candeliver your value to their personas.Revenue streams: This represents thecompany's incoming cash-revenue minus costs is the company's earnings.A company might have multiple revenue streams, depending on its customersegments, and asking what value you deliver that each customer segmentwill pay for, what they currently pay, and how they'd prefer topay-e.g., lower recurring fee vs. higher one-time fee-helps youdetermine how to monetize each segment. For example, some companiesoffer discounted "Home" editions of their products, which lack featuresthat matter at work such as document collaboration that aren't useful inan average household. The "Home" edition is one revenue stream and theregular version is another.The Business Model Canvas is great because it lets us write down all ofour hypotheses, from opportunity to distribution, in one place. Usingthe Business Model Canvas alone, it takes some deep thought to find agreat opportunity hypothesis. Fortunately, the Canvas's authors havedeveloped a newer tool, the Value Proposition Canvas (Figure 3-6), alsoavailable at, which drills down intothe Value Propositions and Customer Segments blocks to really identifyhow the product is or isn't providing value to the customers, and whatthe customers' needs are.The goal of the Value Proposition Canvas is to help you achieveproduct/market fit. This phrase simply means that "a good number ofcustomers want what you're selling." This concept is especiallyimportant to startups building their initial product, as startups needto find customers as soon as possible. If they fail to find customers,they either need to pivot the business to focus on new customers,possibly even with a new product, or they need to close the business.This also applies to new features in existing products. After all, youwant to build a feature a good number of customers will use.The first part of the Value Proposition Canvas is diving into thecustomer-completing this part of the canvas can help you refine yourpersonas! There are three key aspects to the Customer side: jobs, gains,and pains.Customer jobs are simply the things the customers are trying to getdone, in their own words, be it a task they're trying to perform, aproblem they're trying to solve, or a need they want to satisfy. Forexample, an Apple Watch owner is likely interested in easily trackingher fitness-a task-and looking stylish-a need. Customers mighthave multiple jobs, and not all jobs have the same weight. If you everheard someone say, "Fashion over function," that person's choosing asocial job-looking trendy-over the actual task. Customer jobs alignnicely with product use cases.Gains are the outcomes the customer wants to achieve, in his own words.They might be expected, and either required or desired, or surprising,ideally in a positive way. Gains aren't just from functional utility:they might provide social value (This makes me look cool!), illicit positive emotions (I love thisproduct!), or save money (This is1/10th the price!). When talking withcustomers about the gains they want, make things as concrete aspossible. If the customer says, "It needs to be fast" find out what"fast" means. 1 second? 10 seconds? 10 minutes?Last, we have pains. These describe the obstacles preventing thecustomer from completing the jobs, along with possible bad outcomes andrisks. Just like gains, try to make these concrete. If the customer sayswaiting for a taxi is a waste, ask how many minutes it takes until itfeels like it's a waste. Also try to gauge how bad each pain actuallyis. Waiting 10 minutes for a taxi is a pain, but does it stop you fromtrying to hail a cab or getting in once it arrives?The second piece of the Value Proposition Canvas is your product(s), andit also has three aspects: products and services, gain creators, andpain relievers.Products and services are fairly straightforward: What are the productsand services available for each persona/customer segment?Gain creators refers to how your products and services create benefitsand outcomes the customer wants, whether those are required, desired, orsurprising. Again, these gains might be functional, problem solving, orsocial (including cost savings).Pain relievers are how your product addresses the customer's top pains.You don't have to address every pain, but it should be clear in theCanvas how your product addresses the key pains.Pain relievers and gain creators are the parts of your product thatcreate value for the customer segment. The goal of the Value PropositionCanvas is to make these two categories-to make this valuecreation-explicit. If it's unclear or a piece is missing, you likelyhave a great opportunity to improve your product.At the end of the day, product/market fit or feature/market fit comesdown to addressing the key customer gains and pains successfully. If thecustomer wants important gains that you don't provide or has a big painpoint you don't address, those mismatches create a very good opportunityfor you to improve your product.Also note that some products, especially B2B products, might havemultiple personas, so you will need multiple Value Proposition Canvases,one for each persona.As you work to validate your opportunity and learn more, redo yourBusiness Model and Value Proposition Canvases to incorporate the newinformation. You might even want to specifically call out what'svalidated and what's still a hypothesis.External FactorsWhile all of the ways to create an opportunity hypothesis so far give useducated, good hypotheses, sometimes there are external factors-shallwe say-that force an opportunity.The simplest and most understandable one is when a good businessopportunity arises. For example, maybe a partner offers a large contractif a certain feature is added to the product within a given timeframe.It's likely still up to the PM to make sure this feature's worthit-usually by measuring the cost of adding the feature vs. the valueof the contract-but this type of arrangement will often take priorityover the previous plans.Next, sometimes in regulated industries, regulations change and you haveto prioritize complying with those regulations or your product might bepulled from sale.The last qualitative method is also the most frustrating. It's when yourboss or someone above you says, "Just do this." A good leader will havea reasoning behind the demand or even be willing to change her mind ifyou provide proof it's an invalid opportunity, but not every leader isrational, and not all rational leads are able to explain their thinkingall the time. Sometimes you just have to prioritize what your bosswants, even if it's not the best opportunity.Using the Kano Model to Find OpportunitiesIn the 1980s, Professor Noriaki Kano created a framework to help teamsuncover and classify three categories of customer needs/attributes.Looking at where your product falls can help you uncover opportunitiesto work on next based on unaddressed or unspoken needs. Furthermore, ithelps you assess if investing in your opportunity will provide aworthwhile return, helping you transition into prioritizing youropportunities.The Kano model defines three principles that a product needs to achieveto be successful over time:1. Value attracts customers.2. Quality keeps customers and builds loyalty.3. Innovation differentiates your product from others and keeps you competitive.Then it maps these principles into feature categories.Basic features. These are the things customersexpect in a product, usually mapping to the value principle, andcustomers will be very unhappy if they are poorly executed or missing.Unfortunately, doing these really well won't make your users happy-itwill just minimize their unhappiness. If you press the gas pedal in yourcar all the way and the car barely moves, you'll be unhappy. If your caris missing the break pedal, you'll be very unhappy. If an app you haveto log in to is missing a password-recovery feature, you'll be veryunhappy when you need it. If you have the fastest, most nicely designedpassword-recovery feature of any app, your customers will not besignificantly happier than if you had a basic recovery feature. Basicfeatures can be hard to identify when talking with customers, ascustomers expect them to be there and won't explicitly mention them. Howoften do you look for "toilet paper included" when booking an Airbnb?Generally you find out about a lack of basic features from complaintsystems, lost-customer surveys, and attrition analysis.Performance features (satisfiers). These arethe things customers are often judging your app by and the things theylook for before purchasing. Your customer's satisfaction with thesefeatures will be proportional to how well you execute them. These arefairly easy to find information about by talking with customers, be itthrough interviews or surveys, because they're things a customer willoften explicitly ask for, compliment, or complain about. For example,faster performance in an app leads to greater satisfaction. Having fewersteps to achieve a goal also increases satisfaction.Excitement features (delighters). Theseare the unexpected "wow" features that become product differentiators,innovations, and unique selling points, such as the iPhone's capacitivetouch screen, Android's notification panel, or Wi-Fi on an airplanemidflight. When you do these well they create significant excitement anddelight. If they're missing, customers stay neutral: they don't knowwhat they're missing. These features are the hardest to discover andreally require an understanding of customer need. They're often foundonly qualitatively.These three feature categories are commonly graphed together (Figure3-7) to show how customer satisfaction compares to your level ofinvestment/execution. It's a useful way to help judge how much effortyou should spend on various features, along with evaluating what featurecategories are worth focusing on next.The Kano model provides away to consider how much satisfaction each feature provides compared towhat type of feature it is and how well it's executed.Over time, each feature moves "down" in its category. Excitementfeatures become performance features, and performance features becomebasic needs. The first time you had Wi-Fi on a flight, you were likelydelighted to check your email while flying. Now you likely expect planesto have Wi-Fi and are disappointed when there's a poor signal or noWi-Fi.In general, the first version of your product needs to cover the basicfeatures. Each successive generation should focus on a mix of satisfiersand delighters, along with making sure you're continuing to cover thebasic features.To find feature opportunities using the Kano model, map your product andits features against the model. What features are about meeting basicexpectations? Are they meeting expectations? Have you covered all thebasics? If so, move on to a satisfier or a delighter.A big frustration for product managers is that basic features canrequire a significant investment to even get to a reasonable level.While you want to spend your time working on the satisfiers anddelighters, skipping the basic features or doing them poorly will oftenlead to less customer satisfaction even if you have a great delighterfeature.If you're working on a new version of an existing product, consider whatfeatures started as excitement features but are now expected andsomething the competition has, too. Or similarly, what's something thecompetition added that your customers now also expect? How does thataffect your feature mapping/opportunity hypothesis? Touch ID started asa delighter feature on the iPhone, and now fingerprint unlocking isfairly common and expected on smartphones. What new delighters can youfind to achieve significant customer satisfaction?Moover.io's HypothesisBack in Chapter 2, we mentioned that when you book a move with Moover,the moving company does a follow-up call to plan details. Based oncustomer-satisfaction surveys, it has been found that this is the thingthat current customers who give the company a lower NPS complain themost about. Being a young business, Moover has to balance growing thebusiness against customer satisfaction.The team did get together and brainstorm ideas, and the otherpossibility that emerged was some type of referral program to help withgrowth. But given how infrequently moves happen overall, the team'sdecided to focus on making customers happier first. The idea is thathappy customers will naturally provide good word-of-mouth referrals, andlater on if Moover doesn't have good enough growth they can try variousgrowth techniques.After looking at the satisfaction-survey results and the productworkflow, this is what they came up with:- Company goal: Improve customer satisfaction.- Product goal: Reduce friction in the current workflow.- Opportunity hypothesis: We can improve satisfaction for Really Busy Rob if we eliminate phone calls with the moving companies and consolidate communication into an in-app messaging tool.- Success metrics: Since customer satisfaction is our main goal, we can measure it by tracking our NPS.- Other key metrics: Other key factors that indicate if customers are achieving their goals and using this feature are the percentage of customers who complete the bid-to-completed-move funnel and the number of messages sent per customer.At this point, as we did with Moover, you should have a hypothesis aboutthe unmet customer need you want to address for your personas, an ideaabout why you fall short right now, the key metrics you want to improve,and, possibly, an idea of what you want to do to try to address thisproblem. All of these elements should have some supporting evidence,even for blue-sky opportunities. Read on to learn about how to validatethese opportunities and see if they're worth pursuing. Chapter Three TipThis tip is from Beatriz Datangel. Beatriz has worn several hats in thestartup world. She's used her analyst experiences to land productmanagement positions where she drives decisions from data and insights.Her focus at Product School is on how to use data and communicatemetrics effectively. You can reach out to her via Twitter@bzdata.What Are the Key Differences Between Vanity and Success Metrics?If you ask what makes a great product manager, many will say it's anunderstanding of what goes where and how-not as simple when you'retoggling between Excel spreadsheets, SQL queries, and visualizedinfographics. We live in a time when data lives everywhere. A productmanager should know how to extract insight from the rightplace. Let's look at how to do so, using Amazon as an example.Start by understanding the product's and the company's overall valueproposition. For Amazon, the value proposition to customers is theconvenience of buying anything and getting it quickly.As a PM, you will need to think from the customer's perspective. If theychose your product/company out of all the competition for the key valueproposition, you will need to know how parts of the product areperforming to make sure the value proposition stays intact. What metricsdo customers care about that support the value proposition? Theseinclude:- Inventory of every item- Number of items stocked with inventory compared to top lists/holiday shopping guides- Percent of items ordered and arriving within an Amazon Prime shipping window (48 hours)- Average load speed of the website- Average wait time between submission of a service ticket and resolutionIf a website were slow or deliveries weren't on time, customers wouldn'tnecessarily think Amazon is convenient. If we fail to deliver on theabove metrics, we wouldn't deliver on our value proposition tocustomers, and they'd shop elsewhere. Conversely, when we deliver onthese metrics, customers are happy. This means these are success metricswe should focus on.Well, what are vanity metrics, then? Eric Ries first spoke of vanitymetrics in 2009, defining them as metrics often spoken of at a top-levelview. They also are often referred to in acronyms:- Pageviews- Number of installs- Daily/monthly users (DAU)- Growth in users, installs, page viewsIt's great if lots of people look at Amazon each day and go to Amazonfirst, but if they don't complete their transactions on Amazon, thenAmazon isn't winning. In other words, these metrics don't tell us ifwe're making our customers happy or not.Vanity numbers are great for a quick headline. However, success comeswith context. Be sure to look for metrics that matter towards asuccessful experience for the customer.Continuing our scientific method analogy, now that we have a hypothesisabout what to do next, we need to design and run an experiment to proveor disprove our hypothesis. In other words, we want to validate whetherour idea-no matter how big or small-will really help us achieve ourgoals.The ideal experiment to validate our hypothesis would be to build thefull product and see how our success metrics change. Sometimes this isthe right thing to do, such as if your hypothesis is that fixing a bugor adding a small feature will help you achieve your goals. But often,building the full product is a big investment in both time and cost.This means it's very risky to always build the full product to see if itachieves its goals. Instead, companies have started adopting the leanprinciples we've discussed, finding less expensive ways to validate anidea before building the product.These validation approaches take many forms. Some ideas need onlyinternal validation by looking at existing data like analytics andhaving a discussion with key stakeholders about the cost/benefit of thisopportunity before you decide to pursue it or not.With other ideas, especially for new products or major new features,you'll want to talk with real customers, both current and potential,directly via interviews and indirectly via surveys. This approach,called customer development, will help youunderstand your customers' pain points and goals more thoroughly so thatyou can validate if your idea will address their needs. You might evendiscover that a different idea many customers complain about is worthpursuing instead of your original hypothesis.The last idea-validation method we'll cover is to run an actualexperiment and seeing how your metrics change. For a new product orfeature, you might choose to build a low-cost minimum viable product(MVP, covered briefly in Chapter 1). Don't confuse building an MVP withbuilding the full product-as we'll cover later, MVPs might even behuman-powered. Alternatively, if your idea is centered on changing aworkflow, you might run an A/B test, which lets you compare two versionsof something-like two different sign-up workflows-to see which oneachieves better success metrics.The right way to validate your opportunity hypothesis depends on yourspecific situation. In general, for each new idea you'll want to haveobjective data, anecdotal data, and cost/benefit data to be able tofully assess it. This means you'll have to do multiple types ofvalidation. You might run an A/B test to gather analytics data,determine the cost by talking with the engineering lead, and then havean internal discussion with key stakeholders about the cost/benefit.Just showing that the idea will achieve its goals, which an A/B test cando, doesn't mean it's the right thing to do if the product is veryexpensive to build.Last, once you've found and validated an idea, you need to assess whereit fits on the roadmap. Just because you've found a great opportunitydoesn't mean it's the best thing for the company to work on next.Putting these ideas together with Moover, how might you validate youridea about how to improve customer satisfaction by building an in-appmessaging tool? You already have data from an NPS survey, so focus yourenergy on doing customer development, interviewing real and potentialclients to gather anecdotal data and ensure you truly understand theirneeds and pain points/how to make them more satisfied with Moover. Ifthose interviews indicate messaging really is the biggest pain point,then talk with Engineering and Design about what it will take to buildan MVP of this feature, and if the team agrees this will give thebiggest business value for the cost, go build it.Let's dig into each of these validation methods in more detail.SWOT AnalysisA SWOT analysis is a common method forlooking at how an opportunity hypothesis fits in. SWOT stands forstrengths, weaknesses, opportunities, and threats. This framework helpsyou identify the most important internal and external elements ofachieving your goals.To do a SWOT analysis, first identify your key goals and successmetrics. Then create a two-by-two table like Table 4-1. The top row willbe your internal elements-the strengths and weaknesses for theproduct/company around achieving your goals. The bottom row will look atexternal elements-the opportunities and threats, including things likecultural, governmental, and technological trends.If your opportunity helps improve a specific strength, take advantage ofan opportunity. Or conversely if an opportunity limits or converts aweakness or threat, it's likely worth pursuing even more. If it doesn'tfactor in or doesn't address one of the top-priority items, it's likelynot worth doing now.Internal ValidationAs a PM, you'll find that there's no shortage of good ideas for what todo next. In an ideal world, we'd do a comprehensive validation of eachidea, but this is rather impractical. Instead, we can do somepreliminary internal validation to see if an idea is worth pursuing.Here's a checklist of questions that will help you start validating anopportunity. If the answer to any of these is negative, then you shouldmost likely not pursue this opportunity.- Is this opportunity in line with our vision?- Does it support the product's vision and core function?- Can we do it well with our capabilities (or is it feasible and desirable to expand our capabilities to meet the opportunity)?- How does it contribute to our key metrics?- Do we have any data, be it from analytics, surveys, or bug reports, to support this opportunity?- Is it required to meet a critical business initiative?- How does it contribute to our users' winning?- Is it on our roadmap for this year, even indirectly as part of something else?- Will it matter in two years? (It's OK if the feature is to address an immediate need, but you'll want to limit those, as you want to prioritize things that have a higher value over time.)- Will everyone benefit? If it only helps a niche set of customers, is it worth the cost?- If it succeeds, can we support it?Our friends at Intercom (introduced in Chapter 3) also suggest lookingat your return on development investment to validate an opportunity.Create a two-by-two grid like Figure 4-1, looking at development effort(high/low) vs. how users value the feature/product (high/low), andfigure out where this opportunity falls.Creating a grid to comparedevelopment effort to user value is an easy way to visualize and comparedifferent opportunities. Ideally, you will do low-effort/high-user-valuetasks first (Feature A) and avoid high-effort/low-user-values tasks(Feature C) as much as possible.Unfortunately, this isn't a litmus test for opportunities becausesometimes we have to do high-effort things that users won't value, likerebuilding a back end, but this grid will help you put things incontext. Low-effort, highly valued features or products are nearlyalways worth pursuing.For some opportunity hypotheses, like "fixing a bug will help us achieveour goal," this level of validation might be all you need. If it's clearfrom data that the bug significantly affects a lot of users, it preventsusers from winning, you have the resources to fix it, and the cost vs.value doesn't outweigh something else you want to do, thengreat-you've validated that it's worth fixing the bug! Otherhypotheses require more effort in order to validate them.This internal validation can also help with a soft skill: Respect.You'll often have people throughout the company giving you productideas-in fact, you'll have more ideas than you can implement. Thismeans you'll spend most of your time saying "no" to good ideas becauseyou want to focus on the best ideas. But if you simply say "no" withouta reason, people will feel that you don't listen to them, affecting howwell you work together, and they will stop coming to you with ideas,which could prevent you from finding a great one. Doing an internalvalidation will let you easily and explicitly provide a reason for whyyou're pursuing one idea over another, making people feel like youlistened to them and aren't just making arbitrary product decisions.External ValidationExternal validation simply means getting feedback from real customers tosee if your idea makes sense. Even though you might think you know whatthey'll say, you don't know for sure until you check.There are many ways to get feedback. The simplest one is to be a datadetective. What external data about real customers can you find fromexisting research sources to validate your idea? Are there relevantresearch reports, whether it's Mary Meeker's Internet Trends report(available for free), NPD Group's reports on what people are buying andtheir behavior (these reports are expensive but the data's very valuableand spans numerous industries), census data, or even Google Trends tosee what people are searching for?Sometimes it might not be obvious where to look, and you'll need to seeif there's a similar or analogous vertical whose data will inform yourdecisions. Your primary goal is to focus on the need people are tryingto meet, and to find research relevant to that need. This data isn'talways easy to find, and it might be spread out across multiple researchreports. Financial-analyst reports are often great additional sources ofoverall industry trends.As an example, when on-demand food-delivery services like Postmates weregetting started, they could have looked to food-industry reports abouthow often people order carryout/delivery, how much they spend per order,what demographics tend to order carryout the most and where they live,which segments of the food industry are growing vs. shrinking, and more.Secondarily, Postmates could have researched a specific interactionmechanism, push-button ordering with mobile apps, by looking aton-demand apps like Uber. If Postmates' hypothesis was that people wouldlike push-button food delivery, it would've meshed these data points,using the food-industry reports to validate demand for food deliveryalong with the mechanism data to validate that people would be willingto order from an app.Make sure to watch out for confirmation bias. This is when we look foronly evidence that confirms our hypothesis and ignore evidence thatcontradicts it. Again, our hypothesis might be wrong, and that's OK.Reading market data can be very useful, but it doesn't always give yougreat insight to what your customers are feeling, and their needs notcaptured by data. Empathy can be a powerful validation tool: Is theresome way for you to be your customer sothat you can accurately understand his needs? Sometimes this is easy;for example, if you're a PM at Slack, you use Slack internally tocommunicate. You'll know how people use the product because you use itdaily, and you can validate your idea by analyzing how useful it'd be toyour life and if there's a tradeoff or cost that'd reduce the value. Becareful here, as you'll need to make sure the way you use Slack issimilar to how your customers use it.Other times, being your customer is doable but takes effort. Ford MotorCompany built a special suit, the Third Age Suit, which effectivelysimulates what it feels like to be an elderly driver, with reduced jointmobility, a simulated feeling of arthritis, simulated impaired visionconditions, and more. This suit lets Ford employees "be" an elderlycustomer to test features in their cars without having to bring in apool of elderly test drivers to observe and talk with.The trick to being your customer is to make sure you're representativeof an actual customer. Even though we all like to think we're an averagecustomer, we're not-you're a PM, you're above average! And especiallyif your product has multiple personas, you'll likely represent only oneof them.Unfortunately, sometimes it's not realistic to be your customer,especially for enterprise and niche products. In these cases, you justhave to find another approach to understanding your customers.Customer DevelopmentFinally, sometimes it's necessary to go outside the building to talkwith customers, both current and potential. Keep in mind that the goalright now is to figure out whether to build a given thing, not toconduct user testing/research to see if we've built a particular thingwell. The former happens at the beginning of the product process, andthe later will happen once we've started building something.So what is customer development? It's a way to validate if the peopleyou think are your customers truly are the right customers andconfirming you're on the right path. This includes finding out whatproblems customers are seeking to solve, what they're doing right nowthat either creates those problems and tries to solve them, what they'reable to do (technically, financially, socially, etc.), and how they findout about and decide if a new product/feature is worth it.Fundamentally, it's a conversation and an exchange of information.It's also useful to know what customer development is not. It's not away for people to give you a wish list. It's not a focus group to onlysee how people respond to ideas. It's not a place to observe howcustomers use your prototype. It's also not a replacement for productvision. Customers will give you a huge wish list, but they'll often askfor more than they actually need, end up not using features, and -inreally bad cases-might get confused by all the extra features. This isa big part of why we recommend having some opportunity hypotheses inmind first.InterviewsWe've found that, of the various steps in the product-development lifecycle, people new to product management have the least experience withcustomer interviews. But interviewing is an incredibly valuable skillbecause it's an effective and low-cost way to validate your opportunityhypothesis. And since a product manager's ultimate goal is to help thecustomer be awesome, spending time with customers is critical to yourrole.There are entire books, such as Cindy Alvarez's excellent Lean CustomerDevelopment, that cover in detail how toprepare, do, and learn from customer interviews. We'll do our best togive you a detailed overview, but we'd recommend doing further researchand practicing your own interviews before actually talking withcustomers.Preparing for InterviewsJust like how you don't walk into a job interview without preparing, ora meeting without anticipating a desired outcome, customer interviewstake preparation. These steps are largely based on Lean CustomerDevelopment because we believe in them!To get started, write down a list of what you know factually and whatyou're assuming about our customers, including their needs and how yourproduct satisfies them. The Business Model Canvas can help you identifykey assumptions. Of course, customers can help you validate only partsof the canvas that apply to them: segments, value propositions,channels, relationships, and maybe revenue streams. But given howfundamental these are to your business/product, they're quite importantto turn from guesses into facts.Use the Value Proposition Canvas to identify what you know for sure andwhat you're assuming are your customers' existing pains and desiredgains. Also try to identify what tradeoffs they're willing to accept forthese gains. For example, does a smartwatch provide enough functionaland fashion gain that they're willing to trade off the sentimental valueof their existing watch? Or does your augmented-reality headwear provideenough value that your customers are willing to make the socialsacrifice to wear it? Google Glass learned customers' feelings aboutthat tradeoff in a very public and expensive way.It can be helpful to explicitly write your opportunity hypothesis interms of these canvases: "I believe that ,and alleviating that pain would let the customer ,although she'd have to ."Don't forget about what you think your key metrics are and who youbelieve your competitors are. Your customers might not see the samepeople as competitors, or they might know of existing solutions that youdon't.Also, it's useful to know your company and product roadmap: How'd youget to where you are, where are you thinking about going, what are theopen questions, and what information from customers might help you makebetter decisions?It's useful to look at any other persona trait relevant to youropportunity hypothesis to think about who to talk with, and if there areenough potential customers to pursue this opportunity. For example, ifyour product provides a convenience service for a fee, you'll want tofocus on customers who will pay for convenience rather than people whohave coupons.com as theirhomepage-still talk to a couple of people who value cash overconvenience to get a sense of where their tipping point might be,however. Other traits to look at include where potential customers fallon the risk vs. reward, low-tech vs. tech-savvy, bored vs. busy, andfrequent vs. infrequent purchase spectrum.A-hopefully obvious-technique to help make sure you're finding theright customers is to create screener questions you ask potentialinterviewees. Try to hide the "right" answer so that people don't answerwith what they think you want to hear. If you want people who usestreaming music services, ask what product they use to listen to music.Also ask questions to exclude people, like, "How often did you listen tomusic last week?" Braden Kowitz at Google Ventures created a usefultemplate to help you screen for participants, available at. Once you've figured out who you want to talk with (more on finding thesepeople shortly), let's figure out what to ask them. The most importantthing to know is that, whether they realize it or not, people are goingto try to please you. The most valuable thing you can do is to get thecustomer to tell you about how they currently deal with whatever problemyou're thinking about solving. Even if you think you have a new service(imagine someone considering a food-delivery service like Postmates forthe first time), your customer might already do something in this space(ordering from restaurants that aren't their favorite specificallybecause they deliver, getting carry-out, etc.) that you'll want to askabout.There's a phenomenon called "ideal self" where if you ask someone aboutwhat they might do, they never give a good answer. Would you like tolose weight? Would you like to save time? Would you like to havedelivery from your favorite restaurants that don't currently deliver? Ofcourse the answer is yes to all of these!Instead, if you ask questions about what people currently do, you'll seewhat actually happens in their lives, which is a much better predictorof what they'll do in the future. How often do you go to the gym? Whatdiets have you used in the past six months? Do you pay a handyman or fixthings around the house yourself? When did you last order delivery? Didyou make a restaurant choice based on who delivered?Similarly, asking what someone will pay is useless because no one willgive you an honest and meaningful answer. But it's useful to ask whatthey've already paid to try to answerthis question. If they haven't spent anything in the area you're askingabout, it's likely not an issue for them.Rather than asking customers if they'd like yourfeature/product-because they'll say yes-it's better to find outabout how they deal with the fundamental problem you're trying to solve.The simplest way to ask a question like this is, "Tell me about how youdo today."Unfortunately, it'll take some prompting to get useful information. Forexample, someone might have a situation or limitation that he doesn'tsee as relevant to your discussion but that could play a huge role.Maybe your product needs a fast cellular connection to work well, butthe person you're interviewing barely has 3G where he lives. It's veryhelpful to get context. Here are some sample questions:- How often have you dealt with this topic?- What were you doing right before this topic came up?- Once you finished, what'd you do?- How long did it take to deal with the topic?- What made you buy the product relevant to this topic?- How often do you buy the product?- Where do you go to buy the product?It's also really valuable when you ask questions that get customers totell you stories rather than giving simple yes/no answers. They'llautomatically provide you some background context, or you can politelyinterrupt and ask them to clarify any needed context. Stories help yougo up to a slightly abstract level because you'll often find out whysomeone was using the product, what their goals were, and what theyprioritized. You'll also find that people say things implicitly instories so that you don't have to prompt for more-e.g. they mightmention using Siri, which means they are iPhone users.Sometimes you'll have customers who think they know exactly what theywant and will tell you specifically. For niche products with advancedusers, these people likely do knowexactly what they want, and they know enough about how the product worksto know what's possible. But that's a very small group. Most customersdon't know what's possible or impossible, and you'll likely want toignore specific feature requests. Instead, it's your job to figure outpeople's underlying pains and see if your idea will address them. Thinkabout the Henry Ford's "faster horse" example here: The feature requestis a faster horse. The underlying desire is the desire to get to adestination faster.Restating someone's feature request to make sure you understand it andasking what she thinks it'd let her do or how she envisions using thatfeature is an easy way to start to get to the underlying desire. Youcould also use the "magic wand" question: If you could wave a magicwand and be able to do anything you can't do today, what would it be?Anything you can imagine is possible. What would you like? This might seem like an ideal-self question, butit's not, because we're not asking if a customer would do something. We're actually asking, "What's yourbiggest pain point around this topic?" in a more fun way. Hopefully ourhypothesis addresses it!It's also useful to ask about tradeoffs. "If were to happen but it meant that, how would you feel?" Thisdoes start to hit on the ideal-self question, but it can give you asense of what a customer values.Sometimes customers are used to seeing the world one way, and might notrealize that they have a real pain point. Did you realize how annoyingthe taxi experience was before you tried Uber or Lyft? You might need tothink of questions to tease out if there is an unrealized pain point,like asking how often someone walks to a hotel to find a taxi ratherthan trying to hail one on the street.If you have an existing product and a fairly detailed opportunityhypothesis, you can also use a hypothetical situation. Have part of theinterview where you say something like, "I want to tell you a storyabout how we imagine someone like you using the next version of ourproduct based on what we've heard from other customers. Please interruptme if you have questions, if you disagree with anything I'm saying, orif I'm just plain wrong!" This approach can help you find out about anylimitations customers have, if your product has unused features, and ifyour customers are using your product how you imagine they're using it.Generally, avoid showing any existing products or prototypes, as thatfocuses the conversation on what you have rather than on what thecustomer needs. However, it can be useful for customers to show you anyexisting solutions they have in place, and you might notice aspects ofthe solutions that the customers don't explicitly realize.You'll also want to avoid loaded and leading questions-that is,questions that imply an answer or encourage the customer to answer in aspecific way. "Mr. Smith, do you still beat your wife?" is a loadedquestion because it implies guilt even if Mr. Smith wouldn't harm a flyand never ever beat his wife. "Do you have problems with your PC?" isleading because it implies the customer uses a PC and that his PC hasproblems. "Tell me about your primary computer" is better because itdoesn't imply any judgment and lets customers respond with what theycare about.Put together your first list of questions, but don't worry about makingit perfect. As you start to do real interviews, you'll refine yourquestions based on if you're getting the information you want-thisdoesn't mean you'll get the answers you're hoping to hear. Your listwill never be perfect, but keeping this advice in mind will help you geta great start.We recommend taking a step back once you have a list together, andreally thinking about if these questions will deliver the informationyou're hoping to learn from the interviews. One way to do this would beto imagine what the most useful results would look like-which youcould derive by thinking about how you intend to use the results fromthe interviews-and working backwards to see if your questions willdeliver.There is one question you should always ask at the end of an interview:"Is there anything else about that I should've askedabout?" Here's when you account for the known unknowns-that is, thecategory of things the customer cares about, and that you know exists,but you have no idea what else might be in there beyond what you asked.For example, maybe you were focused on how quickly a customer can accessGoogle Now or Siri on his phone, but it turns out the customer hatesvoice recognition because it doesn't work with his accent.Once you have your question list together, start preparing thelogistics. Here are some key issues to consider:- What's the last date where interviews can give you useful information? Customer development takes time, and often there are internal milestones beyond which new information isn't helpful. Knowing these milestones in advance helps you craft an effective interview schedule.- What level of quality and confidence in the results do you need? Do you have a bit of time to really do a thorough job, or do you have to work as fast as possible even if the results are imperfect?- What's the right medium for the interviews: in person or on the phone? In person is always best, but that might not be feasible if your customers aren't all in the same city. Phone chats are often easier to schedule and more convenient, but you'll miss any non-verbal cues, like facial expressions. Video chat solves that problem, but it can be rather frustrating if it's not working or if the interviewee isn't tech-savvy-you don't want to spend your interview time debugging a connection.- How much time will each interview take? Interviews tend to run long-people run late, you find interesting things to ask about, etc.-so if you plan on conducting a 20-minute interview rather than a 30-minute one, you'll likely hit your time goals. Make sure to communicate your time expectations clearly to your interviewees.- Should you pay your interviewees? In general, yes. Somewhere between $50 and $100 per hour is common, and it's often as a gift card rather than cash. You're asking people to work for you and provide their expertise, and you'll use that input to make money. The one exception would be if you're talking with someone who reached out to you, such as a current customer who emailed the support team. The best way to pay those people is to make the product even better for them! You can also make them feel special by including them in early-access programs.Finding People to Talk WithWe've got our hypothesis, we've got our interview goals, we've got ourquestions, and we know the type of interviewees we want to talk with.Now all we need are interviewees! This might seem scary, but it's easierthan you expect. People like to help others, especially if they cansound like experts. Approach people humbly, saying you'd love their helpand want input from their experience, and you'll find willinginterviewees.Look at your connections first. Do you know anyone directly who fitsyour target persona, or do you know people who might know people? Don'thesitate to ask your connections directly. Make your request explicit:tell them why you're asking, make it clear what the interview wouldinvolve (time, format-like on site vs. phone call), and mention howhelpful it would be. If you're asking a connection to reach into hernetwork, create an easily forwarded email so that it's simple for yourfriend to press "Forward" and send the email to anyone she knows withoutadding a long note.Social networks can be great resources, too. Reach out on LinkedIn,Quora, subject-relevant forums, or even Twitter to see if you can findpeople willing to help. If there's a particular physical place yourcustomers hang out, try going there in person and talking with people,or at least posting a notice asking people to contact you if they'd bewilling to provide input.Craigslist and other online classifieds will be very hit-or-miss, andmore miss than hit. You really don't know who will stumble upon yourpost given Craigslist has such a wide audience, and it might take moretime to filter for the right interviewees than it's worth.If you're really stumped, ask yourself this: Once you've built theproduct, how are you planning to find customers to sell to? Or, if youalready have a product, how do you reach your existing customers? Usesimilar techniques to reach your audience, but rather than asking themto open their wallets, ask for their wisdom.For existing products, you should have already had customers reach outto you to offer opinions. People who speak up might not represent thesilent majority who won't complain or comment, though, so you'll stillwant to find what the quieter people want. Your sales and support teamscan point you to good customers to talk with. When reaching out to thesepeople, make it clear you're exploring opportunities and not changingthe product, and give them permission to complain. They'll let you knowabout their pain.There are also many market-research firms you can hire to help you findthe right customers to talk with, and they will also often help conductinterviews. These firms can be a bit pricey and take a while to produceresults, but they make your life a lot easier.No matter how you find your interview subjects, remember to use yourscreening questions to make sure these potential subjects fit yourcriteria.After you've found the right subjects, schedule the interviews. Providevery clear instructions for everything your interview subjects need toknow, such as parking availability for onsite visits and your directcontact information. Once scheduled, confirm the interview, and considera reminder call or email the day of, too. Multiple tools that help youschedule interviews, such as PowWow, will send the reminders for you.Conducting the InterviewsNow comes the fun part-talking with real people. Before you begin,take a breath and smile-you're a friendly researcher right now, nomatter what else is going on during the day.As soon as you greet your interviewees, make them feel comfortable. Youwant them to open up and have a conversation with you, not feel likethey're being interrogated or rushed. Watch the time, but be courteousabout it. Talk with them as a human, and call them by theirnames-don't call them "customer." Make it clear that there are noright or wrong answers-you want their expertise and you appreciatetheir time.It's helpful to get interviewees talking right away by starting withsimple questions that the customers won't have to think too hard about,like asking them how they deal with the topic you're looking at now.Imagine an arc: start with small talk, go to easy questions, move tomeatier questions, recap key points, and then thank them for their time.Your job is to be quiet and listen-don't jump in and start talkingwhen the other person takes a breath. You'll even want to wait a fewbeats after someone finishes a thought before saying more, in case she'sthinking and planning on elaborating on her answer. If someonecriticizes your product, don't get defensive; remain neutral andencouraging, getting the person to talk. Even smile and sympathize!To make sure you understand what your interviewees said, ask foranything you want clarified, and even restate what they said into yourown words. You'll also want to clarify vague expressions. If someonesays, "I hate waiting for this," find out where his tipping pointis-is he OK waiting one minute but five feels like a waste?In terms of taking notes, you'll generally want to record what yoursubject says verbatim rather than summarizing. This will help you avoidconfirmation bias, and it'll make it easier to analyze the conversationlater on. It's very useful to have a notetaker so that you can focus onthe person rather than writing. Failing that, use a smart pen likeLivescribe, which records your conversation and lets you tap on anynotes you take to immediately jump to that part of the conversation.Make sure to note any non-verbals, and star any emotional utterances ("Ihate/love this"). One exception to the verbatim-recording goal is ifthey say "maybe"; write it down as "no."At the end of an interview, thank the subject for his time, and ask ifyou can follow up later.If you've never done an interview before or you're not sure about yourquestions, do a practice interview or three with someone you know. Itusually takes 5 to 10 interviews to fully get into the zone, and unlessyou're changing your questions, 15 to 20 interviews is usually when youstop hearing new things.Drawing Conclusions from InterviewsTake some time immediately after each interview to pull out 5 to 10 ofthe most interesting points. Focus on things the subject said thatvalidated or invalidated your hypothesis, carried emotion, or surprisedto you.Each interview should help you figure out if your hypothesis addresses avalid pain point the customer has: whether the customer has tried tosolve that pain point before, whether the customer cares enough aboutthis pain point to want it fixed, and if there's nothing that'd stop thecustomer from using your solution. You should have a good sense of howyour product would fit into the person's life day to day, if it'dreplace anything, and, if she wouldn't buy your product, the specificreasons why.Make sure to pay attention to actionable vs. wishy-washy words yourcustomers use. If they say, "I keep meaning to," then they don'tactually care about the topic at hand. If they say, "Here's what I'vetried and what I do," then they care. "This would help me achieve this goal" is meaningful, whereas, "This would be interesting tohave" and "I think I could figure out how to use it" mean this personwon't use the product. If they say, "I wouldn't use it, but otherswould," no one will use it. Similarly, "Maybe it's just me" means lotsof people feel that way.Pull the data from all your interviews together into an overall summarythat you update as you go. Categorize what the customers say asappropriate, including pain points, emotions, existing solutions, and soon. Even try sorting their words into "validates hypothesis" and"invalidates hypothesis" buckets. Try to see if you can identify trendswith multiple customers having similar comments.If you haven't found anyone excited about your idea in five or sointerviews, either you're talking to the wrong people or your problemisn't a real problem for customers. Try changing who your targetsubjects are, and if the trend continues, you just invalidated yourhypothesis. Also, if your questions aren't giving you the insights youwant, change them!If only a few people see your opportunity as a pain point they careabout, the potential market for your product might not be large enoughto matter. You'll want to do more (like a survey, which we'll covernext) to try to gauge the market size, but this should be a warningsign.Sometimes you'll notice customers discussing the same pain point againand again, even if it's different from your opportunity. Absolutely notethis pain point, and analyze if it's a better opportunity (has a biggervalue, lower cost, etc.) than the one you're looking at now.After 15 to 20 interviews, you should have a good idea about how validyour opportunity hypothesis is.Surveys"The plural of 'anecdote' is not 'data.'" (This sentence is attributedto Frank Kotsonis and Roger Brinner.) Interviews are great because theyhelp you figure out customers' underlying pain points and motivations,but they're just a small sample of your user base (or potential userbase). They don't help you quantify issues or measure overall attitudes.Analytics don't provide that type of information either. Analytics aregreat at exposing what customers actually do, but they don't tell youanything about what's going on in a customer's mind.Surveys occupy this murky area, where we can get a view inside a lot ofcustomers' heads. In general, the data surveys provide isn't as highquality as that from customer interviews, but it's a low-cost way to seeif our conclusions from customer interviews scale to a large number ofpeople.There are multiple ways to use surveys-one example is how we used themin Chapter 3 to gauge your overall NPS as a potential starting point forfinding an opportunity. We'll focus now on using them to validate ahypothesis.In the validation step of the product-development cycle, never startwith a survey-you'll find out better questions to ask and get morereal data about people's needs with interviews, but once you think theinterviews have validated your hypothesis, surveys will help you see ifthe bulk of your customers agree.Creating SurveysGood survey design is also a bit of an art. Because you're not there toask clarifying questions or to pay attention to non-verbal cues, youneed to be careful of how you design them. You'll also want to test anysurvey before sending it to a broad group.Like you would with an interview, start by explicitly focusing on yourgoal. It should be "to further validate my hypothesis by seeing how manypeople have this pain, have invested significant resources trying tosolve it, are unhappy with the solution, and could implement mysolution."In general, keep surveys short! They should take only a few minutes tofill out. Survey fatigue is a real thing, and the quality of the answersin the middle of a survey drops compared to the beginning and end,especially on longer surveys. To help account for that fatigue, whereverpossible, randomize your questions (or more commonly, randomize theordering for the groups of questions you present).You'll also want to randomize how the answers are presented to accountfor a bias anyone has toward just picking a specific answernumber-remember when you guessed "C" on every question you didn't knowin school?It's critical to keep your questions and answer choices very clear-youmight know what industry jargon means, but your customers might not.Even phrases that seem obvious, like "Q4," can be ambiguous-do youmean a fiscal or calendar Q4? Just specify the months instead.When picking questions, you'll also want an arc for the survey. Startwith broad questions, move into specifics, and close with a place forthe customer to add any extra thoughts. Group related categoriestogether, too, to help the customer with context.Like with interviews, always aim for actual instead of ideal-selfquestions-i.e., ask what customers have done, not what they might do.Also avoid leading and loaded questions. For example, rather than askingif the customer has recently used online billing tools, ask how acustomer pays bills, with an option for online billing.Comparison questions, whether between what the customer uses now andsomething else or between two hypothetical products, are implicitlyleading because analyzing a hypothetical is very hard. It's better topresent the two options separately and to have people rate theirexperience with or thoughts about each specific option. Later, you cancompare the results.Comparison questions also often ask two questions in one because you'reevaluating each product's value. It's always better to ask separate,simple questions rather than one question that really includes multiplequestions.Tables that explicitly ask a user to rank her thoughts about specificitems are useful to figure out how many customers value this potentialpain point and how much, and to analyze how trends change over time. Forexample, "Are you completely dissatisfied, slightly dissatisfied,neutral, satisfied, completely satisfied, or n/a with your ISP'sdownload speed?" is a useful question, and you can ask it again andagain as the speed and what customers do online changes. Ranking likethis is also great because it lets you build an importance/satisfactiongraph with real data. Simple agree/disagree questions are frequentlybiased because people want to please you and are more likely to select"agree." Use a scale instead to get more accurate answers.Ask for specifics when a bucket has a lot of variability. Age is a greatexample because surveys often have questions asking which age range youfall into. But between 18 and 40, there's a lot of potential variabilityin your life, especially depending on where you live. People in citiesmight still be single, living with roommates, and have lots ofdisposable income at 30, whereas a person in a rural area might bemarried with three kids. Instead, ask the person's age specifically, andask specifics for any other data you need to correctly segment thecustomer. And, of course, remember what we've mentioned again and againabout segmentation around pain/needs/jobs being more effective thanaround demographics.At the same time, allow for flexibility when needed. Fifty years ago,people were much more likely to join a company, stay there their entirecareer, and then retire. Today, you could be employed and looking for ajob, or self-employed but in between contracts (essentially unemployed).It's totally reasonable to have empty text fields where people can typestories, rather than radio buttons where they're constrained to fixedanswers. Asking how someone's last flight experience on an Americancarrier was will yield more interesting results than, "How satisfiedwere you with your flight?" Make sure that if you ask for a detailedanswer, you don't set a low character limit on your survey's answer box.Asking "why" questions can be dangerous because people are not veryself-aware. As with interview questions, aiming to understand acustomer's goals helps dive at motivation more explicitly. "What's thetop thing you hope to learn from this book?" is a better question than"Why did you buy this book?" (Please email the authors if we're notmeeting your needs!)When conducting a survey about an existing product, it's also good toask a Net Promoter Score question (see Chapter 2), as this willimplicitly help you measure the score over time as you conduct moresurveys.Executing SurveysThere are many tools to create surveys: Google Forms, SurveyMonkey,Typeform, etc. The best tools will let you add conditional sections sothat you can ask follow-up questions based on how your customers answerquestions. If they're unsatisfied with something, you might want to diginto more specifics about why to help you validate your hypothesis, butif they're completely satisfied, you don't need to ask more questions.Finding people to take your survey is similar to but arguably easierthan an interview because a survey is much less of a demand on someone'stime than an interview. If you have an existing app, add a pop-up in-appor email existing customers that meet your filter requirements to ask ifthey have five minutes to take a survey to help improve the product.Note how that sample text has the survey's goal, "help improve theproduct," which explains why it's valuable for customers to take it.This makes it more likely a customer will complete the survey.Posting on various forms and social networks where your target marketresides is useful, too. If you're doing minimal manual filtering whensending the survey link, though, you'll want more filter questions atthe start of your survey to make sure only the people you want to hearfrom are actually progressing through the survey and answering the mainquestions.There are also services like Ask Your Target Market that have a largemailing list, and you can pay to send your survey link to exactly theright people. Paying for targeted ads on Google, LinkedIn, Twitter,Facebook, and more is another way to find potential respondents.Generally surveys are unpaid, but companies often offer a lottery-likereward at the end to add an incentive for people to participate("Provide your email address to be entered in a raffle to win a $100gift card").Analyzing DataRun your survey until you feel you have statistically significantresults or until you stop getting new/useful/different results.When you're ready to start looking at results, the very first thing todo is validate the data. What do you do with incomplete surveys? Do youwant to ignore them or manually look at them to see where-and maybewhy-people stopped answering? If you use the data, you'll have adifferent sample size for each question.Next, do you want to do any partitioning based on background questions?People who listen to streaming music daily may have different answersthan people who listen once a week. What about cohort analysis? Peoplewho came from a professional forum might be different than people whostarted replying only once you added a raffle.You'll likely want to do a basic data analysis with any numericalquestions-i.e., convert scales to numbers, look at the mean, median,variance, etc. You'll also want to look at the distribution to see ifit's standard/normal-that is, most people are around a mean-thatsays the data trends to a point. However, if it's bimodal, answers fallinto two discrete categories, that tells you something else, and a meanisn't useful for that question.In general, like with interviews, you're still looking for anything thatvalidates or invalidates your opportunity hypothesis. But the otheraspect you want to look for with a survey is how many people feel thisis a pain point, and how significant of a pain point is it.If everyone agrees it's a pain point but no one has spent any time ormoney trying to solve it, your opportunity is likely not worth buildingunless a solution is very cheap to build or you have reason to believeyour solution will make customers realize the pain point is bigger thanthey thought. You could imagine what a survey about voicemail would'velooked like before visual voicemail on the iPhone-finding, listeningto, and saving a specific voicemail message was a pain, but no handsetmanufacturer spent money to solve it because it required service carriercooperation.If you used satisfaction questions to build up animportance/satisfaction graph-both in terms of how customers perceiveimportance and how you internally rank importance-you can see if youropportunity is the right one to pursue next or if there's something moreimportant.Because it's very easy to fall victim to confirmation bias, try focusingonly on data that invalidates your hypothesis before looking for datathat validates it. At this point, you should have a very good sense ofwhether your hypothesis is valid and if it's a valuable enoughopportunity to pursue.ExperimentsAn additional way to validate a hypothesis is to run an experiment whereyou build something to test your hypothesis. This isn't always possible,but if you can run one, it'll yield incredibly informative results.Experiments are complementary to customer development, not areplacement, as they'll help you see what people do when you make achange, but they won't help you understand why people do it or what their fundamental needs are.A/B TestsOne of the most common experiments to try with an existing product iscalled an A/B test. The idea's simple: if you make a change to yourexisting product and address the opportunity you're focused on, whatimpact does it have on your key metric? You'll implement the change,randomly give some users the current "A" version and some users the new"B" version, and then see if the metric changes in a significant way.The hardest part of an A/B test for people to understand is that you'renot fully building out the B version in a well-designed and engineeredway. The goal is to hack together something quickly and cheaply thatwill let you determine if this opportunity is worth pursuing in a morethorough way.A/B tests are a great way to validate if your hypothesis achieves yourgoals with iterative/refinement opportunities. For example, Google had ahypothesis that the shade of blue used in advertising links affectedclick-through rates, and A/B (and C/D/E, etc.)-testing different shadeslet Google find a shade that generated an extra $200 million inrevenue, according to Dan Cobley, managing director of Google UK.It's most common to A/B-test navigation, user flows, layout, andmessaging/content. If your opportunity doesn't fall into these bucketsbut you think you can A/B-test it anyway, go for it! In fact, sometimescompanies beta-testing a completely redesigned, blue-sky-opportunityversion of their website will randomly direct part of their traffic tothe new site and see how the users' overall behavior differs frombehavior on the main site.Optimizely is a very common tool for implementing A/B tests, and itsexpanding feature set includes support for web, mobile, and desktopapps, custom segmenting/test targeting, analytics, and more.Simple MVPsWe like to talk about two types of minimum viable products, similar toLean Startup (discussed in Chapter 3). The one people most commonly talkabout is the version you'll actually build and release (covered inChapter 5). The other type is a very simple MVP that you can create tohelp validate your hypothesis-a scaled-back version of your fullproduct vision. These super-simple MVPs will be inexpensive to puttogether and not actually implemented how the real product will beimplemented. But they should provide enough to a potential end customerthat you can gauge if your opportunity's worth pursuing.The simplest MVP is a preorder MVP.This helps you evaluate if people are interested enough in your idea toopen their wallets for it. Create a fake marketing website for yourproduct, describing it as if it already existed with the features youfeel are important, and put a "Buy" button at the bottom of the site.Then, market this product like it actually exists, take out differentdisplay ads, and see how many people click "Buy".To avoid being completely deceptive, we recommend adding a note whensomeone clicks "Buy" that says you haven't finished building thisproduct, are currently working on it, and they can enter their emailaddress to be updated when you have new information. This is also a niceway to capture a list of customer email addresses you can market to whenyour product is available.For an existing product, you could create a "New Feature" section onyour website, see how many people watch an explainer video showing howyou intend for the feature to work, and use a "Learn More" buttoninstead of a "Buy" button to reveal the truth and again capture emailaddresses.Another type of MVP is a concierge MVP(these names are from Eric Ries in The Lean Startup). In it, you'll manually work with your customerjust like a real concierge would to perform a task, where the task isthe overall focus for your opportunity hypothesis. If you have ahypothesis that people want a restaurant-recommendation app, you'd actlike a concierge to help them select a restaurant. During this process,you'll want to explicitly focus on the steps you go through to figureout an answer-which questions matter and which don't, and what'sinvolved in completing each step-so that you can eventually automatethem.Looking at this restaurant-app idea, if no one asks for your concierge'shelp, that's a big initial sign that something is wrong. Either you'renot appealing to the right customers or you're not making your valueproposition clear. Then, when someone expresses interest, you'llmanually discuss with that person what type of food he likes anddislikes, what type of restaurant ambience/price point/etc. he's lookingfor, and you'll run a Yelp search for him. You could even offer toarrange transportation.As you go through this process, you'll find out if customers areinterested in the overall idea, which steps are the most useful and whatgoes into them, which steps are unexpected but delightful (likearranging transportation), and which steps customers don't care about.This helps you refine your hypothesis and create a better cost/valueestimation. For example, maybe you find your customers really want afeature that lets them push a button and simply have a Lyft show up totake them to a nearby open restaurant that they'll probably like: theycare about instant fulfillment over making a reservation and planning.Many service start-ups initially began with a concierge MVP, helpingthem gauge interest and better understand the overall problem space andcustomer needs. Wealthfront, an automated investment service, evenstarted with a concierge MVP by having financial advisors manuallyworking with clients.A Wizard of Oz MVP is another simpletype, sometimes the next step after the concierge MVP. Here, you'llcreate a product that looks like it's fully built to an end customer,but humans are doing the work behind the scenes. The Zappos founderdidn't start by making an e-commerce site or stocking tons of inventory:he took photos of shoes at different shops (with permission), put themonline, and when an order came in, he'd manually buy and ship the shoes.But to a customer, it looked like Zappos had a full inventory and was astore by itself.This style of MVP also doesn't scale, but it's another way to validatethe demand for your opportunity. If you can manually keep up with thedemand, this idea probably isn't worth pursuing. But if people love itand you're overwhelmed, that's a good hint it's time to automate it.The last type is a fake door MVP. Ifyou're thinking about building a new feature into your product, add theUX elements you'd use to trigger the interaction, but rather thanactually delivering the feature, provide a notification that thefeature's coming soon. See how many people use your "fake door." Forexample, if your hypothesis is that people would find a live group chatfeature useful on your online education site, add a "Chat" button andsee how many people click it. If only a tiny percentage do, reconsiderif it's worth pursuing this opportunity, depending on the value of thosecustomers vs. the cost of implementing the feature.The key to remember with every experiment is that you want to keep itsimple and cheap. You don't want to spend so much time designing theperfect A/B test or preorder MVP that you're burned out before you'veeven run the experiment. You're going to throw away every experiment,regardless of the result. If the result's positive, you'll have to buildthe product or feature for real.Moving ForwardAt this point, even if it took a lot of changes and retries because yourinitial hypothesis was wrong, you should have an opportunity hypothesisthat you've validated as worth pursuing. Woo! It's time to get going onyour roadmap!There's one more step to think about, and that's your opportunity'spriority on the roadmap. Even though you've found a great opportunity,you have limited resources, and another PM might have found a differentpriority that's more important to the company's goals. Every feature hasan opportunity cost: working on one thing means you're not working onsomething else. As a PM, you want to think strategically to make sureyou're always working on the things that matter most. You might have agreat idea that you've validated, but is it what the company should workon next?A helpful litmus test is whether this product or feature will help thecompany achieve its current goals. If not, you should likely table itand work on it when the company is focused on the appropriate goal.The Kano model (Chapter 3) provides a useful way to gauge how criticalyour product or feature is. Is it a basic feature? If so, it's probablya high priority to do next because your users expect it and you're notdoing it-or at least not well enough. If it's a satisfier ordelighter, you can prioritize it based on its value (how much you thinkit will provide towards your goal) vs. cost.A simple way to compare priorities is to come up with a value vs. costnumber. Work with an engineering lead to put difficulty values ondifferent opportunities. From your customer-development work and otherinternal analysis, create business-value numbers for each opportunity.Use higher numbers to indicate more expensive cost, or more valuable.Because it's tough to estimate value and difficulty precisely, use anexponential series rather than a linear one-i.e., use 1, 2, 4, 8, and16 rather than 1 through 5. This way, it's very clear when oneopportunity is harder or more valuable than another. Next, for eachopportunity, figure out a score using score = value÷cost. Focus on the highest-scoring opportunitiesfirst, as they provide the most value for the lowest cost. You mightchoose to change priorities based on other factors, but this will giveyou a good starting point.We'll conclude this section with a warning: you might have a run of goodluck where you create hypotheses that customers vehemently validate.Keep validating your ideas, though; just because you were right beforedoesn't mean you'll always be right. Taking time to validate your ideais a lot more effective than skipping this step, building theproduct/feature, and finding out you were wrong.Moover's Opportunity-Validation StrategyIn Chapter 3 we came up with a hypothesis for Moover that if weintegrate into the app everything that happened in the follow-up callfor planning a move, our customers will be happier. We came up with thisfrom data-NPS survey results-plus internal discussion. During theinternal discussion, we essentially did the internal validation, and weagreed it made sense to work on.But Moover has a lot of possible things to work on next, and we want tomake sure in-app messaging is the right one. This means we want to docustomer development, interviewing real customers. We want to learn ifmessaging really is an annoyance, if our in-app messaging feature wouldsolve that pain, and if there's something else we've missed that weshould work on instead.Here's the first version of our interview template:- Have you moved before, without Moover? If so, what was it like?- How did you hear about Moover?- What was your experience like using Moover?- Which moving company did you pick, and what made you pick them?- How did you communicate with the moving company outside of Moover?- (If they say "phone"): How many times did you attempt to contact each other before you actually talked? (That is, you call them and get voicemail and you miss their return call.)- How do you feel about talking with someone on the phone?- Could you tell me what your first and second preferred forms of communication are (e.g., phone calls, email, SMS, something else)?- What additional information did the moving company need to give you a final estimate?- How long did it take to go from starting to communicate with the company to providing your information to getting a final bid? Did that delay affect your planning?- Did you have any special items, like a piano? If so, what was it like to arrange moving that?- (If the move has happened already): How did things go the day of the move? Was there any preparation with the movers that didn't happen that would've made the actual move smoother? Post-move, how did things go with the moving company?- (If they've moved previously): What parts of Moover saved you time compared to when you moved before?- If I could wave a magic wand and change any part of the moving experience (aside from packing and unpacking-say this with a laugh), what would you want me to change?- On a scale of 1 to 10, with 10 being "definitely" and 1 being "not at all," how likely are you to recommend Moover to a friend? (If you don't think you've gotten answers that reflect this number, probe more and ask about the single biggest factor that led to their picking that number.)- Is there anything I didn't ask you about communicating with the moving company that I should know?We'll refine this as we do interviews, but this is a good starting pointthat will give us a sense of what customers think about the wholeexperience, if there's another pain point that comes up commonly, and ifcommunicating with moving companies to figure out details really was apain point.We'll also want to reach out to customers who leaked from the funnel atthe phone-call step to see what was painful about that step. Thoseinterview questions will be similar, but we'll ask questions about whatthey did to book the move instead of using Moover and what about thephone-call step specifically caused them to choose that alternative.After doing these customer interviews, if in-app messaging still lookslike the biggest pain point, we'll look at the development effort neededto build it. If it's fairly low, we'll just build it. If it's high,we'll implement a Wizard of Oz MVP next. The customer will send amessage, we'll contact the moving company on the customer's behalf, andwe'll reply to the customer on the company's behalf. We'll run thisexperiment for a while and see how the NPS numbers change and if anycustomer explicitly comments on the in-app messaging. Then we'll usethat data to decide if we should build this feature for real.Chapter Four TipThis chapter's tip comes to us from Nik Laufer-Edel. Nik teaches atProduct School and helped design the curriculum. Beyond Product School,Nik leads the core passenger-experience team at Lyft. Previously,leveraging his background in design and research, he led the initiativeto reimagine the online learning experience at Udemy, a13-million-student marketplace worldwide. He loves discussing theproduct-discovery process, learning science, communication design, andthe future of work, and you can find him in coffee shops across SanFrancisco or on Twitter \@nikdotca.You Need Context to Make Good Product DecisionsAt the end of the day we know what's most important is focusing onhelping our users win. To do that we know we first have to understandour users. We know we should validate our riskiest assumptions. We knowwe should gain confidence that our problem makes sense to work on andthat our solutions actually solve the problem. But there's more we needto know to make good product decisions.Over the years, I've designed a simple customer-journey model to remindmyself of the context needed to define problems and evaluate solutions.The base of the model came about during two years I spent doingcustomer-development research at an early-stage start-up. It's evolvedsince to incorporate some of the research around motivation theory aswell as concepts discussed in the realm of the Jobs to Be Doneframework.!(Images/PRSC_c4-graphic.jpg)Assuming you're not trying to create an entirely new behavior, the modelacts as a reminder that your users already have a perspective on theproblem you're solving, a way in which they measure success, and a meansby which they work towards that desired state. These are the basicbuilding blocks of understanding users and today this information isoften captured in personas, metrics, and user flows. What can be missingfrom these artifacts is what motivates users to make progress towards adesired state and what holds them back.You can use this model of the customer journey as your North Star whenarticulating or reflecting on any product initiative.Current State- What's the users' current perspective of the problem? How do they think and feel about it?- Journey- What are the current steps they take? This is often the flow of your application but might also include taking steps outside of your app or using competitors.Motivation- What about the current solution are they not happy with?- What about the new solution is uniquely appealing?- Do they believe that following the journey will get them to the desired state?- Do they believe they have the ability to do what will be asked of them at each step?- Do they believe they will be supported if they run into problems?Hinderances- What about the current solution do they like?- What about switching to the new solution worries them?- Desired State- How do they measure success? What is winning?- How does getting to this state move them closer to other, larger goals?I start all initiatives by drawing out the model to align the team anddevelop research questions. For mature products and iterations onexisting features you may already be able to speak to all parts of themodel. For new products or features you'll discover gaps in the team'sknowledge or risky assumptions to tackle through internal or externalvalidation. Ultimately, understanding what winning is for your customer,their current situation, and the factors that will help them or hinderthem from making progress will equip you and your team to make betterproduct decisions. Good luck!Finding and validating the right opportunity to work on next has gottenyou to the starting line of the product-development life cycle. Now weneed to run the race and actually build the product. In this chapterwe'll look at how to transition from an opportunity to somethingactionable, and in Chapters 6 through 8 we'll dive into the entire "getit built and launched" process.Fundamentally, this chapter is about an important PM softskill-communication-and how to effectively communicate, discuss, andfinalize the opportunity you've found with key stakeholders.Why New Ideas StruggleA product manager's job includes anticipating what might cause theproduct to flop and addressing that risk up front. The biggest reasonnew products struggle isn't a technical reason-it's because customersdon't want or need the product you end up building. In other words, ithappens because you don't achieve product/market fit. Fortunately, thereare things you can do to give your product the best possible chance ofsuccess.Taking steps to validate your idea, like we went over in Chapter 4, willhelp get your product started the right way, as you'll have made surethere will be some need for your product or feature-from this pointwe'll say "product" for simplicity. But numerous issues that might cropup and prevent your finished product from achieving product/market fit,as you go from "idea that we believe customers want" to releasedproduct. It's your job to anticipate and prevent these issues beforethey cause harm to your product.Here's an example. What if there's a hidden barrier you never learnedabout or addressed that prevents customers from using your product?Remember the Kano model from Chapter 3? There are often basicexpectations that a customer won't explicitly mention, but if yourproduct is missing those features, the customer will be unhappy andmight not even use it. Imagine if you booked a hotel room and there wasno bed. Or toilet paper. Or sink. Would you stay or would youimmediately go to another hotel? Early test phases with key customers asyou build your product can help make sure you don't miss a hiddenbarrier.But hidden barriers are just one thing that might prevent you fromachieving product/market fit. Other obstacles include the following:- It takes you so long to build and release your product that your customers' needs have changed or they found a better solution.- Your product has so many features, new customers can't figure out how to use it, quickly getting frustrated and abandoning it. Or if you're adding a new feature to an existing product, perhaps it ends up being hidden where no one finds it.- The product's value wasn't even clear in the first place, and customers didn't purchase it because they didn't realize it would address their needs.To be fair, you won't be able to anticipate every possible obstacle, nordoes anyone expect you to-that's what iteration is about. However, asyou start to build your product, there are steps you can take that willgive your product the best chance of success possible. These steps startwith writing a few key documents that will help you clearly establishyour goals and desired outcomes, create empathy for your customers, andallow for clear communication with stakeholders. Those traits combine tohelp you and your team make smart decisions as you build your product,giving it the best chance of success.Working Backwards by Imagining the FutureBuilding something new involves imagining the future and making ithappen. We frequently find it useful to start development on a newproduct by describing what the world will be like when the product'sdone. Imagine you're writing a science fiction story about a near-futureworld with your product.There are two great "imagine the future" documents to try writing beforeanyone's written a line of code. These documents are a press release anda product review. Amazon often has its product managers write a pressrelease when starting development. But press releases are internallyfocused, and they cover how you imagine talking about the product whenit's done. Writing the product review you want to receive beforestarting development forces you to think about how you want the productto be perceived externally when it'sdone.Both of these documents are useful to write, as they help answer keyquestions up front and help communicate with key stakeholders. When youstart to build a new product, writing these documents forces you to takeyour product ideas out of your head and get them down on paper, makingit much easier to share your ideas with other stakeholders. Furthermore,writing down your ideas will help ensure you have initial answers forimportant product questions like, "What are the key features customerswill care about that we'll want to promote?"Over time, as you build out the product, come back to the review and thepress release, and update them whenever you're at a critical decisionpoint. How do these documents change if you choose not to build aspecific feature, for example? If you're unhappy with how your review ischanging, what can you do to get it back on a good track?Writing an Internal Future Press ReleaseWhile not the most fun prose-wise to write, writing a press releasebefore you start product development forces you to explicitly write downyour target market, the problem you're addressing, how you're solvingit, and the key features of the solution-succinctly, in less than apage.Sharing the press release with stakeholders, including the engineeringand design leads, will also help you start to uncover any internalbarriers and figure out what questions you need to answer before theteam can start fully building this product. Perhaps this product relieson building a new piece of technology, and you need the engineeringteam's help to build a prototype to see if it's even technicallyfeasible. You'll need to find time on their schedule, and that prototypewill be a milestone towards the overall project, affecting the releasedate even before you've started planning the project.Writing a press release will also help you start to determine how youcommunicate the product's value to customers, along with how customerswill find and get started using the product. You'll likely change bothof those as you actually build the product, but thinking about them upfront helps address two major reasons products flop.Furthermore, it's one final validation step to make sure this is reallywhat you want to do next. If you're not excited to write this pressrelease, and no one is excited to read it, are you working on the rightopportunity? Is there something else you would be excited to write, andexcited for customers to read?Similarly, ask yourself if the product described in the press releasereally will help you hit your goals. You could try writing a pressrelease as if you achieved your goal. For example, if your goal is togrow your engaged customer base to a certain target number, write apress release about how you've hit that milestone and the role thisproduct played in hitting it. If the press release feels contrived orvery hard to write, then perhaps this product isn't the right thing tobuild to help you achieve your goals.A basic product press release usually includes these elements:Headline: If you were to tell your friendabout this product in a sentence, what would you say? Included in thatis the key target market, how it helps them win, and a tentative productname that the target market can understand. Sometimes you will need twosentences, in which case you should write a headline and a subheading.Summary paragraph: The first fullparagraph in your press release should call out the most importantaspects of the product and how it solves the customer's problem. Imagineyou're reading this press release on Flipboard or Apple News-mostpeople will read only this first paragraph, so it needs to be concisebut complete.Problem and solution: The next sectionshould elaborate on the problem and your solution in more detail.Spokesperson quote: Include a quote from you, the product manager,about how this product is great for your customers. It's fine to includethis in the solution text.Customer quote: Include a quote from afictional customer about how the product fits into his life.Conclusion/how to get started: Explainhow new customers can find/sign up/buy/use this product, and pulleverything together with a call to action.If you find you need to write more to help make your thoughts about theproduct clear, especially around issues that relate internally to yourcompany and how you'll get the product built rather than around issuesrelated to the customer, then also write a product FAQ document.Writing a ReviewThe other "imagine the future" document you might write at the start ofthe project, especially for a major new version of a product or abrand-new product, is the review you want your product to receive.Imagine if Recode, or whomever is appropriate, were reviewing thereleased version of your product-what would they say?In a press release you think about how you want to talk about yourproduct, but a review forces you to think about what customers will hearand how they'll experience the product. Therefore, this is where youneed to be honest about what tradeoffs you're willing to make with theproduct. Maybe your product will be amazing but also pricier than thecompetitors. The reviewers will call this out-Are you OK with that? Ifnot, and you start taking steps to reduce its price, what tradeoffs willoccur? Will you need more customers to make up for lost revenue? Is thatachievable? Will you need to reduce the feature set? What impact wouldthat have on the review?Similarly, what parts of your product do you think a reviewer will focuson, and which will they ignore? The parts you discuss the most are theparts where you'll later spend most of your design and engineeringeffort.Mostly importantly, the review should have a conclusion about why acustomer should buy your product, especially over a competitor's orwhatever the customer is doing now. This conclusion should reflect theunique, differentiating value your product offers. If it's somethingminor, such as identical features at a slightly lower cost, then yourproduct might struggle to stand out-if a competitor has a sale,there's suddenly no difference in your products, and you'll be seen as acopycat.Writing that conclusion will force you to connect the concepts in theprevious three chapters: What are your company's core competencies? Howdo those connect to this opportunity? For example, especially at first,Google Docs was much more limited than Microsoft Word. But it wascloud-based, collaborative, and platform-agnostic-in addition to beingfree. Those three factors are how Google used its strengths to build adifferentiated word processor. If it had been a free app you downloadedand installed on your Mac or PC, a review would've concluded that it wasa very limited free word processor, and that's it-that productwouldn't have taken advantage of Google's strengths.Just like your press release, your review should be concise. Mostproduct reviews don't exhaustively look at every feature. They givecustomers enough information to help them know what problem the productsolves, if it solves the problem well, what tradeoffs the product has,and if they should buy the product.Defining a Minimum Viable ProductClearly defining the MVP you want to ship and working backwards todetermine how to achieve it is another way to help set your product upfor success. In Chapter 4 we talked about using one type of MVP-simpleones hacked together and not built like the actual product-to validateyour opportunity hypothesis. Now let's look at MVPs from a "what will weactually build?" perspective.As you wrote your press release and product review, you were forced topick out the most important parts of your product to talk about. Thesingle most important aspect of your product, the one that delivers thereal value for your customers, is the starting point to define the MVP.You'll prioritize building that part first, and at some companies thatwill also be the initial product you release.Before we go further, let's clear up a big misconception about MVPs.Minimum doesn't mean bad. Your product is still going to be designed andengineered well, tested thoroughly, and, most importantly, it willdeliver value to the user. It should be a product that people arewilling to buy and use. Even if it's not fully featured, it should workwell enough that it becomes your customers' go-to solution.Imagine a product that has only one button. It's easy for customers touse this product, because their only option is to press a button. Nowimagine you add a second button. Suddenly the product is a lot harder touse because customers have to choose which button to push. Every buttonor feature you add increases the friction for customers-it makes themhave to think more about what they're doing.Minimum simply means the fewest buttonsor features you need to build to deliver the most important value. Thisprevents you from building features that no one ends up using, or,worse, making the product so complex a customer doesn't use it at all.In an ideal world with lean methodology, you'll release your MVP to realcustomers and then determine what to do next based on what they'reactually doing with the product and what limitations they encounter. Inother words, you're always just building MVPs and iterating.Unfortunately, we often end up in non-ideal situations where we iterateless frequently, like building a major new version of our product, andwe'll be expected to ship more than just the pure MVP. In these cases,defining the MVP will help you prioritize the pieces you absolutely haveto build to deliver on the product. For the beyond-MVP features, ratherthan arbitrarily picking features to build, test your MVP with keycustomers before release. Then, use their feedback to figure out whatextra features to prioritize. Even though the end release will be morethan an MVP, this approach helps you use an MVP internally, effectively.So how do you come up with your MVP? Using your press release andproduct reviews as a guide, let's make a list about your product.1. Write down the overall thing you're doing and why you're doing it. That is, what value will it deliver for your customers and what goal will it help you achieve? Explicitly put this statement at the top.2. List the features you think you need to achieve that top-level goal, along with why that feature's important. Rather than just writing "cloud data store," write "cloud data store so that customers can access their data from any device." Now here's the kicker: as you work on this step, you're not allowed to add any new feature category not listed in the press release and product review. You'll define each feature in more detail (e.g., you might need a way to log in, so that people can access your service, and a way to reset passwords), but you can't add something major. For example, if you wrote a fictional press release about the iPhone 5S and never mentioned Touch ID, you can't suddenly list Touch ID as part of the MVP. Whether you realized it or not, writing the press release and review helped you prioritize the most important parts of your product, which in turn helps define the MVP.3. Go through your feature list and cross out whatever items customers don't actually require to address their core need. This step is the really hard part-MVPs should be uncomfortable. You as the product manager should feel like the MVP is not feature-rich enough, but there should be enough functionality that customers can accomplish their goals. For example, even though two-factor authentication is more secure, is it really critical to your customer or can it have a lower priority? Eliminating features might even eliminate certain personas from using your product. That's OK, as long as it doesn't prevent your key target market from using the product. If your product is very risky, such as relying on technology engineering hasn't built yet, you might even define a "single use case MVP," which can be used by only one persona for one situation-a risky one. If the MVP works for the key market, then over time you can build the needed features to support more personas.By the time you're done, you should have what you believe is a clearlydefined MVP, along with explanations about why each feature is part ofthe MVP.MVPs, Plussing, and the Kano ModelWe love MVPs because they let you focus on delivering a product yourcustomers want and will use. But remember, minimum doesn't mean bad. Youneed to be continuously seeking ways to make sure what you're doing isgreat. In Chapter 3 we talked about the Kano model, and we introducedthe idea of delighter features, features that customers don't ask forbut that deliver a huge return in customer satisfaction.As you're defining your MVP, it's easy to inadvertently dismissdelighter features as non-essential work, after all, customers aren'texplicitly asking for them. But it's your job as a PM to advocate and tokeep these features part of the MVP when possible, as they're criticalto building innovative, differentiated products that your customerslove.To help you think about these features, we want to share an idea fromWalt Disney. He came up with the idea of "plussing," which is simplyfinding ways to make a good idea great and to deliver beyond what peopleexpect. Sound familiar?Disney historian Les Perkins tells a story from the early days ofDisneyland. Walt was holding a Christmas parade, which cost $350,000.His accountants begged him not to spend that money, because people wouldalready be in the park. Walt's reply was, "That's just the point. Weshould do the parade precisely because no one's expecting it. Our goalat Disneyland is to always give the people more than they expect. Aslong as we keep surprising them, they'll keep coming back. But if theyever stop coming, it'll cost us ten times that much to get them to comeback."To this day, The Walt Disney Company's culture has integrated plussingin everything they do. At a park, a cast member might go out of his wayto unexpectedly help your family skip a long line, and this unexpecteddelight makes your day even more awesome. The sunken ship and sharksexplosion sequence in Finding Nemo wasa lot of fun, and the final shot with two birds sitting on the watercompletely plusses it (we're not going to spoil the surprise in case youhaven't seen it). The results of continuously delivering more thanpeople expect, in both revenue and customer satisfaction, speak forthemselvesWhen you're defining your MVP, an extra filter as you're cuttingpotential features is to ask, "Does this plus the core idea?" If itreally does, spend some extra time considering if you should cut it ornot. Conversely, if you're struggling to find ways to define delighterideas, ask yourself, "How could I plus this?"While plussing is arguably not fully in line with lean thinking, you'lllikely discover that plussing your initial MVP is key to buildingproducts that customer's don't just use, but also love.Next, let's look at how to effectively discuss the MVP and the projectas a whole with other stakeholders.Communicating via a Product Requirements DocumentOne of the most importantly tools to help you communicate is awell-written product requirements document (PRD). A PRD is an explanation of the specificproduct you're building. It clearly explains why you're building thisproduct, both for your internal goals and for your customers, along withthe exact scope-the features and functionality-of the product.Similarly, it should convey what you're not building.For better or worse, PRDs have become a controversial topic in theproduct-management world. In very waterfall-oriented companies, a PMwill spend a long time writing a very detailed PRD. These hugedocuments, often 20 pages or more, specify every aspect of a product upfront, they are difficult to read, and they are essentially immutableonce finished-this is what the team is going to implement no matterwhat. Advocates of lean methodology use the PRD as an example ofeverything wrong with waterfall development. Specifically, they believein quick iteration and using new knowledge to plan what to do next, andlong and detailed specifications for what you'll do are contrary to thatapproach.We believe that a PRD, if done well, is a fantastic communication tool,and we're going to help you create effective ones that others will read.Furthermore, we view a PRD as a living document. You'll update it as theproject progresses, documenting changes in scope along with keydecisions and fleshing it out with relevant information like user designtests. Unlike when product management first emerged and people createddetailed PRDs before a project began, we believe that the PRD isfinished only when the product's released.The PRD is a tool for everyone involved in the product. At first you'lluse it to get all the key stakeholders on the same page and help theteam understand the project. Having an initial PRD can be reassuring andinspire confidence in your project, as it's clear to others in thecompany that you have an idea for where to take the project. We believethat, throughout the project, the PRD should be the project's homepage-or at least the very first link on the project's homepage. As younear release, your support and sales teams will use it to find outeverything they need to know about the product. And when you're done,it's a historical reference for why you made certain decisions.We should mention that you won't need a PRD-or an imaginary pressrelease/product review-for every opportunity you pursue. A bug fix,for example, won't need a PRD. There's no exact division as to when youdo and don't need to write a PRD. Our recommendation is to write one forany opportunity that is more of a project, involving communicationbetween various teams and potential confusion rather than a clear, smallchange.Let's look at what goes into a PRD and how to use it as a communicationstool.Breaking Down a PRDThese are the key sections in a PRD:Title: Give this project a distinct name.Change history: Provide a description ofeach important change to the PRD, including who changed it, when, and inwhat specific way.Overview: Briefly, what is this projectabout? Why are you doing it?Objectives: What will this let thecustomer do? What are our high-level internal goals for doing thisproject?Success metrics: What are the successmetrics that indicate you're achieving your internal goals for theproject?Messaging: What's the product messagingmarketing will use to describe this product to customers, both new andexisting?Timeline/release planning: What's theoverall schedule you're working towards?Personas: Who are the target personas forthis product, and which is the key persona?User scenarios: These are full storiesabout how various personas will use the product in context.Requirements/features in: These are thedistinct, prioritized features along with a short explanation as to whythe features are important.Features out: What have you explicitlydecided not to do and why?Designs: Include any needed earlysketches, and link to the actual designs once they're available.Open issues: What factors do you stillneed to figure out?Q&A: What are common questions about theproduct, and answers to those questions?. This is a good place to notekey decisions.Other considerations: This is a catch-allfor anything else, such as if you make a key decision to remove or addto the project's scope.The exact format of a PRD varies company to company, but the overallcontent is similar. Let's dig into each section in more detail.Title and Change HistoryThe PRD's header contains the title, which is a unique, identifying namefor the project. This might be a code name or it might be somethingsimple, like "Moover Web App" for the first version.The change history is just a way to quickly tell if there's newinformation so that readers don't have to reread the entire documentonly to find out nothing's changed. Some wiki tools have automaticchange-tracking widgets, so if you're writing your PRD online, thissection is automatically written for you.Overview and ObjectivesNext, you write an overview paragraph that will be very similar to thefirst paragraph of the press release you wrote. It will describe whatthis project is and why you're doing it now. You'll also create a shortbulleted list explicitly listing what you want the customer to get outof this project and what internal goals you're trying to achieve-yourobjectives.Success MetricsYou'll also explicitly list the most important success metrics, the keyperformance indicators that you will need to be able to measure tofigure out if you've achieved our goals.As you start to write the PRD, you might find you have a general senseof your goals (increase the number of users), but not necessarily adetailed goal (increase our user base by 10%). Write whatever you canand add some placeholder indicator, like "???" if you're not certain orneed to more clearly define something. You will also call out thisuncertainty in the "Open Issues" section.New PMs often make the mistake of listing every possible metric theycould measure. Instead, focus on the key success metrics you want towatch for, and later in the PRD as part of the features section orwithin the Q&A, list the specific metrics you want to measure that willaffect the success metrics.MessagingMessaging is how you'll explain the product to a current or new customerin a short sentence, and we'll cover it more in Chapter 8. It's quitelikely that your product messaging won't be clearly defined at the startof the project. Take a stab at writing something, indicate it istentative/uncertain, if it is, and add figuring out the exact messagingto the "Open Issues" section.Timeline/Release PlanningEven though you're most likely not acting as a project manager andowning the project schedule, you'll want to include some rough timinginformation here and eventually provide a link to the full schedule.Maybe your marketing and sales team want to release the product for aholiday push-this means it needs to be for sale by mid-November.Knowing that date might significantly impact your development planningand how much you're able to build and test in time.PersonasCall out the key personas this product is intended for. If you havepersonas defined elsewhere, link to the full personas and remind thereader of the key traits in the PRD. If they're not fully definedelsewhere, define them here so a reader understands what the eventualcustomers will be like, and their goals.User Scenarios and StorytellingNow we come to the secret sauce of our PRD format: user scenarios. Webelieve user scenarios will help you write PRDs a cut above everyoneelse's, making people want to read them. In a user scenario, you'llcombine personas, customer development, and empathy to writefull-paragraph stories about how your customers will use your product indifferent scenarios.Stories are the oldest form of entertainment we have, and scientistshave argued that narrative experiences are the basis for far more of ourlives than systematic logic. Think about the last bad presentation yousaw. Chances are the presenter had slides chock-full of bullet pointsand just read each one. After three minutes, you were checking youremail, daydreaming about being anywhere but in that seat. And when youlooked at the bottom of his slides and saw "3/101," you started prayingfor a fire to get out of the room. Poorly presented content can makeeven the most fascinating of subjects boring.Conversely, think about a TED Talk. These presenters easily hold yourattention for 15--20 minutes and make you want to hear more. Each startswith the presenter sharing a personal detail about her life, and theslides, if there are any, are images with no text. Instead of readingbullets, we listen to the world the presenter crafts for us and imagineourselves in it. TED Talks are formatted as stories, and these storiesengage our brains.There's scientific evidence that our brains are wired to think instories, not lists of bullets. Scientists have found that just reading alist of bullet points activates the language-processing parts of thebrain (Broca's area and Wernicke's area), but when we read a story,areas in the brain that we'd use when experiencing the events are activated, too. If we read about aperson walking down the street, the same parts of the brain thatactivate when we walk down the street will activate. Stories let usimagine another's experience.One of the big reasons a product manager needs to communicateeffectively is to make everyone on the team empathetic with the customerso that they can clearly understand the customer's needs and how theproduct fits into his life. Writing stories to talk about the customerand the product you're building is the most effective way to help yourteam empathize with the customer because it makes your teams' brainsbehave as if they're the customer, implicitly communicating the resultsof your customer-development work.Storytelling also provides a way to take vague opportunities and rawdata and make sense of it. When we're young, we're taught that there'sone right answer to a problem. 2 + 2 = 4. Even in English class, we'retaught to write to one right answer: write an intro, hypothesis,supporting data, and conclusion. The way most schools work are a relicof preparing students to work on assembly lines where there is only oneway to do each task.Product management isn't like that. We have a lot of seeminglydisconnected data that we have to weave together to create a productnarrative. And there's not always one perfectly clear, right answer forevery problem. Instead, we want to focus on the customer's underlyingneeds and motivations to make sure whatever answers Design andEngineering come up with will solve the problem. Stories are aneffective way to give meaning to data and to express that need in anunderstandable way. They let us imagine a world that doesn't exist andthink about the steps we'll take to get there-which is also usefulwhen crafting a product roadmap.Writing user scenarios is a great way to turn a list of customer needsand product requirements into a format that others will understand andwant to read. Storytelling will help you not only craft great PRDs butalso give effective presentations, explain your product clearly, andmore.Crafting Great StoriesFortunately, good stories aren't hard to write! By reading books,watching movies, and just being human, you already implicitly know howto tell a great story. Let's make that knowledge explicit. All storieshave a similar structure. They first give you context: they set up theworld. For a user scenario, who's the persona? Remind us quickly aboutthe customers that persona represents. What situation is he in? What arethe key details we need to know-Is he in his car? Holding a baby?The transition from the setup to the next part of the story, action, isthe "inciting incident." The inciting incident is when conflict showsup. What problem causes the persona to need your product, or to need aspecific feature in your product if he was already using it in thesetup? Why does he think to use your product? If he's a new customer,how will he find/buy your product?Now is the action section. This is where "stuff" happens. When thepersona is using the product, what's he doing? What happens as he triesto use it? What roadblocks or conflicts does he encounter while tryingto use the product, and what product features help him eliminate thoseroadblocks? In a user scenario, this is where you'll justify why variousother features are important.Finally, what's the result? Now that he's addressed his need, how doeshis world change? It's fine if it's a small change, not every product issaving the world. "Having scratched his itch with the Acmebackscratcher, Jeff puts his backscratcher down within easy reach,knowing it's the perfect tool to scratch his back." Hopefully you seehow even that simple result implies that we'll achieve a customersatisfaction/engagement goal in the end.Setup. Action. Result. That's it. The challenge is in the execution! Asyou write the story, include the relevant details to help a readerimagine the situation you're describing, but just like when writingpersonas, you don't need to include every possible detail. If you're notsure what to include, start by writing a detailed story and then begineliminating details. If the overall meaning doesn't change and thecustomer need/how the product addresses it is still clear, then youlikely don't need those details.Write your stories so that if a customer in your target persona were toread it, she'd go, "I've been in that situation before, and this productsounds fantastic!" Also, your customers likely don't know your jargon,so avoid using it as much as possible. This will also help otherstakeholders to understand the story clearly-there'll be no ambiguitybecause you used jargon they don't recognize.Last, as we've mentioned before, be authentic. You want your stories tobe real and believable, as that will help you figure out your potentialweaknesses, both in terms of execution and where your customer mightencounter friction. Once you know your weaknesses, you can take steps toaddress them!Like product management, crafting great stories is easy to learn but cantake a lifetime to master. Keep using stories for your PRDs,presentations, and more, and you'll become a better and betterstoryteller.Writing User ScenariosIn a PRD, you'll likely write multiple user scenarios covering differentpersonas and their use cases. Your MVP definition will help you figureout the most important stories to write and what features to focus on inthose stories-each use case or major aspect of a use case will be oneuser scenario. If you find yourself not mentioning features that are onyour MVP list, adjust your list accordingly. Everything in your MVP listshould be in the user scenarios, but not every feature called out in theuser scenarios will be part of the MVP. If you narrate how each featurewill help the user win-that is, how will customers will use it toaddress their problems-you'll make the feature's value clear to yourreaders. For new products or features, don't forget about the onboardingpart of the user scenario: How will a customer first encounter thisproduct and learn to use it?There are three key tips to keep in mind when writing user scenarios.First, remember that your goal is to make readers feel like they'resitting next to each persona, using the product in each scenario.Provide the relevant detail so that readers know what's going on in thecustomer's life when they use the product, but don't drown the reader inunnecessary detail.Second, you want these stories to be as truthful as you can imagine, asbeing authentic will help you get the best possible understanding ofyour customer so that you can make smart product decisions-we'rereiterating this because it's that important. If one of your productrequirements is a 100-page user manual, is that reasonable? When was thelast time you read a product manual? Why should we believe thecharacters in your user scenario will read a long manual?We once read a PRD where each user scenario ended with "and then thecustomer tells all her friends about the product and everyone buys one."While it's nice to have a happy ending, that wasn't authentic about whatpeople actually did! Instead, try to be realistic about what impact eachpersona's product use will have related to your goal. A realisticstatement is, "Because this is an ongoing problem and the customer wasso happy with our trial product, she signed up for the monthly plan."Being authentic can also help you eliminate unnecessary productfeatures. If you find yourself trying to force what you thought was akey feature into the story, that's a great hint that the feature isn'tessential.Last, do not define in too much detail or be too prescriptive about whatthe solution entails. As we'll discuss more later, we want to leave thePRD focused on goals and requirements rather than specific solutions toa problem. Design and Engineering will figure out the right solution tohelp the customer achieve her goals and to meet your requirements. Forexample, rather than describing how a customer turns a doorknob on arestroom door to leave, describe how the customer exits the restroomwith clean hands. Maybe Design will conclude that using her foot to openthe door is a much better solution than a doorknob in this case. Beingprescriptive to Design or Engineering is an easy way to get those teamsannoyed with you-you need to trust them to do their jobs.Requirements/Features In and Features OutNext up in the PRD structure is a feature list, which is sometimes alsocalled a list of requirements or, more confusingly, user stories (theseare not actually stories). This section is a list of what featuresyou're going to build into the product, ideally with some roughprioritizing around essential, reallywant, and nice to have.You already have the basis for this: your MVP definition list. Each ofthe items on your MVP list should be prioritized as essential. Your userscenarios will provide the rest of the list-go back through them andexplicitly break down the prose into tasks. Note that the prioritizationlabels aren't set in stone. As you develop the product and share earlyversions with customers for feedback, your feature prioritization willlikely change.It's OK if you don't have the full knowledge for how to break down thetop-level tasks into specific subtasks. When you share the PRD with thedesign and engineering leads, you can work with them to break down eachitem into more specific user stories.Just like the user scenarios, you'll want to avoid being prescriptiveand instead focus on goals and requirements. An easy way to do that isto write each item in this format: "As a persona, I want specificfeature goal so that reason." Some PMs prefer to use theGiven-When-Then format: "Given somecontext, when some action is done, then a set of observablebehaviors happens." While Given-When-Then makes it easier than otherways of writing requirements to tell when the user story is implementedcompletely, be careful, as the When and Then blocks can easily becomeprescriptive.Regardless of what format you choose for your user stories, it should beclear what the feature will do and how to measure success/properimplementation of the feature.We've found it also useful to explicitly list "features out"-that is,what you're not doing and why. For one, multiple readers might ask aboutadding a feature/supporting a use case, and this preempts the question.Second, if you choose to reduce the scope of the product and cut out afeature, you will note the feature, that decision, and the date on thislist. This list can also be a source of inspiration for the next productiteration. It's also a great place to write down suggestions others giveyou that don't fit in the current scope so that the people who made thesuggestions feel like you listened to their feedback.DesignsHaving defined the product's requirements, in the design section youstart to look at the solutions. Even though you don't want to beprescriptive, sometimes it's effective to create a low-quality,high-level "napkin sketch" of a possible design to help everyoneunderstand what you're talking about. A picture can be worth a thousandwords! The design section is the place to include those sketches.We'll cover working with the design team in the next chapter, but werecommend making these sketches very rough so the designers don't thinkyou're trying to do their job! And even if you were a designer beforebecoming a product manager, you'll want to make your sketches rough. Youneed to trust that the design team will do a better job designing asolution than you will. You'll add links to the actual designs as theybecome available.Open Issues, Q&A, and Other ConsiderationsThe last few sections in the PRD are a catch-all. Especially on yourfirst draft, there are likely some parts of the project you're unsureof, from what your specific success-metric goals are to if you shouldinclude a use case or not. Note these questions under Open Issues.As you discuss your PRD with others, you'll find some common questionscome up again and again. Include a Q&A to provide the answers. If youcreated a product Q&A to go with the press release, you might alreadyhave a good start to this section! The Q&A is also a great place toaddress edge cases-how will you handle them?The last part of the PRD is a general Other section in case somethingcomes up that doesn't fit anywhere else. As you write the PRD, werecommend including all of these headers even if the only content is"nothing yet" so that they're there when you need them.Using a PRDNow that you have a PRD, here's how to use it to get stakeholder buy-inand as a tool for communication with your team/company.We recommend you write the first draft of your PRD in a private format,such as a Word doc or a non-public Google Doc. It will change the mostin the first few drafts, and you don't want someone stumbling upon itand panicking! You'll define the core of the product in these earlydrafts, and you want to make sure everything on the page is coming fromthe work you've done to identify, validate, and scope the opportunity.After you've written it, you'll start sharing it with others forfeedback. Even though you'll want to listen and address their feedbackcollaboratively, remember that product isn't design by committee. You'rethe person responsible for the product, and you should approach thesediscussions from a perspective of "This is what I believe is right. DidI miss anything?" as opposed to "What do you think we should build?"However, this does not mean you shouldapproach this sharing process as just telling people, "This is whatwe're building. Now, go do it." You'll want to solicit and addressfeedback, both to make the product better and to keep your relationshipwith various stakeholders productive and respectful.The first people to share your PRD with are leads and fellow productmanagers. People who have been at the company longer, have experiencewith the product, or have more experience in general might have valuableinsight to make the product-or the path to getting it built-better.Once your team is on board, engage the other key stakeholders, such asthe design and engineering leads. Again, view this as aconversation-you're seeking their feedback, and you'll incorporatetheir thoughts into the PRD. Perhaps the engineering manager will note atechnical issue you need to figure out, and you'll add that to the OpenIssues section. Or maybe the design lead will have an idea for asolution that changes the technical scope. Maybe the marketing lead willreally want you to have something for a certain release date. They mightalso ask you to break down one of your user stories into more detail tomake the project's scope explicitly clear.Sometimes you hear people say that a PM owns the problem, Design ownsthe solution, and Engineering implements it. We've found a much betterapproach is to define the problem and generate solutions together. You,the PM, might take the first stab at the problem's definition, but thatdoesn't mean what you write is perfect and that Design doesn't havevalid input. Similarly, if you used to be an engineer, perhaps you'llhave a valuable insight as to how Engineering could implement asolution. When conflicts arise, remember your core role and focus on theproduct's requirements, not how to build it. A lot of conflict comesabout when someone tries to do someone else's job, such as a PM tryingto design the solution or a designer wanting to change the product'sscope.After discussing the PRD with this group, you should all be in agreementabout what you're trying to build and why, along with what your keysuccess metrics are. You should have a basic idea about if the projectis feasible with the defined scope and on the desired timeline. You'llalso likely come up with various questions and answers for the Q&Asection, and the other leads might have ideas that impact the userscenarios and feature list.Now is the time to start sharing the PRD more broadly. If you have aninternal wiki, move the PRD to a wiki page and make that the product'shomepage, or, at the very least, link to it from the product's homepage.Start sharing the PRD with the teams who will be working on it. Be sureto incorporate their feedback, as people in the weeds day to day oftenhave valuable practical insights.Last, it's quite possible that you'll be asked to share the PRD with abroader group, be it at a company all-hands meeting or even at a boardmeeting. In this situation, don't read the PRD or your user scenarios tothe audience verbatim. Instead, distill the PRD down to the essence ofwhat you're doing and why, and present that information to the group.The press release you wrote can be a great guide. It's OK to call outspecific things to make the project's scope clear, but try to leaveplenty of time for questions.And while you're sharing the PRD with broader audiences, the design andengineering teams are starting to actually work on the product! In thenext couple of chapters we'll look at how you'll work with them toshepherd the product.Moover.io's DocumentsAfter validating the idea we came up with in Chapter 3, that Moovershould add in-app messaging so that customers don't have to play phonetag with moving companies, we're going to clearly define our ideas.We'll do so by writing an imaginary press release, working on an MVPlist, and then writing the PRD.Sample Press ReleaseMove on Your Schedule With Moover's Latest UpdateThe leading app-based moving service now provides easy in-appcommunication with moving companies.Moover, the iPhone app bringing moving into the smartphone age, is proudto release its latest update. This update removes the need to exchangephone calls and emails with moving companies, completely digitizing themoving experience. Rather than having to schedule a phone call and emailphotos back in forth, with Moover you can now message with each movingcompany in-app, dealing with questions and contracts at your convenienceto finish planning your move.Since its release six months ago, Moover has transformed urban moving.Instead of having to search out moving companies, call them, and dealwith an annoying game of phone tag just to get an accurate bid, Mooverbrings moving companies to you. Enter a few details about your home andwhen you want to move, and moving companies will compete for yourbusiness, with bids appearing in-app. The latest update simplifies theprocess by providing in-app messaging with each moving company so thatyou can share photos and address your home's unique traits. This newfeature ensures accountability and lets Moover guarantee that the bidyou receive is the price you pay.Product manager Jane Doe believes, "in-app messaging is the biggest winfor customers since we released Moover. It means you can provide answersto the moving company's questions when you're home at night, thinkingabout the move, instead of having to stress during the day to call themoving company at work between meetings."Recent customer John Smith tried a prerelease version of messaging and"started planning the move at 11pm, sent photos of the apartment twodays later at 2am, and moved the next weekend." He went on to share,"This is the third time I've moved, and even though I have morefurniture now than ever before, this was the first hassle-free move I'vehad."Download Moover from the App Store today to get started planning yourfirst hassle-free move.Sample MVP ListGoal: Add in-app messaging so thatcustomers cay stay in-app and don't have to exchange phone calls/emailswith a moving company to get a bid or complete a move.MVP Requirements- Initiate a conversation with the other party so that I can address questions to provide a more accurate bid or finalize the moving details.- See when there are new messages so that I know I have information to deal with.- Respond to messages to keep a thread going.Features We Removed from Moover's MVP- Send documents like photos, videos, and PDFs as attachments to further help avoid email while communicating beyond words.- See a history of all communication/attachments with each company for accountability and reference.Sample PRDHere's what the first version of a PRD for our Moover messaging featurelooks like. Notice how we call out an MVP with our prioritized-featurelist in the PRD, and it's definitely an uncomfortable MVP. However, thePRD doesn't just talk about the MVP features. It talks about a range offeatures to give a complete view of the product and how the productmanager expects customers to use all of the features together. Non-MVPfeatures just have a lower priority in the requirements list.As a product manager, you really hope Engineering will be able to dosome of the lower-priority features to make the overall messagingfeature more functionally complete. But, as long as you get thehighest-priority features done, all the personas will be able to achievetheir goals, even if it takes a little more work than if every featurewere implemented. This also gives you flexibility to release just theMVP version, get feedback, and then adjust what you're working on nextrather than building the entire PRD feature list before considering theproduct release-ready.TitleIn-App MessagingChange HistoryFirst versionOverviewOur mission is to be the Uber of moving companies, making it convenientto book a move on your smartphone. We've done a great job bringing thefirst part of moving to your fingertips-finding vendors and gettinginitial rough bids-but we've found that there's a second part. Despiteusing Moover, our customers still have to talk on the phone to figureout details, get exact bids, and finalize their moves. That means moveprep still has to take place from 9 to 5. We're going to bring thesecond part of the moving process into the smartphone era by addingin-app messaging. This will make it convenient for our moving companiesand customers to interact to plan details, allowing the moving companyto message from 9 to 5 and the customer to reply when convenient.Objectives- Improve customer satisfaction by continuing to reduce the hassle of moving- Increase revenue by having more completed movesSuccess Metrics- Improve the number of completed moves by a significant margin. Release PlanningSummer is a popular time to move, so we want to have at least the MVPdone by May. That gives us about eight weeks. Ideally we will releasethe MVP by April so that we have an iteration or two of the feature bythe time the moving season really starts.PersonasOur primary target is Ant Moving, our mid-sized moving company. They'rethe ones who will have to ask for more information, so we need to makethis easier for them than using the phone. Really Busy Rob is our secondtarget, our persona who doesn't mind paying a premium to use appservices over traditional services. We'll need to provide an intuitivemessaging/notification system so that he doesn't have to look up a helppage about how to talk with the moving company.User ScenariosAnt Answers a BidLinda is the office manager at Ant Moving. Ant Moving signed up forMoover when it first became available, and it's given the company a nicebump in its business: Moover is now promoting Ant to potential clients,without Ant having had to do anything more. Linda is happy with Mooverand is willing to be a first adopter on new features to help thebusiness keep growing.Currently, Linda gets an email from Moover when there's a new bidrequest. The email has the basic information for the bid and a link tothe Moover web dashboard. When Linda clicks the link, she's taken to awebsite that lets her reply to the bid, see its status: unanswered, bidsent, or customer accepted/rejected. She can then link back to a masterlist of all bid requests received and the status.If the customer accepts the bid, Linda then receives the customer'scontact info, and she can call him to finalize details and give a moreaccurate bid. Although Linda's bids are pretty good, sometimesunexpected things happen. Moover has the standard field for how manystairs are in each location, but it doesn't account for tight staircasesyou can't fit furniture down, for example.Now, with Moover's latest version, when Linda gets a bid request shestill looks over the basic information and clicks a link to open thedashboard. However, there's a new group on the customer page withmessaging information. Since she noticed the customer said he has stairsinside the current unit, Linda uses the messaging tool to ask thecustomer if he could take a photo of the stairwell and the roomsupstairs, with the furniture inside of them, so that Linda can look forany potential problems.Rob is the customer booking the move. He receives a notification thatthere's a new question waiting for him in Moover. He checks it and makesa reminder to take photos when he's home that evening. At home, Robtakes and sends the requested photos to Ant.The next day, Linda gets an email from Rob, via Moover, with therequested information. The stairwell looks quite large, with no sharpturns, and there's no obnoxious furniture upstairs that could cause aproblem. Linda determines her bid, provides it to Rob via the dashboard,and moves on to the next potential customer. Being an office manager ata moving company keeps Linda busy! She appreciates that the new Moovermessaging feature lets her not play phone tag with customers, too!Moover archives the conversation so that later, should Rob accept thebid and need to reference his photos, he can look them up on hiscustomer page on the web dashboard. Furthermore, Linda can continue theconversation with Rob since he accepted the bid, finalizing any details.If he'd rejected Ant's bid, Linda could see the previous conversationbut not initiate a new conversation. While that means she can't reachout later and offer him a coupon, it also provides her incentive to giveRob the best price up front.Rob Answers Ant's Questions and Asks for Insurance InformationLiving in downtown Metropolis, Rob loves app services. He uses Lyft toget around, Rinse for his laundry, and more. He's about to moveapartments downtown, and he's trying Moover for the first time.After downloading Moover and answering a few questions about his old andnew places, he sits back and waits to receive bids. The next day, hegets a notification from Ant Moving asking to see photos of hisstaircase and upstairs rooms. No worries-he takes the photos thatnight and sends them in-app to Ant. Ant gives him a bid, and it looksgood.However, that afternoon he gets an email from his landlord, remindinghim that moving companies have to meet a certain minimum insurancerequirement to comply with the homeowner association (HOA) rules, and hehas to provide a copy of the company's insurance certificate unless it'san HOA-approved mover. Ugh! Ant isn't on the approved list, but its bidis half the amount of the HOA-approved movers.Rob goes to the Open Bids section on his app, and creates a new messageto Ant. He provides them with the requirements, asks if they meet them,and asks if they'd be willing to provide a copy of their insuranceinformation for the HOA if so.Linda at Ant gets the new message notification and is prepared. She'shad this request from other clients. She double-checks the numbers, Antmeets them, and she replies with that confirmation. Since she alreadyhas a copy of Ant's insurance as a PDF, she attaches it for Rob, too.Rob gets a notification about this reply, and when he checks it he seesthat everything looks good. He even can open and save the PDFattachment. He accepts the bid and sends the insurance PDF to hislandlord and the building HOA to get the move process started on theirend.Linda promptly sends him the contract PDF. He saves it and signs itusing a PDF app on his phone, and he sends the completed contract backto Linda via Moover's message attachment feature. Rob's excited thatthis move just got real, and it was easy to organize at a great pricethanks to Moover.User Stories/Features/Requirements- P0: The minimum viable product. - P1: Medium priority.- P2: Low priority.P0Web Dashboard- As Ant Moving Company, I want to initiate a conversation with a potential customer so that I can ask any questions to provide a more accurate bid or finalize the moving details.- As Ant Moving Company, I want to see that there's a pending message so that I know I need to reply to a potential customer.- As Ant Moving Company, I want to read messages so that I know what a customer's asked/sent.- As Ant Moving Company, I want to respond to a question so that I can ask follow-up questions and send answers.Mobile App- As Really Busy Rob, I want to receive a notification of a new message/reply so that I know there is a pending message.- As Really Busy Rob, I want to be able to read a new message so that I know what the question or answer is.- As Really Busy Rob, I want to create a new message so that I can send messages and replies to each moving company.P1Web Dashboard- As Ant Moving Company, I want to see my conversation history with each customer separately so that I can easily remember what I talked about with this customer.- As Ant Moving Company, I want email notifications of pending messages so that I don't have to log in to the dashboard to know a customer just emailed me.Mobile App- As Really Busy Rob, I want to view my conversation history with each company so that I can remember what specifics I discussed with each and to retrieve my contract to sign when it's convenient.P2Web Dashboard- As Ant Moving Company, I want to see and save attachments so that I can see any photos a customer has taken of his space or view a signed contract.- As Ant Moving Company, I want to respond to a question with my own attachments so that I can send annotated images to request measurements or send contracts.- As Ant Moving Company, I want to see attachments in my conversation history so that I don't have to manually save and organize every attachment a customer sends.Mobile App- As Really Busy Rob, I want to send attachments so that I can quickly send a photo of my space and stuff rather than trying to describe it, along with returning signed contracts.- As Really Busy Rob, I want to receive attachments (JPEG, PDF) so that I can provide more specific answers and handle the moving contract in-app.Features Out- Cloud storage support for attachments: While it might be nice to save a contract to the cloud, open/sign it on another machine, and then send the completed contract via Moover, there are a lot of possible cloud storage systems we'd need to support to cover our customers (Dropbox, iCloud, Google Drive, One Drive, etc.). Plus if customers want this for only contracts, we should explore providing a standard moving contract that can be created in the dashboard and signed in-app, no attachments required.DesignsNone yet!Open Issues- Need to figure out exact success-metric goal- Need to figure out exact product messaging, especially for any existing customers who could benefit from messaging nowCommunication within your internal product organization is perhaps oneof the most overlooked, yet important, factors that determines thesuccess of your product. As product managers, it's easy to focus on thecustomer-facing side of defining the initial problem-and then, later,actually overseeing the buildout of the solution. But the portion ofwork and preparation in between can be the difference between a productproperly launching to address the actual problem, and going off trackbefore the build-out even begins.Clearly defining the problem and requirements through well-organizeddocumentation as described in this chapter is one way to properlyprepare your team. Consider supplementing your documentation with anexperiential immersion with your entire team.An experiential immersion is simply finding a real-world experience thatyour entire team can go through together that will allow you all toreally live through the problem you're solving for. Even if your teammembers are generally not your target market and aren't who you'redesigning your solution for, you should all become method actors andlive as if you were.In the case of Moover, your team could actually become a moving companyfor a day. Set up a simulated office for your moving company. Assignroles to different people-including those who play the customer. Spenda couple of hours doing the type of back-office work that you mightenvision at a Moover client moving company. If the Moover team were togo through this experiential immersion, they might start to get an evenkeener understanding of why the problem they're solving for needs to beaddressed. Or even better, it might bring up serious questions aboutwhether any of your core assumptions about the problem you're solvingfor should be reconsidered.How to do this?1. As a team, pick the core problem that you feel you're ultimately solving for.2. Identify a customer persona that experiences this problem often.3. Create a scenario where your team can "act" and simulate actually being the customer experiencing the problem.4. Allow your team to live through this problem together for a while-at least a couple of hours.5. Discuss as a team what it felt like to live the problem and whether any of your core assumptions have been even further validated, or need to be readdressed.So far, you've been responsible for each step in the product-design lifecycle. You've found and validated an opportunity, communicated it toyour stakeholders, and gotten everyone onboard. Now we'll shift into theexecution phase, which starts by figuring out the product's userexperience with the design team. A lot of thought goes into this phaseto ensure we craft a great product! Put another way, now that we'vefigured out we're building a house, we need to draw up blueprints andsketches, to figure out everything from where the toilets go, to howthick a wall needs to be to support the roof, to how we want todecorate.What Is User Experience Design?Put simply, user experience (UX) designis about how we interact and engage with the product. Because buildingproducts is fundamentally about making a new experience or making anexisting experience better, a good user experience is fundamental to agreat product. This includes everything from the box-if there isone-for the product, to how a customer achieves her goals within theproduct, to what the product looks and feels like.There are two primary approaches to design. The first is that thecustomer should adapt to the product, and the second is the productshould work in a way the user expects/understands. For a long time, UXtook a backseat to engineering. Because the engineers who built theproduct were also responsible for the design, the UX directlyrepresented how the product worked internally. In those cases, if therewas a design team it was relegated to making nice icons for theinterface the engineering team created. This is why many people thinkdesign is just about making something look pretty.People are adaptable, and this approach worked-and continues towork-just fine for many products, but the result is a product thatmost people don't want to use. Figure 6-1 shows an application where theUX matches the engineering. Each field and option in the UX mapsdirectly to the software's internals, and the result is a confusingmess. With some time and effort (and cheat sheets), we all could figureout how to use this product, but very few of us would want to.Over the past few years, the second type of design, calleduser-centered design, has become farmore popular, and it's what we'll focus on. In this type of design, theproduct's UX is a well-thought-out solution to help the end usereffectively achieve her goal using the product. Compare the design ofthe original iPhone to the Blackberry and other smartphones of the time,for example.In many ways, Apple's iPod and iPhone are responsible for the designpriority change. Mac OS put design front and center for years, alwaystrying to create a great experience, thereby building a loyal customerbase. But its market share was so small most people never had a chanceto appreciate what a difference a good UX made-software design onWindows tended to reflect how things worked internally. When the iPodcame out, its functionality was the same as that of many other MP3players, but its overall experience, from putting music on to it tofinding and playing the song you want, was so great it crushed thecompetition. (Figure 6-2 shows the original iPod's competition.) TheiPhone kicked this into high gear with an incredibly intuitive touchexperience. Even toddlers can use iOS. Apple's earnings reports show theresult of this focus on user-centered design.As people used the iPod, the iPhone, and other products with a greatuser-centered design, they came to appreciate how much easier theproducts were to use, letting them achieve their goals-from listeningto music to checking their voicemail-faster. People began to wantgreat experiences in all of theirproducts, whether it was HR software or a thermostat. When faced withtwo products that solve a problem, they often picked the better-designedone. Slack, for example, has seen exponential growth by taking a productthat's been around for years-group chat-and building a much betterUX around it. This trend has led to far larger design teams and makingdesign a full part of the product-development life cycle rather than anafterthought.Back in Chapter 2 when we discussed enterprise vs. consumer software, wementioned that for a long time UX design mattered very little, inenterprise products especially. As long as the product solved a problem,customers would adapt and learn how to use it. But as people started toexperience well-designed UX in the consumer products they used at home,they wanted better experiences at work. This had led to significantdisruption in enterprise software lately, with new, well-designed toolslike Basecamp replacing big, traditional tools like MicrosoftSharePoint.So what goes into making a great, user-centered experience? At a highlevel, UX designers need to understand the customers, come up with ideasfor how to address their needs, help define requirements for thesolution, and create a specification that they work with Engineering tobuild. This should sound similar to a product manager's role, and itabsolutely is. In fact, this is why some start-ups won't hire aPM-they feel a UX designer can do it all-or conversely a start-upwill want a PM to handle design tasks. However, the difference is in thedetails, and while the roles are complementary, they really do needdifferent skills!Product Managers vs. DesignersTo use an analogy, a PM is like the typical president of the UnitedStates and the lead designer is like the typical secretary of state.This fits nicely with Guy Kawasaki's claim that a product manager has"all of the responsibility and none of the power." The president willset policy goals and provide reasons he picked those goals, but it's upto the secretary of state to work out the details of achieving thegoals. The secretary of state will also make recommendations to thepresident to help him make good decisions and craft useful goals.Essentially, the president focuses on strategy and not tactics, and thesecretary of state is tactical. The president works with people beyondthe secretary of state, too, be it the secretary of education orCongress-he has to keep a broad view every day! And while thesecretary of state isn't responsible for education, she should stillhave some knowledge of the president's goals for the secretary ofeducation-she can't just work in a vacuum.The product manager owns and writes the product requirements and goals.She will lead the product requirements document (PRD), roadmap,cross-team communication, and sometimes even the budget to help get theproduct built. The lead designer will own the user-experience strategy:What UX do we want to create, both short-term and long-term, to helpdeliver the best overall product experience? However, the lead designerwill also likely do user research and come up with requirements. Herresearch can help the PM figure out what the final product requirementsare, and design will also be tactical and determine how to meet thoserequirements. Like the typical president, the PM will work frequentlywith every team, not just the lead designer, to shepherd the product, sothe PM will have to balance everyone's needs. And a good lead designerwill have a basic understanding of the product's business context sothat she's not working in a vacuum and can help the product managerunderstand tradeoffs for different design decisions.The Design Process and Key Design SkillsThe design process generally breaks down into six primary phases:1. User research2. Information architecture3. Interaction design4. Prototyping5. Visual design6. Content strategyEach phase requires a different dominant skill. While some of theseskills are complementary, you rarely find one person who's great atevery part of the design process. That means you usually have a designteam with different people specialized in each tactical element, or somecombination of elements.During each phase, you'll give feedback on the work the design teamcreates, answer questions about the project's requirements andcustomer/business needs for the design team, facilitate any neededcommunication with the engineering lead and other stakeholders, andshepherd the process along. One way to help keep things moving is byhaving a reoccurring Design/Engineering/Product meeting each week forthe project, but make it clear you're always available to answerquestions the design team has beyond those meetings.Let's look more at the typical design process and the types of designersyou'll encounter. The design process starts before you've written thePRD, as you work with the lead designer and a user researcher, if that'snot the same person, to figure out the right strategy and scope of youropportunity. Just like a product manager, a user researcher is focusedon understanding the customer, what his needs and goals are, what he'susing now to address those needs, and what we might do to make his lifebetter. The lead designer and a user researcher will often accompany youto customer interviews, and you'll work together to figure out the uservalue you want to deliver, business goals to focus on, and thefeatures/functionality you need to meet those goals and deliver thevalue. They will likely have valuable input to your PRD, and as wementioned in Chapter 5, take that input constructively.User researchers also help with user testing. That is, later in thedesign process, once you've built a prototype, user testing will helpyou learn how well the customer accomplishes key tasks using yourprototype.Once you've figured out what to build with a user researcher's help, aninformation architecture (IA) designerwill figure out how to model and organize the data we're working with.IA is very much a structure step, asking what information a user shouldsee first, second, and so on. IA might create a data model, explaininghow the underlying product will conceptually be presented to thecustomer, along with block diagrams expressing in what order to presentthe information. Figure 6-3 shows a sample IA diagram for Moover'smessaging feature.Interaction designers then take the information architecture and figureout how to present it in the product. They're the ones who focus on howa customer navigates through the product, what UI controls you use(e.g., should you use a slider or a text field?), how many steps ittakes to achieve common tasks, and more. As the skill implies, they'rethe ones really focused on how you use the product. It's quite common tofind designers who specialize in IA and interaction design. This is alsothe step where the engineering lead will start to get involved,providing the design team with feedback about the technical feasibilityof its designs.The most common delivery from this phase is a set of wireframes. Theseare rough, block diagrams showing how a user will interact with yourproduct, like we see in Figure 6-4 for Moover-we're showing only onewireframe, but typically you'll have a series representing various viewsand key interactions. Wireframes help you visualize where your customerswill find various pieces of information, how they will navigate throughyour product, and more. Wireframes are not interactive, and they mighteven be sketches on paper rather than digital assets.Design teams will often have prototyping experts who turn these staticwireframes into interactive prototypes using anything from HTML tospecialized tools like Balsamiq and InVision. Prototypes are incrediblyhelpful for three reasons. First, they help everyone working on theproduct internally to understand what you're building, be it people onthe direct team, your boss, or beyond. Having something visual is moreeasily understandable than a written PRD, and having somethinginteractive is even better. Second, the prototype helps Engineeringprovide more accurate estimates for how hard parts of the product willbe to build. Using a standard UI control might take minutes to implementwhereas a custom control the design team created might take days, forexample, and all the teams will have to discuss if the custom control isworth the time tradeoff. That decision will then affect the prototype.Third, prototypes help with usability testing.After prototyping, you will have a great idea of how the product willwork/flow, but you won't know what it will look like. Visual design isthe focus on how the product will look. Your team's visual designerswill often work in parallel with the people creating wireframes,establishing the overall look and feel of your product. They will createmock-ups, like Figure 6-5, usually based on the wireframes, that lookpixel-perfect but aren't functional. These mock-ups are designed to helpthe product's overall team gauge how everything will come together, andthe end product will visually look similar to the mock-up.Visual design is more than just making the app look pretty, though.Visual designers need to consider usability (e.g., is the font largeenough to read and are the buttons large enough to tap accurately on aphone?), emotions (conveyed through colors and icons), and consistentbrand messaging. Visual designers will often work with marketing tocreate a company style guide that influences everything from customerannouncement emails to the marketing website to the actual product.Sometimes visual designers and prototypers will create a higher-fidelityprototype using the mock-up and wireframes, giving the prototype a morefinished feel to help you judge the product more effectively.After you've created your wireframes and mock-ups for Engineering toimplement, a content strategist will help make sure your product isusing the right media and text, such as how to word an alert. Likevisual design, content strategy applies to marketing, too, and you wantto use consistent words and have a consistent tone. It detracts from theoverall experience and can confuse your customers because of misalignedexpectations if your app is very formal and your website is verywhimsical. Some companies will have one copy manager who is responsiblefor all text, be it in-product or in an ad.The main design process is done when your prototypes and mock-ups arevalidated as a solution and Engineering has agreed to their viability.As you hand the designs over to Engineering, you will likely discoverquestions about how part of the product should behave, unanticipatededge cases that need to be designed, new alerts you need the properwording for, and parts of the design that are problematic to implement.Your primary role throughout this process will be facilitator, butyou'll also want to make sure early test customers are happy with thedesigns and able to achieve the product goal satisfactorily. You'lllikely want to keep running a meeting with the design and engineeringteams throughout the project to make sure everyone is on the same pageand to address early user feedback and additional engineering needs. Forexample, if you have a ship-date deadline, you might need to cut afeature and change part of the product's design so that the featuredoesn't appear to be missing. The entire design process isn't truly doneuntil the product ships.Usability Testing with PrototypesAs your design team builds a design, it's useful to test various aspectsof it with customers when possible to see if the design is easy andpleasant to use and ensure that your customer can complete tasks thetester gives them with the design.User researchers and prototypers will work together to perform thistesting. Tools like UserTesting (which lets you get videos of randompeople that meet specified criteria performing tasks with your website,mobile apps, or prototype), and UsabilityHub (which provides data,including heat maps, about how people perform tasks with your staticmock-ups across different categories) help simplify the task.Usability testing is critical to making a successful user-centereddesign, but it isn't perfect. It doesn't test for questions like "Isthis product valuable to a customer?" The hypothesis validation you didin Chapter 4 should have answered that type of question. If you'retesting a new feature in isolation from the main product with aprototype, usability testing won't test whether existing customers areable to find and use this new feature. It also can't account for thingslike taste. A test might reveal that customers are most successful whenyou use an orange-and-green color scheme for the feature, but unlessyou're building a pumpkin-themed product, you might choose to trade someusability value for a better aesthetic.Once in a while, even a user-centered design team has to make choicesthat seem more like they force the customer to adapt to the productrather than being user-centered. Sometimes this is due to an internallimitation, such as engineering or design resources. Other times it'sbecause this choice is in line with the company's vision and generalattitude, such as Apple's not providing removable storage on the iPhone.A great design team will also think about the future and the roadmap,and this might lead to making choices in the current product that seemweird but are better for the future, like removing the floppy drive andserial ports from the original iMac. While testing is important, designis often more of an art than a science.However, this doesn't mean you should ship an unusable design becauseit's in line with your company vision! If a customer can't use yourproduct to solve his problem, or if it's very hard to use your product,he'll look for a different solution. Your product must be usable inaddition to providing utility!Just like how you created an opportunity hypothesis and then worked tovalidate it, design will create various UX possibilities and then workto converge on the main design. Just like your opportunity hypothesis,bigger ideas will need more work to validate. Some small projects mightnot require any design iteration. If you're responsible for theschedule, make sure to incorporate the appropriate time for design toiterate.Working with DesignWhile product and design will often have a fantastic relationship, alltoo often they have a frustrating relationship. Let's dig into why thathappens and look at some tips to help you work well with your designteam.Judging and Giving Feedback About DesignAs a PM, you will be expected to give feedback about designs and to haveinformed opinions. While we highly recommend you take the time to learnabout design, reading books like Donald Norman's seminal The Design ofEveryday Things, it is possible to havean educated opinion about design without being an expert. We can formthat opinion by using a framework with specific criteria and thenlooking at how the design meets those elements.The most important criteria we're going to set is "Does this design letthe customer achieve his goal with the least friction possible?" As youlook at a wireframe and imagine using the product step by step or as youactually try a prototype, are you able to accomplish the key tasks theproduct promises? Does the design ask for irrelevant information orrequire complex actions that prevent you from achieving your goals?Ask yourself this question for every use case, and you'll be amazed whatyou find. On some cameras, for example, it's easy to put the battery inbackwards because the battery's a rectangle with no special grooves. Theonly indication that you've put it in wrong is when the camera doesn'tturn on. A design change might have spared users the hassle of puttingtheir batteries in wrong!With software, is the information users need easily at hand, or are theyconstantly having to bounce between parts of the app to get the neededdata? What about the sign-up process-do you have a simple one thatlets users immediately engage with the app, or do you ask a lot ofirrelevant questions before they can start using it?To go a step further in our criteria, we're going to recommend usingDieter Rams's 10 principles of "good design." Rams is a well-knowndesigner, primarily having worked at Braun throughout his career. Hisdesigns are highly regarded, he's influenced numerous designers,including Jony Ive, and his 10 principles are easy to understand.Good design is innovative. Technologicalinnovation is constantly creating opportunities for new and innovativedesigns. This doesn't mean that you need to reinvent the wheel withevery design. Often, there are standard design elements that will makesense for your product, like a button. But especially when you'rebuilding an innovative product, it's worth asking if you're beinginnovative with your design or applying old design ideas to somethingnew.Good design makes a product useful. We want ourproducts to be used and loved, which means they need to be useful. Thedesign has to make the product functional but also psychologicallypleasing. Dental headgear is a great example of a functional productthat's not psychologically pleasing, which means a customer won't wantto use it.Good design is aesthetic. Quoting Rams,"The aesthetic quality of a product is integral to its usefulnessbecause products are used every day and have an effect on people andtheir well-being. Only well-executed objects can be beautiful."Good design makes a product understandable. Design can help make a product's intendedfunction clear, and great design makes the product usable without anytraining. When it fails to make the product understandable, the customeroften gets frustrated trying to use the product or remembering how touse it.Good design is unobtrusive. Productsexist to help a customer be awesome and achieve a goal, not to berevered by themselves. If a design is neutral and restrained, it letsthe focus be on the customer rather than calling attention to itself.Good design is honest. A well-designedproduct doesn't make the customer believe it does something that itdoesn't actually do or that it is something more valuable than itactually is. Painting the product gold won't make it actually be asvaluable as if it were made out of gold.Good design is long-lasting. While it canbe tempting to make something trendy and fashionable, good design willlast so that even as styles change, your product won't go the way of themullet.Good design is thorough down to the last detail. You want to think out every aspect so you makesure that no matter how customers interact with your product, they'reencountering a great experience.Good design is environmentally friendly.Design can help us preserve our planet for future generations byminimizing the resources it needs, whether we're talking about computecycles that require power or physical design that needs raw materials.Good design is as little design as possible. As Rams puts it, "less, but better." As youevaluate a design, ask yourself if you can eliminate elements. Focus onreducing the design to its essentials, as that purity and simplicitywill help make your products aesthetic, understandable, unobtrusive, andhonest.Not every principle will apply to every design with equal weight. Whenyou're building an app, you likely don't care as much about itslong-lasting or environmentally friendly nature. But when a designergives you a wireframe, prototype, or mock-up and asks what you think,these criteria give you a way to provide thoughtful and precisefeedback.Design Relationship SkillsThe biggest source of conflict is that both product and design feel likethey represent the customer. Both groups do represent the customer, justin different ways. Like we said earlier, PMs have to think about the bigpicture and about different teams' needs, whereas the design lead willbe more tactical and focused primarily on a great design. A handy way tothink about the difference is that product managers focus on the idealcustomer, whereas lead designers often focus on the ideal user.Let's look at an example to understand the difference. If you weredesigning a keyboard, your goal would be to help users type quickly andaccurately. The design team would come up with a fantastic keyboardlayout, and it almost certainly wouldn't be the most common keyboardlayout, QWERTY. QWERTY has been proven to not be the ideal design forfast or accurate typing.But QWERTY keyboards have been around for a long time. They'reeverywhere, from your computer to your smartphone to some TV remotes!Customers know how to type on them relatively quickly and accurately. Anon-QWERTY keyboard will have a potentially steep learning curve,meaning customers won't type quickly or accurately while they learn thenew layout.While our design team could come up with a new keyboard layout for theideal user whose goal is to type quickly and accurately, the idealcustomer most likely wouldn't buy it because of the short-term tradeoff.To understand customers comprehensively, it's useful to focus on theirpersonas. In addition to their goals, what other factors are at playthat will affect the customers' behavior? In our keyboard example, whiletheir goal was to type quickly and accurately, their prior familiaritywith QWERTY is a big factor that affects our product choices.Sometimes, especially with consumer products, it's easy for PMs tobelieve they represent the target persona accurately, even when theydon't. These PMs often ignore the details of the persona, using theirown taste, not persona details, to make product decisions. This can befrustrating to designers, as this can make the PM's decisions feelarbitrary.Micromanaging every decision design can cause friction between thedesign team and the PM, too. PMs are ultimately responsible for thesuccess or failure of the product, and that responsibility can causethem to try to tell the design team how to design the product. Wementioned earlier that wireframes, mock-ups, and prototypes are greatbecause they're so much more immediately comprehensible than the PRD.The flip side is that because design is so visible, it's easy to have anuninformed opinion. Trust your design team to make smart decisions, anduse criteria like Rams's design principles to assess if they're gooddecisions and to give informed opinions.So how do you build a constructive relationship with the design team? Asimple but important step is to get to know the team. Buildingindividual relationships with the people you work with will help yourespect each other as people and deal with conflict more productively.Beyond that, in no particular order, there's a variety of things you cando to have a great relationship with your design team. We recommend thatyou learn a bit about design, if you don't know about it already. Youdon't need to be an expert, but you should be able to talk about why youthink a product is well-designed or not. For software, learn common design patterns andaccepted layouts for functions like search, settings, and more,especially for different platforms. This will help you learn not toforce an Android app to look just like an iOS app or vice versa, forexample.As you learn about design, focus on developing an appreciation for whatgoes into design so that when you see a wireframe, you can ask goodquestions about why the designers made certain choices and understandthe implication of those choices rather than arbitrarily telling them todo certain things. Words like "white space" and "hierarchy" shouldeventually be part of your vocabulary.Similarly, don't overstep your bounds. In the PRD, do not specify thedesign. Your job is to give requirements and constraints along with howyou'll consider the problem solved, and let Design and Engineering findthe solution. For example, rather than incorporating mock-ups of a newonboarding process, specify what data is required and what's optionalfor a user to enter, then let design create a wireframe showing how toenter that data. Even if you used to be an amazing designer, yourprimary job as a PM is to focus on giving clear personas, requirements,and goals.Your design team will love you if you're clear on those three elements.This clarity will be part of a well-written PRD and true at the highestlevel-the overall project objective-and with individual userstories. Rather than just saying, "We need to improve the onboardingprocess," explicitly say who the target customers are, what you need theonboarding process to achieve, and how you measure its success.Furthermore, never, ever vaguely say a product is for "everyone." Thereis no such persona, and no product is perfect for every single person.Instead, make sure your target market is a clear part of therequirements in the PRD and that a persona is defined so that design canmake the right choices to address that persona's needs.Once in a while, you'll find that you really, really want to sketch outa UX, as it'll be the fastest way to share your thoughts, be it in earlyconversations about the product or even in a PRD. When you first join anew team, you'll need to work with other stakeholders and earn theirrespect. We recommend putting together a whiteboarding session with thedesign lead (and maybe the engineering lead) to discuss initial, roughideas. Together, you can draw on a whiteboard and then take photos ofthe board to incorporate into your PRD or share with others.After you've worked with a team, you'll usually find it's OK to sketchout a UX concept on your own rather than only including photos ofwhiteboards, but you need to recognize and make clear to others thatthis sketch is just to convey what you mean, not to imply designanswers. The best way to do this is via a napkin sketch. A napkin sketch is a drawing that's low qualityand created quickly, as if you drew on the back of a napkin with a pen.We recommend using a tool like FiftyThree's Paper for the iPad insteadof a prototyping tool like InVision or Balsamiq for any UX sketches youcreate. This will make sure your sketch is clearly hand-drawn and forceyou to create something unpolished but give you a digital drawing with anice stroke quality.As the design team starts to ideate using your PRD, work with them andother stakeholders to discuss the pros and cons of each idea beyond justif it's a good design or not, especially thinking about the ideal uservs. customer. Furthermore, ask if the team's thought through all theimplications of the design. If you're designing a social network and thedesign team has a flag button in the design to mark inappropriatecontent, what happens when a customer presses that button? Does thatbutton mean someone on the support team will manually have to look atthe content and possibly remove it? Does that team have resources to doso?All of this advice rolls up into one key point: your job is to provideclear communication between all stakeholders while keeping the endgoal-making the customer awesome-in everyone's mind. You are nothere to do the stakeholder's work-you leftDesign/Engineering/Support/etc. behind to move into product management.You need to keep everyone moving towards your goal.There's a great story about when President Kennedy visited NASA in 1962.The president asked a janitor what he was doing, and the janitorreplied, "Well, Mr. President, I'm helping put a man on the moon." NASAdid a great job making sure everyone knew what they were workingtowards, and that helped every individual think about how his actionsaffected that goal. You might feel like a broken record sometimes, butif you focus on keeping your product's goal front and center ineveryone's mind, you'll be amazed at how the whole team rises to deliveron that goal.Google Design SprintsGoogle Ventures came up with a great way to use design thinking to solvecritical business questions. It has used this process with its portfoliocompanies to solve problems ranging from "Is our new business viable?"to "How do we develop this new feature for existing products withmillions of users?"We like design sprints because they're collaborative (involving keystakeholders from each department), focused, effective, anduser-centered ways to solve big problems. Furthermore, as we've justspent a long time explaining, PMs often have to be hands-off with theactual design work, but in a design sprint you get to be hands-on. Thiscan be fun, letting you use your creativity, and it will help you gainan appreciation for what your design team does day to day.These sprints typically last a week. You start the week with a specificchallenge to solve, and you end the week with a design the team's agreedupon and that you've validated with real customers. Of course, once in awhile you end up invalidating the design and/or raising new questions,but then you can run another sprint using what you learned. Let's diveinto how to run a design sprint!Sprint PreparationStart by picking a sprint master. This person will set the context forthe design sprint and facilitate each stage of the sprint. This willusually be someone who is familiar with UX research and interactiondesign, but this person should also be able to lead a meetingproductively and get every participant contributing. The sprint masterwill do a fair bit of planning around content and logistics before thesprint to make sure it runs smoothly. Google recommends about one day ofpreparation for each day of the sprint.For content planning, the sprint master will write a design brief thatclearly defines the challenge (the PRD can be a great reference here),the deliverable, and the timeline to launch. She might also do a designaudit beforehand, pulling together the current designs, user research,and more, to provide context to the sprint team. This is especiallycritical if the team has already done work on this problem, as therewill be existing learning you can build from.For the sprint logistics, she'll start by determining the right team tohave on the sprint. The best teams are five to eight people and includethe PM, designers, engineers, and other experts or stakeholders.Sometimes, especially in start-ups, the CEO will be part of the sprintteam. It's also possible to have multiple teams working in parallel onthe same challenge. The sprint master will even schedule the room andmake sure she has all the needed supplies, including paper, tape, stickynotes, voting stickers, a timer, and pens.UnderstandThe first part of the sprint is devoted to understanding the problemyou're trying to solve, why you're trying to solve it, who the customersare, those customers' needs and capabilities, and more. As we discussedin Chapter 2, understanding the overall context for your customers andcompany/product is always the first step towards creating new solutions.The sprint master might arrange short talks, user interviews, fieldvisits to customers, competitive overviews, or beyond to facilitate thisstep. If you've done previous research or work with this sprintchallenge, this step is when you'll present that previous work.You as the product manager will likely play a key role here in helpingthe rest of the team understand your goals and strategy.During the first day of the sprint, you'll also schedule yourcustomer-testing interviews for the last day. This will put pressure onyour team, forcing you to create something to show customers, given realpeople are coming to see your work. After all, the best creativityhappens when you have constraints!DefineAfter the team understands the problem space, come up with a clearproblem definition. This is when you narrow the problem and come up withthe key principles and goals to help you measure your solution. Youmight define your design objectives, such as building a "fun to use"product, or you might think about the messaging and tag line for yoursolution, like "a thousand songs in your pocket."DivergeAfter you clearly know the problem and what you want your solution toachieve, you and the sprint team will brainstorm as many ideas aspossible for how to solve the sprint challenge. You might have everyonework individually to generate ideas using "Crazy Eights," where you folda piece of paper in half three times, to create a page with eightsegments, and take five minutes to draw eight ideas, one per segment.Or perhaps you'll work together to brainstorm ideas. Make sure not toreject anyone's ideas during this phase-your goal is to generate asmany ideas as possible, even bad ones. In fact, sometimes workingtogether to come up with the worst possible solution can help you thinkof new ideas for the best solution.You don't need to be able to draw well to participate in the Divergephase. But you should make sure anything you draw or create isunderstandable on its own, without an explanation from the creator. It'sOK to put some text on your drawings or to use multiple drawings to showa flow. Give the concepts titles to help you refer to them. However,don't put the creator's name on each. You don't want any companypolitics to influence which ideas you pick.Get crazy, get creative, and don't filter yourself. Ideate, ideate,ideate.DecideOnce you've come up with a lot of ideas, you'll pick the best ones, sofar, by voting.For the first round of voting, everyone gets an unlimited number ofvoting stickers, and you vote on what ideas, or pieces of ideas, youlike the best. You can use lots of stickers if you love something.Even though each idea should be self-explanatory, spend some timediscussing each one. For example, take three minutes to look at eachidea, and discuss what you like about it, what you don't like, whatcould go wrong, and more. Don't let the creator explain the idea first,as it should stand on its own, but if the others miss an aspect of theidea, the creator can point it out.Don't worry about achieving consensus during this first round-talkabout what you like with the various ideas.After you've discussed each idea, you'll super-vote. This is thedecision-making vote. Each team member will get a limited number ofvoting stickers, and the CEO and PM will get extra voting stickers.Again put these stickers next to what you believe is the best idea, orpart of an idea. This voting process will help you uncover the bestideas, regardless of who created them.PrototypeAfter picking a key idea or two, create a prototype. Building thisprototype will take the most time of all the steps, but you will emergewith a mock-up, demo, physical prototype, or other way of demonstratingthe idea that you can show to real people.You might end up having multiple prototypes to test the overall utilityof the solution separate from the usability or to test the usability ofdifferent ideas. The key in this step is to make some artifact that willhelp you validate your solution. After all, you'll be showing it tocustomers shortly!User TestingThe final step in the sprint is showing your prototype to real customersand getting feedback. Try to find out what they like and dislike, if thesolution will meet their needs, and if there are hidden factors thatcould stop them from using this solution.You can also ask for feedback to measure how well you achieved the goalsyou set forth in the Define step. For example, ask each user to rate howmuch fun they had using your product and what made it less fun.Make sure to validate this solution with the key stakeholders, includingthe engineering team, too, to confirm that this is the solution everyoneis onboard with pursuing and believes can be implemented.When user testing is finished and the sprint is over, take some time toreview the process and analyze how it went. Did these customers like thesolution, or did the design not work? Do you need to do another sprint?Ideally, you'll have a basic design that you know has promise, which youcan take, flesh out, and turn into a real product.If you like this approach and want to run your own sprints, we highlyrecommend reading Google Ventures's book Sprint: How to Solve BigProblems and Test New Ideas in Just Five Days. This book contains lots of tips from GoogleVentures's experience running sprints, to help you run the best sprintpossible.At this point, you should have an appreciation for what design involvesand see that it's more than just making things look pretty. You shouldalso have an idea about how to work collaboratively with the designteam. Remember, we say that design is done when our prototypes andmock-ups are validated as a solution to the problem we're trying tosolve and Engineering has agreed to the designs' viability. Now thatwe've drawn up the blueprints for our product, let's turn our attentionto how we'll work with Engineering to get our product built.Chapter Six TipConrad Albrecht-Buehler, an amazing designer who's also worked as aproduct manager, provides us with this chapter's tip. Conrad hasdesigned an award-winning in-car interface for BMW, designed some of thefirst mobile applications for VMware, and worked on several products atApple. In addition to being a designer, he has worked as a softwareengineer, a product manager, and a user researcher. He lives in Munichand the Bay Area with his wife, two kids, and a Shiba Inu.Being Open and FlexibleAaron Sorkin, who's written some of my favorite television and films,recently said that for many episodes of The West Wing, he would start with just an idea for a moment,and then let the story build as he wrote it. To paraphrase: he didn'talways know exactly what he was writing until he wrote it. Ininterviews, many of my favorite authors and, yes, even designers, havesaid the same thing. It's not because they lacked discipline or were notmethodical in their work, but stories and products are complex, and,until you get deep into creating either one, much of that complexityisn't revealed. Because of that, as a PM working with a designer-be ita user-experience designer, user researcher, or industrial or visualdesigner-my advice is this: be open and be flexible.As a designer works to accommodate requirements from product and fromengineering (and myriad other sources described in previous chapters),compromises must be made on one aspect or another. Be flexible, ratherthan authoritarian. Don't try to push a singular agenda an call it a"vision." Be open to compromise as the deeper complexities of theproduct reveal themselves. The best designers learn how to make the bestcompromises. But not without your help and the help of all stakeholdersand contributors. However, as the PM, you may have to referee the debatearound these compromises, and that's always tough because you will neverbe a neutral observer in those debates.The various sides of the debate will be framed in terms of cost vs.benefit. Most stakeholders will see the costs in terms of financialcosts or time costs-things that impact the company and employees. Thedesigners will see the costs in terms of impact to the user. That iswhere things go off the rails most frequently. Another stakeholder willclaim, "I'm a user, and I'd be fine with this." Maybe the customer willbe, as well, but it is the responsibility of the designer to know howpeople who are not just like the designer will perceive and interpretthe product. Even if all the debate participants claim that they, asusers, would also be fine with a compromise, don't treat that as amajority of a sample size and imagine that the designer arguing forsomething else is obviously mistaken. Be open to their experience, andvalue the time they've spent trying to get into the heads of peopledifferent from themselves to help you predict how a customer will see,use, and value your product. It may help you make the best, if notalways the most expedient, compromise as you address the complexities ofa product.Now that you've figured out your product's requirements and come upwith-and hopefully tested-a design, it's time to actually build yourproduct! In practice, this phase of the product-development life cycleis where you will spend the bulk of your time as a product manager.You'll work closely with Engineering day to day to help oversee theproduct that's being built, making sure it meets the productrequirements, making scope changes if key features are taking longerthan expect to develop, prioritizing the backlog, and eliminatingwhatever obstacles you can for the engineering team.You'll want to do your best to establish a strong relationship with theengineering team because although a great relationship doesn't guaranteesuccess, a bad relationship guarantees failure.While this phase can be a lot of fun as the product comes to life, itcan be very hard for product managers for two reasons. The first is thatif you started your career as an engineer, you might unintentionallyfrustrate the engineering team or imply you know better than they do.Alternatively, if you don't have an engineering background, you mightnot understand how engineers work-or how to work with them-causingthem to not respect you. Fortunately, these problems are avoidable!Let's start by looking at soft skills, interpersonal relationship skillsthat will help you work with engineering. Then we'll look at common waysengineering teams work and see how you as the PM fit into thoseworkflows.Product/Engineering RelationshipsJust as design is more than just creating pixels, engineering is morethan just typing code. Programming is very much like an art form: you'rebuilding something from nothing, and all of the pieces must functionpretty much perfectly or the whole product won't work. This artisticcomplexity leads to some common traits in engineers worth knowing about,as understanding these traits will help your interpersonal communicationand relationship with engineers.In general, engineers are highly intelligent people motivated by workingon hard problems and learning something new. They're often veryindependent and care more about crafting an elegant solution to acomplex problem than about specific business needs. Engineering is hard,and every product needs engineers. Given that, their skills areincredibly in demand and talented engineers are worth their weight ingold!However, because their skills are in demand, if engineers feel likethey're not being respected or mentally challenged, or if they don'tbelieve in the overall product and direction, they'll likely look for anew opportunity. Replacing an engineer is very costly, both in terms ofactual cost and productivity costs. PMs can help engineers, and thewhole company, by making sure engineers feel respected and recognizedand have confidence in the product.So how do you keep a great relationship with Engineering? You'restarting off the right way by recognizing that it takes work! Thebiggest thing you should keep in mind is that coding is hard and youshould trust that your engineers know their craft-contrary to whatsome designers and PMs think, engineers are not just code monkeys typingon keyboards. Especially if you have an engineering background, one ofthe worst things to say to an engineer is "can't you just...." Thosethree words imply that whatever the engineer is doing is easy and thatyou know better.We recommend that you view working with Engineering as an educationalexperience, both for you and for them. For example, ask them to helpestimate how hard a task might be. And if the estimate is higher thanexpected, ask if they could explain what goes into that estimate andwhere the tricky parts are. This will help you understand the full scopeof the task, and if the engineer is making assumptions because youhadn't accounted for something, perhaps you can decide to limit thescope of the task and make the engineer's life easier. As a simpleexample, if you're building a streaming-video player, it takes a lotmore work to make a 4K video stream efficiently than a normal HD one. Ifit makes sense, you could make a product choice to not support streaming4K content, thereby reducing Engineering's workload.Another big mistake that PMs make with Engineering is that they don'ttake time to get to know the engineers and how to best work with eachperson. Some engineers work best when they have a to-do list, and theydon't care about the broader picture or why you're making certainchoices. But other engineers get frustrated when you don't clearlyexplain why you made certain choices. To those engineers, this makes youcome across as dictating, not collaborating. A well-written productrequirements document (PRD) like we described in Chapter 5 can help bothof these situations, as it makes the information available for theengineers should they choose to read it.As you continue throughout the development cycle and have to make harddecisions, cut features, etc., make sure to work with the engineeringlead and perhaps individual engineers to understand the technical sideof these decisions. They're the only people who can tell you howtechnically feasible something is and provide an estimate for howdifficult it will be to build. This doesn't always mean Engineering justhas bad news for PMs. Sometimes they'll even tell you that something youthought impossible is actually feasible! Do make sure to write down keydecisions, such as in the PRD or in key user stories-or in epicrequirements if you're using scrum-so that there's no confusion aboutwhat the state of that decision is.Furthermore, change and tradeoffs happen in every product. Projectsoften get behind schedule because many small things pile up, such assomeone being out sick for a while, family emergencies, jury duty, andmore. If you work closely with Engineering to watch the balance betweentime (When are we aiming to have this done/shipped?), quality (Can wetake on some technical debt now?), and money (Would more people orovertime help us get this project done?), you'll keep the processcollaborative and deliver the highest-possible-quality product on thebest-possible schedule.Working on projects that have a lot of technical debt can also be veryfrustrating for engineers, as accumulated debt can make even polish andbug fixes painful. We've talked before about how it's important to theproject's overall momentum to periodically pay off any technical debt.It's also important to your engineers' sanity and your relationship withthem to periodically do so.A lot going on in an office inherently conspires against engineers.Specifically, solving hard problems requires deep concentration.Interruptions, whether for meetings or to reply to high-prioritymessages via email, Slack, HipChat, etc., can be very frustrating andtough to recover from mentally. Open office plans make things evenworse, as there are so many distractions and so much noise thatdevelopers often wear large, noise-cancelling headphones so that theycan focus on their work.While some of this is beyond your control, like floor plans, there aresome things you can control, especially around communication. Do whatyou can to give the engineering team time to focus on getting its workdone, even if it means you have to wait for an answer to a question. Notevery question you have is urgent, and interrupting someone's codingflow for a non-critical question is never appreciated.As Engineering completes each task, make sure to provide feedback,whether it's that they did a great job and exceeded your expectations orthat you found a bug or something isn't quite right. And when theproject's over, make sure the engineers-and everyone elseinvolved-get their share of the credit for getting the project done.Don't hog the credit-be humble!To be clear, the engineering team is not the PM's boss-you don't needthe engineers' approval on everything, and they're not the mostimportant people in the company. But they're the ones building theproduct and the ones you'll spend a lot of your time with. If you put inthe extra effort to do your best for them and to help them feel likepart of the overall project team and not just code monkeys, they'll feelhappier and more respected, and the work they do will be higher quality.Finally, no two engineering teams are the same. While you should keepour advice in mind on the whole, sometimes with junior teams you need tostep in a little more and make sure they're following best practices.For example, you might need to explicitly encourage them to add moreautomated test coverage and to take time to do thorough code reviews.Software-Development MethodologiesA development methodology is simply the framework you use to structurethe work to build the product. These methodologies are really more aboutproject management, not just how developers write code. We've touched ontwo of these methodologies-waterfall and lean/agile- previously, butthey have such a profound impact on how your engineering team works,we'll cover them in detail here. We're going to focus on varioussoftware-development methodologies, but many of the same principlesapply to hardware development.At one end of the spectrum, you have workflows where you, the PM, createa detailed spec and the engineering team disappears for months-likelymore than you anticipated-reemerging with the product built exactly asspecified. At the other end, the engineering team divides the projectinto the smallest tasks possible, programmers work in pairs on the samecomputer to complete one task, and then they come back to see what taskthey should do next. The next-up tasks might change while theprogrammers are working on their current task, and it doesn't matter tothe programmers. Let's compare the two most common approaches along thisspectrum, waterfall and agile.Waterfall DevelopmentThe waterfall method is the oldeststyle of software development. Early software engineers simply adoptedstages from the hardware world (manufacturing), and over time thisapproach became more refined. In 1985, the US Department of Defenseformalized the waterfall process in its DOD-STD-2167A document, whichspecified that its contractors would use this approach to write softwarealong with detailed descriptions of how they'd use it and thedeliverables they'd create.As you might guess, the waterfall method is very structured, withexplicit, formal stages. It's even called "waterfall" because you can'tmove to the next stage until the current stage is done-everything goesfrom one stage to the next in a big dump, like water over a waterfall.Waterfall development starts with the requirements phase, where the PMhas the most to do, finding the right opportunity and writing a verydetailed PRD. Unlike the PRDs we discussed in Chapter 5, waterfall PRDsneed to be detailed and complete, specifying as much of the project upfront as possible. They are not living documents, but rather large anddetailed bibles for the product.After the requirements phase, Engineering and Design take over,beginning with a design phase, a coding phase, and a testing andintegration phase. Products often ship with known bugs, as they'd neverrelease if you fixed every bug. PMs are often involved in prioritizingbugs to make sure the ones that will affect customers the most are fixedbefore release.Waterfall has a few benefits. For one, everyone will have a great ideaof what the final product will look like early on since you create adetailed spec. Furthermore, since you do a lot of work up front creatingthe requirements, you might find and fix an issue in that phase. It'ssignificantly cheaper to fix a problem early on. Because the scope isfixed early on, Engineering can make close-to-optimal design decisionsfor the project rather than designing for potential unknowns.Third-party development firms often like working with waterfall withclients because they can budget a project based upon the work they'veagreed to do. Clients (and PMs) often like it because they don't need tobe involved day to day in managing the project. Management also oftenlikes the clear and easily understandable milestones in a project, andyou can measure progress by what percentage of the spec is implemented.But there are also significant drawbacks to waterfall that have causedmany software teams to move away from it. These problems include thefollowing:Customers might not know their exact requirements up front. Because waterfall focuses on specifying andbuilding something complete rather than on fast iterations, what youbuild initially might not meet the customers' needs. And by the time youhave a new version addressing their needs, you might find that thecustomers have long since stopped using your product and sought outanother answer.There's no good way to handle changes.After the requirements stage, you might find new data that affects theproduct, and waterfall doesn't let you go back upstream to changedecisions in earlier stages.There is no time-boxing on each step, and the release oftenslips. One of the most common problems isthat there were technological unknowns and coding the solution took muchlonger than intended, so a three-month project estimate actually tooksix months to complete. You had to invest those extra three monthsbecause otherwise you wouldn't have a product.It can take so long to move through stages that a good decision youmade initially might be the wrong decision when you release the product.For example, maybe you thought customerswanted a certain product, but after building it you discovered themarket conditions changed and they no longer wanted it.If you're working on a product where the requirements and technology arewell known, waterfall is a reasonable approach. If your company is usinga waterfall system, the best thing you can do as a PM is validate thePRD as much as possible initially to prevent changes later, and try tolearn quickly if the market likes your idea.In most cases, waterfall's shortcomings outweigh its benefits. Manysoftware teams-including that of the Department of Defense-haveswitched to more iterative development approaches. There are numerousones with various names, and some are still very waterfall-ish, buteventually you will encounter the second main development methodology,agile development.Agile DevelopmentAgile development is fundamentally about being flexible, iteratingquickly, and embracing changes. Unfortunately, "agile" has become asomewhat generic and vague term much like "big data." Many companiesclaim to follow agile practices or use words from agile methodologies todescribe their process, when in fact their workflows aren't at allagile. Let's look at what agile really means and then at specificimplementations.The Manifesto for Agile Software Development defines key principles ofagile, including these:- Individuals and interactions over processes and tools- Working software over comprehensive documentation- Customer collaboration over contract negotiation- Responding to change over following a planInstead of a fully fleshed out, staged approach, agile follows anincremental approach. With agile you plan out a relatively small unit ofwork, build what you need to, and evaluate what you built. Then you usethat knowledge to plan the next work to do. These small units of workcan be organized either around time, in which case they're called asprint, or around the number of tasks ateam can work on at once, called a cycle.There are multiple agile development methodology implementations you canuse as starting point for your team's agile workflow, and you can adaptan approach for your team's dynamic. What matters is that you're open tochange, iterating quickly, and building working software, not focused onhow you get there.For agile to be truly effective, you need to embrace the lean principleswe've advocated throughout this book, like building a minimum viableproduct (MVP) rather than the fully featured product. In other words,build something small as quickly as possible, learn from it, and theniterate in the next sprint/cycle.Short sprints-one or two weeks-or continuous deployment are idealwith agile, as they let you move quickly and get feedback. If you wereto try to execute an agile process with a six-month sprint, you'dencounter many of the disadvantages we listed for waterfall, like howthe customer's needs might change while you're building the product andyou have no mechanism to get feedback or make changes during a sprint.Agile and lean also lead to a breadth-first approach where each sprintor cycle will-ideally-produce a usable piece of software that youcan use to get feedback from customers or clients. In waterfall you'remuch more likely to schedule milestones so that part of the product isdeemed feature-complete before moving on to another part, scheduling fordepth. With agile, sprints/cycles are usually focused on getting to avery minimal but functional app initially and then adding features toeach section as needed, scheduling for breadth.Furthermore, the team will do incremental testing on the code duringeach sprint/cycle, which leads to a higher-quality product with fewerbugs. Studies have shown it's up to 20 times cheaper to find and fixbugs as you build a product rather than doing separate development andtesting stages like in waterfall.Unfortunately, there are some downsides to agile, especially for PMs.Agile workflows frequently put a lot more demands on you, sometimes evenhaving you handle quality assurance/bug testing in addition toeverything else you're doing.Having more milestones more often also puts additional demands on you tokeep validating builds with customers, but you'll need to work to findthe right balance of wanting feedback and deciding which builds tovalidate. Making sure a customer wants something before spending tons oftime building it really is a big net win. After all, if you find you'rebuilding the wrong thing, you can pivot before spending more time on it.But it would take all of your time and not always yield usefulinformation if you tried to validate every build.Similarly, in an agency model clients sometimes dislike agile becausethey have to be more involved in the project, consistently schedulingand prioritizing.One of the biggest criticisms of agile, however, comes from developers.If you're building something new/trying to solve a hard problem, agile'sheavy focus on delivering something usable within a sprint (and thevarious associated practices) is counter to thinking deeply and solvinga problem. Often, developers discover that the best way to find acreative solution to a hard problem is to isolate oneself, focus deeply,experiment, and reemerge when they have a solution. There are ways toavoid this shortcoming, such as leveraging scrum spikes-a user storyto investigate something-or having explicit R&D sprints where adeveloper's only task is to try to solve one problem. Just being awarethat this is a frustration for developers will help you make planningdecisions that take it into account.Agile can also be tricky to scale to large teams. See the "FurtherReading" section for information about Agile Release Trains to helpscale. There's also a ramp-up curve before you hit full productivitywhen implementing an agile workflow.Agile critics say that it leads to reactionary development, as you'reresponding to what customers want now, rather than planning out aroadmap and maintaining a product vision. We feel it's quite possible tohave an overall thematic roadmap with projects defined and communicatedby PRDs, built using agile/lean methodologies, where the exact detailschange as you find out how customers use your product.Despite the various criticisms, the Standish Group, an IT advisorycenter, tracked 50,000 projects from 2011 through 2015 and found thatthe success rate (shipping a working product) of agile products was 39%vs. 11% with waterfall. That's a huge difference, but note that evenwith agile 61% of projects don't have a working product by the end.Let's look at two of the most popular ways agile methodology isimplemented: scrum and Kanban.ScrumScrum development is based on an idea from rugby, specifically that ateam's functioning as a team, and not as a group of individuals, is keyto success, and the best teams are given direction but can devise theirown tactics for how to achieve their goals. Scrum came about in theearly '90s whereas agile was formalized in the early '00s, but scrum'sarchitects were part of the group that created the Agile Alliance.At a high level, with software development, using scrum means that theteam comes together to prioritize what to do next and set short-termgoals for what work to finish. You as the PM will have very strong inputinto that part of the process. Then the team goes off and figures outhow to best do that work. You'll check in with the team members at thestart of each day as they work, addressing any questions, and you'llvalidate the work when they say it's ready. But you don't micro-managethem or change their goals before they're done with the current set.Scrum is one of the most common approaches to agile because it has avery clearly defined project structure with clear team roles. This makesit easy for a company transitioning from waterfall to agile to adoptscrum. And even if companies don't fully implement scrum, they oftenborrow ideas from it, such as daily stand-up/check-in meetings.Scrum uses time-boxed sprints, most commonly one or two weeks. Eachweek, you meet with the engineering team to perform backloggrooming. A product's backlog is thecollection of all the bugs and suggestions, generally written as userstories, for the product.Grooming simply means you make sure the bugs and sugs are organized andhave enough clarity to act on. For example, we've all seen-and maybesent-poorly written software bugs that just say "it crashed." That'snot helpful. In grooming, you'd do what you could to add steps toreproduce the crash and attach a crash log to the issue so that the teamcould eventually fix the bug. In addition to adding clarity, duringgrooming you will make sure each new item for the backlog has acceptancecriteria: How do you know the item is done properly?. Furthermore, welike writing backlog tasks as user stories because that format helpsexplain why something is an issue so that Design and Engineering candetermine the best approach to address the issue.Also during the grooming meeting, the engineering team will assess thecomplexity of the new or updated stories, breaking them down intosub-tasks if necessary. It's tough to know exactly how hard a task is orhow many hours it will take, so you'll often see complexity measuredusing relatively weighted story points. Teams might assign one point toan easy task, two points to a medium task, four points to a hard task,and eight points to a very hard task. The idea is that you don't knowexactly how hard something is, but you can say that one thing should betwice as hard as another.After assessing the complexity, your role as the product owner will beto provide rough prioritization for any new items along with existingbacklog items based on customer need, business value, and longer-termgoals/needs. Your goal with this prioritization is to have the mostimportant thing to work on next at the top of the backlog.Backlogs often grow quite large, and there's usually a big chunk ofstuff on it that you're just not going to be able to get to, along withthings that are cool but not relevant in the immediate future. Teamsoften create a second list, called an icebox,for these less-immediately-relevant-but-things-you-don't-want-to-forgetstories. Stories in the icebox can be "unfrozen" and moved to thebacklog, but you won't actively work on icebox items. As we discussed inprevious chapters, there will be a lot of potential features and ideasto make the product better. You will be saying "no" a lot to make surethe project doesn't get out of hand! Putting something in the iceboxinstead of explicitly saying "no" is a nice way to make people feeltheir input is valued while avoiding feature creep.Later, you'll have another planning meeting where you determine thesprint backlog. The sprint backlog issimply the list of user stories the team intends to complete during thesprint. You'll pick the key things you want to work on based onpriority/business value, and the engineering team will agree on whetherthey can commit to it during the sprint.A common question is, how do you know how many backlog items to pick fora sprint? Over time, you'll find that the team tends to completen story points per sprint. That numberis called the sprint velocity. Duringthis planning meeting, if you add up the story points on the taskseveryone agrees to do, it should come out to that velocity.If you're struggling with how to prioritize what to do, try calculatinga priority score by adding a Business Value field to each story, like wesuggested in Moving Forward section at the end of Chapter 4. Factorsthat go into the business value can include how much you believe thiswill help you achieve a goal, how many customers are asking for this, ifthere's an important technical reason you need to do this, and so on.Then, calculate a priority score by dividing the business value by thecomplexity. High-value, low-complexity stories will have a high score.High-value, high-complexity stories will have a mid-range score.Low-value, high-complexity stories will have a low score. This approachis especially useful if your team is responsible for multiple productsand you have to balance each product's needs during sprint planning.Note that you won't change the sprint backlog during the sprint, as thatdisrupts the team and can throw off the sprint velocity, which affectsplanning. This lack of change encourages you to have shorter sprints,especially when priorities are shifting, so that you can balancereacting to change with letting the team function effectively.You'll also find that scrum requires more attention to the balancebetween building the right thing (what PMs want), building the thingright (what engineers want), and building it fast (what scrum masterswant so they can get feedback quickly). It's quite likely that you willaccumulate technical debt-that is, the code will have some funkinessin it that Engineering had to build to deliver something in time.It's OK to have a little technical debt to get short-term customervalue, but lots of technical debt can reduce your team'svelocity. During sprints, you'll periodically need to accept work thatpays off that technical debt even though there's no visible customervalue. For example, if we rewrote Moover from Objective-C to Swift,there wouldn't be any immediate customer value, but it could make iteasier to add new features going forward, improving the team's velocity.During the sprint, you'll have short, 15-minute meetings calledstand-ups at the start of each workday,where each team member states what she did during the past day, what sheaims to accomplish today, and if she has any blocking issues.At the end of the sprint, you'll have a demo meeting with keystakeholders/the customer/the client to show what you've built and gaugetheir feedback, and an internal sprint retrospective to assess how thesprint went.When done well, while combining scrum and lean methodologies, scrumtends to provide a very nice balance of planning ahead and toleratingchange, which we've found valuable. Since each sprint ideally producessomething usable, you can break down a bigger plan specified in a PRDinto smaller milestones and validate what you're building at key pointswith customers and stakeholders to make sure you're on the right path.If you're not, pivot before building more.When you start a new project, scrum is especially helpful. Early on in aproject, there's a lot of risk (business, technical, and more). Byfocusing on sprints and tasks that de-risk the project, you might havelow initial customer value but enable rapid progress later.For example, when planning Moover's new customer messaging feature, wemight focus on making messaging back and forth between customers andmovers work initially, not paying any attention to a good userexperience. This will let us test and make sure that this core pieceworks. If the development team finds out that its initial approach hassome big limitation (e.g., maybe it's constantly blocked by a firewall),the team can come up with a better solution. And if it turns out thatthe core piece isn't do-able, you can reassess what you're buildingwithout the team's wasting time on non-core pieces.Scrum also makes project management easier, as you can use story pointsand the total story points for outstanding items in the product backlogto create trend lines. These trend lines let you estimate when theproject will be done with a feature set, along with how much work willbe done on a certain date.If you have to make a schedule tradeoff, we'd recommend reducing theproject's scope rather than extending the schedule. That way you makesure you have something done by the deadline, and if you finish earlyyou can increase the scope.Unfortunately, scrum has some problems. Some of these problems have evenled to cries that "agile is dead." The heart of that argument is thatthe agile movement was supposed to be about individuals and interactionsand responding to change. Scrum has become synonymous with agile, yetimplementing scrum is often more about process over individuals, andchange has been limited to enable better planning. In other words,"agile" has been bastardized to be just as rigid as waterfall.Stand-up meetings are a great example of that rigidity. The goal is tokeep the team apprised of what's going on and to help unblock any issuesat the start of each day. But if your team starts its day at differenttimes or works in different time zones, stand-up meetings aren'teffective because they'll be at the start of the day for one person buthours into the day for another. Plus, these check-ins all too oftenbecome an easy way for managers to micro-manage while claiming it's partof scrum. Despite these shortcomings, the teams still hold theirstand-ups because that's what scrum says to do. A better approach wouldbe to create new ways to communicate, like agile encourages, such asposting a status update to Slack at the end of the day rather thanholding a stand-up.Scrum can also create headaches for you. It's often up to the productmanager to do acceptance testing, making sure each user story iscompleted correctly and without bugs. This can be very demanding of yourtime, and when you combine it with everything else you have to do, it'seasy to get sloppy and miss bugs that a dedicated QA team would havecaught.A final downside to scrum is that while you're seeing progress morefrequently than with waterfall, in the best-case scenario you still haveto wait a whole sprint to see the latest and greatest. While that mightbe fine for a new feature, it can be very frustrating for bug fixes!Given how easy it is to release software in today's world, such as withweb apps, there are alternate agile approaches worth looking at, such asKanban.KanbanKanban development comes from Toyota, which came up with thismethodology by looking at how supermarkets stock shelves. Specifically,supermarkets aim to be "just in time" so that the shelves are neitherempty nor overstocked with wasted, expired food. While Toyota used thistechnique to build cars efficiently, it is often applied to software,too.Kanban's goal is to match the team's capacity to do work with how muchwork is actually happening. Additionally, there should be a few tasksready to go so that if a team finished n story points of work, they can immediately startworking on a task requiring another npoints to complete. This is nice because your future priorities canchange with very little impact on the team's current work.In Kanban, you will typically create a task board showing what's up next(to-do), in progress, ready to be tested/verified, and done. Tasks willmove from one column to the next, and you'll know how much work the teamcan handle at once along with how many things it can verify at once.While many agile methodologies are time-based, Kanban isn't. Instead,the PM will work with the dev team to reprioritize the backlog and makesure that the most important items are always next up and theirdifficulty estimates are accurate. This leads Kanban teams to focus oncycle time: how long it takes from themoment you start a unit of work until it ships.Many little things can hurt cycle time, such as one person havingspecialized and required knowledge for the task, along withmultitasking. Therefore, Kanban encourages teams to learn skills outsidetheir domains-so that everyone could test, for example, if there'swork piling up in the "ready to be verified" queue and holding up thenext phase-and to stay focused by keeping the amount of work inprogress small.One of the biggest benefits to Kanban is that it enables continuousdeployment. Once a change moves through the cycle, it's ready to bereleased. Especially for web apps, this is quite nice and enablesimmediate customer feedback.Kanban is also nice because it can be implemented on top of othermethodologies. It's really just a focus on incremental, continuousimprovement to the product. In general, if your team is already using aworkflow and executing well, Kanban might help the team move to the nextlevel. But if your team needs help becoming more efficient in general,shaking things up by focusing on implementing another agile process,Kanban might not be the right place to start. That's because Kanban is amuch less formalized method than scrum, and it can be harder tounderstand how to implement it initially.Sometimes you'll see Kanban combined with scrum-called"scrumban")-which was originally intended as a way to transition fromscrum to Kanban but has become a methodology of its own. Here, the teamwill have a planning meeting, execute a very short sprint, and then haveanother planning meeting when the work in progress falls below a certainnumber of story points. There are no predefined roles or fixedschedules, and the iterations are focused on points delivered ratherthan time.However, while Kanban is great for development teams, it can be veryhard on PMs. PMs are frequently quite busy, working with customers,shepherding products, working with marketing, and more. Kanban requiresus to also be available continuously to verify each task is completed(acceptance testing) and to make sure the next set of tasks isprioritized and ready to go (backlog grooming). If you don'tcontinuously do these tasks, you might become the bottleneck for thewhole team!Overall, remember that with agile, individuals and interactions are themost important element-more important than processes and tools. Thismeans that you shouldn't worry about following a word-for-wordimplementation of a specific methodology. Start somewhere and figure outwhat works best for your team. And don't be afraid to try a newapproach.Working with Remote TeamsA common challenge PMs face is how to work with development teams thataren't in the same physical space or even the same time zone. Whilethere's no one right answer, clear communication is the key. Thisdoesn't mean an expectation of non-stop communication and constantavailability, but rather having regular check-ins and using tools likeGoogle Hangouts to see each other and remember that you're working witha person.You can play a big part in helping remote teams be successful byover-communicating requirements, goals, decisions, and the definition of"done" for the project so that everyone feels like they're on the sameteam and has a clear understanding of what they're working towards,regardless of where their desks sit. Sometimes important decisions orclarifications happen in a hallway conversation, and unless you payattention, a remote developer might not hear about that decision, ormight feel left out of the decision-making process.Creating a culture where people don't think twice about having a quickvideo chat can help replicate the face-to-face interaction that happensnaturally in a single location. Too often, we still think of a videoconference as a formal, scheduled time-it doesn't have to be that way.Furthermore, be aware of when people are starting or ending their days.Is there something that team A can do at the end of its day that youneed for the start of your day? Or is there something you can get doneby the end of your day so that when team B starts, it's not blocked? Itcan even be helpful to establish "golden hour" handoff meetings so thatthese needs get communicated clearly at the start and end of each team'sworkday.Agile helps a lot with remote teams because it forces you to think aboutthe adaptable nature of agile to figure out workflows that work well foryou. For example, scrum works well with remote teams because you canplan what to do, let people work independently, and still conduct dailystand-ups. Depending on what time zones people are in, you might have toconduct daily stand-ups asynchronously via email or instant messagethroughout the day rather than having everyone together at the sametime. Additionally, at the review meeting, rather than trying toaccommodate everyone's schedule and possibly making the meetinginconvenient for the stakeholders, try having the product owner, ratherthan individual developers, present the overall team's work to thestakeholders.The biggest thing that remote teams miss out on is the naturalteam-building that happens when people spend their days together. It'simportant to get your team together in the same place periodically, evenif it's just for team-building exercises. Product managers should haveempathy for their teams, not just for their customers. Spending timetogether is a good way to develop solid relationships.Working with Third-Party Development TeamsIf you're a software PM, there's a good chance that at some point youwill work on a project with a third-party development team. This meansthat the project's developers aren't company employees, but ratheremployees of a development agency you've hired. Companies usually engagea third-party development team when they're resource-constrained-astart-up may not have had time or funds to build a full-time developmentteam, or in an larger company may want to take on a project its internalteam doesn't have time to do. Sometimes you'll also hire a third-partyteam because they have a particular skill that you have a short-termneed of, such as expertise in a specific API.As a product manager, you'll handle a lot of the interaction betweenyour company and this team, and you can do a few things to ensuresuccess. The biggest is to make sure you're communicating therequirements, goals, and deadlines to the third-party team clearly. Takethe time to address any potentially confusing elements as they arise.Writing everything down on a shared project-management resource such asBasecamp will help ensure everyone has access to the same informationand key decisions. Coordinate the timelines and progress with anystakeholders internally to make sure everything looks good. It's oftenbetter to over-communicate, especially at first.It's also very helpful if you establish frequent milestones with theexternal team. If that team is internally using an agile process, thisshould be easy. The benefit is that you can see what they're building,and if something isn't heading in the right direction-whether becauseof a miscommunication or because you made a mistake in what you neededto build-you can address it early. Just like with an internaldevelopment team, if you give a third-party team a large spec and thenonly check in three months later, what they've built might,unintentionally, not be what you wanted or what you need.Having a solid short-term plan is also very helpful, as it lets agenciesschedule their developers efficiently on your project. In fact, someagencies prefer to let work queue up until they have a sprint's worth onyour project before prioritizing it. Frequently changing what you'reasking for is frustrating for development agencies, as it makes it hardfor the agency to to plan the project longer term and to gauge whenit'll finish your project and when it can take on new work.Above all, just like you would with an internal team, look at anexternal development agency as a partner. Be respectful of the agency'sskills, time, and needs, and it'll likely do great work for you.However, while there are many great external development firms, thereare some sketchy ones, so you should know a few warning signs. Like whenyou're buying a used car, if your contact keeps telling you what a greatvalue you're getting, he's likely overcharging you. If your contactnever asks questions to clarify each user story or make an effort toclarify and deliver the acceptance criteria, you should be wary. If yourcontact ignores questions you ask except on your check-in calls, youshould also be alert.Be watchful of how agile agencies assign story points to user storiesfor which they use a pre-built in-house framework. Specifically, manyagencies have built up libraries of common functions, such as servercode for account management. A good agency that's using its library tocomplete user stories will estimate these user stories as "easy." Thisis honest and lets you calculate sprint velocity effectively. A sketchyagency will list a hard estimate for the user stories, claiming all theoriginal work it took to develop the library as part of your story, eventhough it's trivial for the agency to implement. Then the agency willtell you how much it kicked butt for the sprint because its teamaccomplished hundreds of story points, even though it really only did 10story points' worth of work. That claim messes up the sprint velocityand planning calculations, and it's a sure sign you should find a newagency.No matter where your team members are located, whether they're in-houseor external, and whether they use Kanban or waterfall, we say that thedevelopment phase of the product life cycle is done when working, testedsoftware that meets your product requirements is ready for release. Yourrole during the development phase comes down to providing clearrequirements for the engineering team members, working with them toprioritize and reprioritize as needed, and trusting them to build greatcode. Now that we've built our product, let's look at how we launch andmarket it. Chapter 7 TipMohammad Musa, a Product School instructor, provides this chapter'stip. Mohammad is cofounder of a stealth start-up focused on virtualreality for enterprises. He used to work at Google on companywideefforts to enable teams to build products more effectively. He workedspecifically on infrastructure products for tracking user-centeredmetrics, bug management, and user-feedback loops. Prior to that, he wasthe head of Launch & Readiness at Google Apps for Work, where he led across-functional team managing product launches, product roadmap,trusted tester, and launch communications. Before joining Google,Mohammad worked in software engineering and technical sales positions inthe video games and semiconductor industries, mostly in smallstart-ups.Working with Junior Development TeamsIf you are a software PM, you will need to work hand-in-hand with thesoftware engineering manager (often called tech lead manager or TLM incompanies like Google, Facebook, and Twitter). The TLM manages a numberof software engineers with variable seniority levels. The more seniorengineers are often referred to as tech leads (TLs). The TLs may or maynot have management responsibility over the other teammembers.The TL reports to the TLM and handles most of the day-to-day workassignment and helps the team unblock technical challenges for aparticular project.If you are lucky, you will be working with an experienced TLM and/or TLwho has mentored and managed many engineers in the past. The TLM or TLwill take care of training and advising the junior developers on theteam without requiring extra cycles from you as thePM.However, in reality you don't always get an experienced TL or TLM. Orsometimes you may get a great but busy TLM that has 15-plus engineersreporting to him/her. In these cases, your role as the PM will need toexpand to best help the team succeed. In my experience, I found thatworking with junior developers requires the PM to do more work aroundscrum management, quality, and product or featuredefinition.First off, with regards to scrum, the junior developers are not used touser story estimation. Their estimates are usually off and they oftenthink that a story is complete while there is still a lot of work leftto be done. These premature stories can cause embarrassment in front ofstakeholders if not enough QA has been completed. Second, and closelyrelated to the first point, you really need to do a lot more QA aroundthe work that junior developers have completed. You may not have a QAteam at all and even if you do, the scripted tests may not catch all theerrors that have been introduced by someone who does not know the systemvery well. This is exacerbated in complex software systems that arealready suffering from coverage and quality problems.Finally, around requirements and definition: As the PM, you need toassume that the junior team members are like new users who have onlycasually used your product. You can't count on quick hallway or chatconversations to agree on minor details and just move on. You reallyhave to document and make sure that junior team members haveinternalized what you are asking them to do. This will include moredetailed user story descriptions, detailed mocks and userjourneys/scenarios, and detailed acceptance criteria.Within six to eight sprints, the junior members will better understandthe product complexities and requirements. To speed up understanding andshorten the learning curve, it would be ideal for your team to developmore user empathy. Encourage your engineering team to monitor userresearch sessions or conduct informal customer-discovery conversationswith users directly (if possible). More knowledge of the user personaand their pain points helps the entire team become more experienced andhelps junior developers take more ownership and pride in theirwork.At this point you've found an opportunity, validated it, gotten yourteam on board, and built a product. You've done a lot! In fact, if youcome from an engineering or design background, you might feel like thehard work's over and you can take a vacation. But for a product manager,there's still more work to do to get your product into the marketsuccessfully. As the team at Pragmatic Marketing, aproduct-marketing-focused agency, puts it, "Launch isn't the end ofdevelopment but rather the beginning of selling."As much as we'd like to believe that if we built the perfect product itwill sell itself, the harsh truth is that it won't. If none of yourtarget customers know about, find, or buy your product, it will flop. Ifthe wrong people buy your product, they won't be happy and your productwill flop. Unless you have a solid plan to bring your product to market,it will most likely flop. Fortunately, marketing and sales teams existto make sure the right customers learn about, find, and buy yourproduct!To ensure a successful launch, you will work closely with the marketingteam. Some companies even have a second role within marketing related toproduct management, the product marketing manager (PMM). Put simply, thePMM is focused externally and is an expert on the customer-and thebuyer, if that's not the same person, such as in enterprisesoftware-whereas the PM will focus internally on getting the productbuilt. Companies that have a PM and a PMM call the PM "inbound" and aPMM "outbound" to reflect this differing focus.Workflow-wise, the PMM will often handle customer development andoutreach, the PM will take that feedback and research and get the rightproduct built, and the PMM will step back in for launch. During launch,a PMM is responsible for figuring out how to explain the product to thecustomers, crafting the right go-to-market (GTM) plan to bring theproduct to market successfully, and helping the sales team. We'll gothrough this chapter as if the PM and the PMM are the same person togive you the best understanding of how product and marketing cometogether during launch.By representing the customer, the marketing and sales team will oftenask for the PM's input when forming strategies. For example, if yourproduct is aimed at teens, the PM will know that teens currently useSnapchat and Instagram more than Facebook. The marketing team will usethat input as a starting point to determine where to buy display ads.While you won't be responsible for the details of buying display ads,your input will affect where those ads are and what they say.Throughout this chapter, we'll look at launch preparation, at the launchitself, and a bit at post-launch activities. Launch preparation startsway before the product launches with understanding your customers andproduct messaging. Even though we're covering this material after theproduct's been built, you will implement this advice while you'rebuilding this product.Whether you're releasing a new version of an existing product with minorfixes or releasing a completely new big product, the advice in thischapter will help you. You'll just adjust the scale appropriately. Abug-fix release doesn't need a press tour, for example.Understanding CustomersTo market your product successfully, you'll need to know how yourcustomers make decisions. Thinking about marketing early on, even whenyou're doing your initial customer development, will help your productenter the market successfully. For example, your customers might expectto buy your product at Best Buy. It can take months for your sales teamto set up the relationship so that your product is available in store,which means you can't wait until launch to start the process.Back in Chapter 3, we introduced the Business Model Canvas and the ValueProposition Canvas. At the time, we used them to help look for a productopportunity. We can use the same tools to understand how to best marketour product to the right customers by looking at different parts of thecanvas. For reference, Figure 8-1 shows the Business Model Canvas (alsoshown in Chapter 3 as Figure 3-5).These are the key areas to focus on from a marketing point of view:- Customer segments: Who are the key personas?- Value propositions: What's the benefit/value each persona will gain from your product?- Channels: How does the company reach each persona?- Customer relationships: What communication level and type does each persona expect?- Revenue streams: How much and how often will the customer pay?As you do your customer research, you'll want to fill out these blocksand expand your persona to include the marketing side. Here are somespecific things to make sure your personas address:- How the persona would consider your product a success- How the persona perceives your product/company (if you have an existing product)- What buying criteria the persona has- How the persona evaluates products (e.g., does he expect a free trial?)- How the persona perceives your competition- What influence this persona has on the buying processBy fleshing out the marketing side of a persona, you'll help themarketing team make successful decisions. For example, your personamight focus on new parents who look for advice online. Then themarketing team will do additional research to determine what parentingwebsites and blogs the actual customers read, along with where they buydiapers and other supplies. In other words, once you know what yourpersonas are, you and the team can figure out what channels thecustomers they represent use to learn about and purchase new products.That lets your team make choices, like where to buy advertising, so thatthe right people find your product.The Customer Relationship block will help your team determine how toreach these customers, too. With an enterprise product and a high-valuecustomer that purchases a lot of licenses, the customer likely expectsher account manager to talk to her personally and maybe even come to heroffice to give a demo. Again, make sure the choices you make forcustomer relationships match your customers' expectations.Sometimes, especially if you're releasing a completely new version of aproduct, you'll want to call out any customer segments the product isn'tready for yet. For example, when Apple released Final Cut Pro X, whichwas a completely rewritten version of Final Cut, it left out certainadvanced features and waited for customer feedback to determine which toadd back in. This also meant that Apple explicitly didn't market the product to customers they knew neededthose advanced features, as those customers wouldn't have been satisfiedwith this new version.Product MessagingOne of the most important things the Business Model Canvas and the ValueProposition Canvas can help you and your team determine is the rightproduct message. Specifically, how do you communicate your product'svalue to customers and explain why they should care and what problemsyour product solves? These canvases can help because they specificallyask you to think about your customers' needs, problems, and goals alongwith what problems your product solves and what benefits it provides toyour target customers.Framing your product in this way-why should the customer care?-helpswith everything from how you'll sell the product to what features reallymatter. It's so important that back in Chapter 5, we recommendedincluding at least a first pass at your product's core message in thePRD. If you don't think about the customers you're trying to reach andwhy they should care, then it will be much harder to find customers. Forexample, if you're working on a new version of a student-loan product,your focus will be on getting students and recent graduates to careabout and buy your product.Before you start creating your product's message, make sure you reallyunderstand the customer personas you're targeting and how your productfits their life. The Value Proposition Canvas, especially, will help yousee those connections. In an ideal world, we'd come up with oneuniversal message that addresses all of your personas, but we'll likelyneed different messages for each persona.Using the same message for every persona is like starting every letteryou send with "Dear sir," even if the recipient is a woman. And the sameway that you wouldn't greet someone in person with "Dear sir," you'lllikely have different messages for different mediums, from website toemail to video ad. In other words, it won't just be the message languagethat changes. Different personas will want different value propositionsand care about different features/use cases. A stay-at-home dad willlikely care more about a car's safety rating than its horsepower,whereas a dad having a midlife crisis will care more about horsepower.PMs are frequently responsible for the first pass at a product'smessages and will have input into the various forms these messagestakes. Let's dive into how to craft a great message. We're going createa message by putting some notes together around the elements that gointo a message and then putting those notes together into a message.Key Elements of Your Product's MessageWe'll start our notes by thinking about the product's themes, which wetalked about in Chapter 2. There are three key questions our themeshould answer: Why is this product/company important? Why are you doingthis? What's special about your company's mission that will make acustomer want your product over a competitor's? Ideally there will beone fundamental theme that answers those three questions. Grab a blanksheet of paper and start writing down what you think your company's coretheme is. Revise what you write as needed to make sure that themeapplies to all three questions.Let's write down Moover's theme. Moover's founders created the companybecause they found planning a move to be overwhelmingly stressful,especially while working full-time. Their core theme is making moving asstress-free as possible so that it's easy for you to get to where youwant to live. While we might never explicitly say those words tocustomers, that theme will guide our product messaging.Another element to look at is what's fresh and new about the product:What are we building a message for? On your sheet of paper, create a newsection where you list what's fresh and new. In Moover's case, it's thechat feature.Note that the "fresh and new" part might differ for new versus existingcustomers. With Moover, we can specifically tell existing customersabout the messaging feature. But when we try to reach new customers, welikely have to educate them about Moover in general first, and the chatfeature will be a bullet point beneath the main message. This is acommon problem companies face, and it's just another reason you'll needdifferent messages for different customers.Rather than telling people about these fresh and new features, though,we want to talk about the benefits they provide to the customer, usingthe underlying theme and the customer's problems/needs to affect ourdiction. Next to each new feature you listed, write why the customershould care and how this feature relates to the theme.Moover's chat feature lets customers communicate with moving companiesat the customers' convenience, not only from 9am to 5pm. We couldrephrase this to explain why a customer should care by writing, "Neverstress about missing a phone call from the movers: talk with them onyour schedule."Continuing with crafting your message, how is your product different andbetter than what the customer's doing now? This is especially relevantin the messaging for new customers. In another section on your paper,create "Now" and "Future" columns and write out what the customer'sdoing now and why your product, especially with this new feature, isbetter.Right now, Moover's customers, both existing and potential, have tostress about answering phone calls and not missing emails from movingcompanies, even when they're really busy dealing with life. We couldfurther refine our message by saying, "We're taking the hassle out oftalking to movers." This is great because it quickly encompasses alltypes of communication: "talking" can mean via phone or email. And we'resaying why Moover is better: it's hassle-free. This version of ourmessage is also strong because it's positive (the previous messagestarted with the negative "never") andit's in the customer's diction ("talking" rather than "communicating"and "hassle" rather than "stress").Another aspect of your message is to address what someone's firstimpression of your product might be, and whether you need to influencethat impression. Our first impressions have a big effect on ourattitudes. For example, the first time you see 3D software like Unity,it will look overwhelming and complex. Unity addresses this on itswebsite by specifically stating, "You can create any 2D or 3D game withUnity. You can make it with ease." As another example, CleverPet is agame console for dogs, and at first glance it looks like it's just thememory game Simon even though it costs $299. CleverPet's websiteexplicitly calls out that it's "One hub. Unlimited games." This wordinginfluences your first impression to know that it's more than just Simon,and it helps justify the $299 price.In your notes for your product, write down what you feel each persona'sfirst impression of your product will be. If you need to influence thatimpression, write down how you want to shift the perception.Finding Your Company's VoiceAfter you've assembled your notes, you'll want to think about yourvoice. This refers to the diction andtone you will use in your marketing and advertising materials, possiblyalso even inside the product, such as in alert messages. Basically, doyou want to have a very formal tone with your customers, a casual tone,a "hip" tone, or something in between?Enterprise products traditionally have taken a formal tone to create a"business" feeling and consumer products have adopted a casual tone tocreate a friendly and accessible feeling. The overriding trend now forboth enterprise and consumer products is to have a more casual andauthentic tone. However, some B2B products in highly regulated fieldslike medicine and finance still have to use very formal and specificvoices because the wrong language can get you into legal trouble.Some companies will create formal style guidelines for their brand'svoice and require everything, from alert panels in the product to everyad, to conform to those guidelines. This can make it hard to adapt yourmessage for different customers. Instead, we recommend having a generalsense of the voice you want your brand to have, but use that as astarting point and not a required approach. Just make sure you stayconsistent within each medium/message! It's confusing if you start aletter with "Dear sir" and then switch to "Hey, dude" in the nextparagraph.Using similar diction to your customers can help your customers quicklyunderstand your value proposition. With consumer products, this meansnot using industry jargon-you'll likely need to cross out and rewritesome of your "why should the customer care?" descriptions. For example,Microsoft describes its Surface devices as "the most productive deviceson the planet" and goes on to describe the Surface Book as "the ultimatelaptop." Right away, you know if you're looking for a high-end laptop,this is the product you want to look at. If you want something to justbrowse the web, you also know this isn't the right product. If Microsofthad instead listed each device's CPU specs, most customers wouldn't knowwhich product to look at.With enterprise software or specific, targeted products, you often wantto use certain buzzwords that a customer is looking for. For example, ifa head of IT at a hospital is looking to buy a medical records system,he likely cares about compliance with government regulations. Callingout a specific compliance level as part of the message helps him quicklyknow this product exactly meets his needs.A simple way to make sure you're using the right diction is to ask how acustomer would tell a friend about your product. If their diction issimilar to yours, excellent! If it's very different, reconsider yourword choice. You want your message to match how your customers see theworld. Your message gets bonus points if it really creates images andevokes emotions in a customer's mind.Putting the Message Pieces TogetherIf you were following along, you now have a few pages of notes and ideasfor how you could tell a customer about your product. That's excellentbecause, again, there's no one message that works for all personas onall mediums. For example, what you write in a press release will bedifferent from what's on the product's web page, and that will bedifferent from how you advertise the product on TV. As another example,how many websites have you gone to that essentially ask you to pick yourpersona by choosing between text like "For developers" or "Fordesigners"? The messaging will be different on each page, focusing onthe things each of those personas cares about.While you won't be responsible for creating ads, it's worth looking atads to understand how other companies express their messages. Spend sometime looking at websites and watching ads for products you use, or knowabout. What is the company saying about each product? Is the messageexplicit or implicit? What diction or imagery does the company use?Video advertising is really interesting to analyze because the messageis often implicit, and you'll have to think about what the company wastrying to say. Then note how it chose to convey it: What personas did itappeal to? How did it make those personas clear? What emotions did thead create? Watch Apple's classic 1984 ad or Google's Parisian Love ad tosee two fantastic examples. 1984 focuses on how Macintosh enables you tostand out and break free of your constraints. Parisian Love examines howsearch changes your life by giving you the answers you need. It's alsoworth explicitly noting that these ads don't focus on the product-theyfocus on your life, the experience you want, and how the product helpsyou have that experience.In general, it's good to figure out the shortest possible message thatappeals to the most personas. You'll likely use that message a lot,whether as a sound bite during a meeting with the press or as theheadline on the product's page. Then, create different, more specific,and more targeted messages as needed, using your notes to guide you.We highly recommend taking a stab at determining this short messageearly in the product-development life cycle and then revising it asneeded. This will help keep any product decisions focused (do theyenhance/detract from the message?) and provide a starting point fordiscussions about how to bring the product to market.Just like writing user scenarios for stakeholders is the secret to goodPRDs, writing your message as a story can help it become clear andresonate more with customers. You can even use it to give increasedvalue to something new that might not seem exciting. For example, ifyour new feature is a tutorial section on the website, tell a storyabout how the customer can use these simple tutorials to become anexpert on the product very quickly, leaving their peers in the dust.Finally, remember that your message is not about what the productdoes, it's about what the product lets thecustomer do. Customers buy your product tomake their lives better. Make sure your message clearly highlights howyour product will help your customers improve their lives.Going to MarketIt's tempting to think that once development's done and you've puttogether an initial product message in the PRD, you can just give theproduct to marketing/sales and let them do their thing. But what happensif during launch your server crashes and your engineering team is out ofthe office celebrating? Or worse, what if the marketing team didn'tfully understand the product's new features, targeted the wrongPR/advertising outlets, and no one showed up for the launch?Many companies create launch checklists, preset templates of theinformation the marketing team needs to launch a product. But theproblem is that not every product launch is the same, either in terms ofthe product you're launching or how people receive information. Forexample, a big product launch might warrant an event that youlive-stream. Five years ago, live streaming wasn't an easy option. In acouple of years, live streaming in virtual reality or some other way wecan't imagine now might be the norm. And if you're launching a newversion of a small feature, you likely don't need a live stream at all.A great way to launch a product is to identify a launch owner early on,to form a team with representatives from each key group (Design,Engineering, Product, Support, and Marketing), and to establish clearlaunch objectives and responsibilities within a go-to-market (GTM) plan.Sometimes the launch owner is the PM, but PMs are often busy enough thatsomeone else from the marketing team will take on this role. Althoughthe launch owner will organize and manage the GTM plan, each departmentwill contribute to it. Each week, the team will meet to make sureeverything is on track to ensure a successful launch, and they'llcommunicate any delays or issues and discuss solutions.For these meetings, it's helpful to create a launch tracker to organizethe launch. Three sheets in a spreadsheet are sufficient. The firstsheet will contain the action items. These are specific tasks, assignedto a particular person/team, along with when each task was assigned,when it was due, and any comments/status updates appropriate for thetask. The second sheet will contain caution items. These are possibleproblem issues along with who raised them, when they raised them, wheneach issue was resolved, and any comments. The last sheet will have keydecisions, including who made them, when, and any comments. In the sameway the PRD is a living document that acts as the key product resourceas you build the product, this launch tracker will be your launchreference.A lot of the work you've done so far, from identifying your targetcustomers to analyzing the competition to developing product messagesfor each persona, will inform your overall strategy and influence thedecisions you make within the GTM plan. Keep those in mind as you readthis section!At a high level, the GTM plan is subdivided into three sections:prelaunch, launch, and postlaunch. Let's look at each.Prelaunch PlanningThe main things to decide during prelaunch are the key launch goals, howyou'll make sure the product is ready for that launch, when and howyou'll launch the product, and what assets you need to launch.Launch ObjectivesLaunches have different purposes. For some products, like the latestGoogle Pixel smartphone, the goal is likely to get as many customers aspossible upgrading to this phone or new customers buying the phone. Forenterprise software like Salesforce, the goal might be getting a subsetof customers engaged with a new feature. Sometimes the goal is simplyawareness of a new feature so that when customer enter their buyingcycle, your product is on their mind.Identifying your key goals up front will let you make other launchdecisions, such as when to aim to launch your product.Launch TimingAfter the launch objective, most launch teams identify when they want tolaunch the product. Sometimes this is a specific date, but usually it'sa date range. For example, consumer product launches tend to happen atthe start of the year, in late April/early May for the "dads and grads"window (Father's Day and graduation), or after the summer but beforeBlack Friday.It's important to pick this launch window as early as possible becauseit can affect your product's development. If you're selling a consumerproduct and the development team thinks it will be ready to launchDecember 26, then you'll have missed the entire window from Black Fridayto Christmas, when consumer products sell well. If you want to have theproduct available for holiday shopping, you'll need to reduce yourproduct's scope to have it ready in time.Businesses sometimes have buying periods, too, that you might need totime your launch around. Schools often purchase products in the springand summer, before the start of the next school year. Sometimescompanies have extra money in their budget they need to spend before theend of the year, so they'll buy more in December. Understanding yourcustomers and their buying habits will help you identify the best launchwindow for your product.For feature releases for existing products, the launch timing depends onthe launch type and goal. If it's a big update that will encourage newcustomers to buy your product, then you'll likely treat it like a newproduct and align the release with your customers' buying habits.Smaller releases' timing varies a lot. The only rule of thumb for thesesmaller releases is to release earlier in the week so that if anysupport issues arise your team doesn't have to work over the weekend toresolve them.If the feature is a bug fix for a critical security issue, then yourlaunch goal is to get this into as many customers' hands as possible, assoon as possible. If it's a small update designed to improve the productfor existing customers, your goal will also be to get as many existingcustomers as possible to update, but it's not as urgent. If yourcustomer has to explicitly take an inconvenient action to upgrade, likerestarting a computer, you'll want to schedule your releases to balancethe value of the release with the inconvenience of upgrading.Fortunately, newer tools like the Mac App Store and the Windows Storeare making upgrades easier for customers, automatically handling theinconvenient actions like restarting when customers are away from theircomputers.A common question is, What does launchmean and how do you pick a date when you have an agile team, producingusable products at the end of each sprint or cycle? It depends! Forsmall features and bug fixes, often companies don't even bother with alaunch plan, and just deploy the feature when it's ready (just not onFriday). For larger releases, such as an important new feature, thecompany might choose to deploy the code internally but not release itpublicly until a certain date.Scrum makes this easy because you will pick a sprint whose date alignswith your launch window to be the release sprint. Velocity calculationsand story point estimations will give you a good idea about what workwill be available on that date. It's always smart to have the prereleasesprint be devoted to any last-minute, launch-related tasks that come up,and during the prelaunch phase you can make sure that each sprint is ontrack towards release. During each launch team meeting, one discussionpoint will be, Is everything still on track product-wise? If you findthe velocity dropping, you might have to adjust your release plans.Once you've picked a possible launch date, you'll establish a work-backschedule to determine what tasks you need to do when in preparation forlaunch-i.e., the week before launch, you'll do press briefings-twoweeks before, all video assets need to be ready-and so on.TestingAs part of getting ready to launch your product, it's important to put aplan together to test it with real customers so that you can make surethe product will deliver on its success metrics. Generally, companiesfirst do an internal release of a product. The goal is to make sureeverything works as expected and to catch major bugs before showing theproduct to any external customers.Next, companies do a broader beta, where they open up the product to asmall group of external customers. This might be via an exclusiveinvitation to the top contributors on your support forum or via someautomatic opt-in.The former is a better approach for bigger releases, where you havespecific new features you want customers to test. Creating a selectgroup of customers to give early access is useful because it gives you agroup of people who actively use your product, and they're the mostlikely to use the new features and to have valuable feedback. Earlyaccess also makes these customers feel special, and they'll often wantto share that status with the world when your product is released.Specifically, this group often becomes product experts, providing tipsand support to other customers and advocating for your product amongtheir peers.Automatic opt-in is most common with web apps with a large number ofusers, where you can enable the feature for a short period of time for1% of your customers and get valuable feedback. Automatic opt-in isfantastic because it gives you real data from real customers, likelyexposing the product to far more customers than would manually opt in toa beta test. But it makes it hard to keep the new product a secret, justlook at how often people report seeing new Facebook features beforethere's an official announcement. Automatic opt-in might also generatecomplaints or a temporary drop in your success metrics, but that datawill help you improve the product so it has a successful launch. Manycompanies have built internal tools to allow for selective featureroll-out/testing, and LaunchDarkly has built a general-purpose tool thatanyone can use.The key to planning a beta is thinking about how perfect your launchneeds to be. If your product is a mobile app and new customers find itbuggy, they're going to delete it and likely never reinstall it.Hardware is even less forgiving because a customer will return yourproduct, and that costs you money to deal with. Web apps tend to be veryforgiving, as you can update them multiple times an hour without thecustomer having to do anything. Of course, if you're strictly adheringto Lean methodology, you will do minimal if any testing and just keepreleasing as fast as possible. But as we've mentioned before, mostcompanies take a hybrid approach, which means you'll have some type ofbeta.You will either own or be heavily involved in product testing. A few keythings will help you run a successful beta test:- Make sure your beta group matches your target persona(s) This will ensure that the people testing are the people you want to reach.- Test your product messaging with any outreach you do If you email certain customers to invite them to the beta, include the product messaging you think will make them want to use the product. It's also possible to A/B-test messages to the same persona so that you can test which message gets the most people to sign up for the beta.- Ensure you have appropriate onboarding Onboarding is the first experience a customer has with your product or updated version. In the shipping product and later betas, it's usually where you call out key features and explain why they're useful and relevant. In a beta context, onboarding is extra important because it includes any specific testing instructions, such as what part of the product to specifically test or parts that you know don't work right yet. Sometimes an onboarding experience is as simple as a release-notes email with instructions for installing the beta.- Have feedback mechanisms in place. Make sure you have quantitative analytics tools in place to measure against your success metrics and to capture any crash logs, provide a qualitative feedback mechanism like Qualaroo or UserVoice so that customers can tell you what they think and reach you with any issues, and follow up with customers to see what they think. Special beta forums can provide a great way for beta testers to interact, provide feedback, and help each other out. The key pieces of feedback to look for are the product's discoverability, engagement, repetition (people come back to use it), actual use cases, and any barriers to adoption.- Assess your feedback and use it to inform launch decisions Beta tests give you a chance to see if your product addresses customers' needs successfully, and help you meet your success metrics with a small group. This gives you useful data about things you'll want to address before launch, like what bugs or other barriers to adoption many customers encountered. Sometimes you'll find a feature isn't discoverable and you need to add a callout to it specifically, or an onboarding experience to walk customers through using it. Sometimes you'll find something doesn't work as expected in the real world, and you'll decide to remove the feature. Occasionally you'll find that the whole product just isn't good and customers don't adopt it, and you'll cancel the launch. The most common result of a beta test is that you use the results to make a few minor changes and bug fixes, and then you do another beta test. After a couple of iterations with larger sample sizes in each, the product will be ready to launch.When putting together a GTM plan, establish when you want to run eachtesting phase, what you're aiming to get out of each phase, and who willown it-generally support or the PM will own the tests. Make sure toplan time to react to feedback from the betas before launch.For some products, you will also want to run stress tests withEngineering during the prelaunch phase to make sure your technicalcapabilities can handle any demand. For example, some very popularproducts generate so much interest that their web servers crash becauseof the sudden spike in visitors. It's quite common to add a launch taskfor Engineering to scale up your virtual server capacity during a launchwindow, until traffic has leveled off to a predictable level.What Kind of Launch?Think about product launches you've seen before. Sometimes you justnotice a new button appear in the UX with a pop-up tip telling you tocheck out something new. Other times you don't get anything done for acouple hours because you're watching an Apple or Google presentation,large events we call "big-bang launches."It's important to align the type of launch you do with the product'sscope and your capability. If you don't, your product might flop or evenbecome the punchline to a joke. Back in 2011, a mobile app photo-sharingstart-up called Color focused on big-bang announcements. It received$41 million in funding right off the bat, which was huge. Then itlaunched its app with big fanfare, but there was a problem-Colorfocused on sharing with nearby users, but most people who downloadedColor found they were the only one using the app nearby and stoppedusing it. Color's poor testing prelaunch failed to discover thisproblem. Over the next few months, the company made changes to addressthese problems, but it had lost its momentum and the company shut downin 2012. Put simply, the product wasn't ready, the company did abig-bang launch, people gave the product a shot and were disappointed,and Color never got a second chance.Alternatively, look at products like Gmail. Google tested it internallyand then launched it with an invite-only beta. In addition to givingGoogle a chance to discover and fix problems before Gmail was huge, itcreated a feeling of exclusivity and demand for the product.Now imagine that the new feature you're responsible for is adding a"watch offline" button to YouTube's mobile app. While this could be agreat feature, you likely don't need a huge event to launch it. Instead,working with the press to get articles on various tech and media newssites and letting existing users know about the feature either in-app orvia direct communication could be sufficient to achieve your launchgoals-likely adoption in this case.Small events can be another great way to effectively launch and reachkey influencers. For example, if Sonos were launching a new speakerlineup, it could do the following: rent a mansion, fill it with theSonos speaker system, cater the event, invite key customers, partners,and members of the tech and audiophile press, and expect theseinfluencers to write for outlets Sonos customers read.Sometimes, you'll work with a product that a customer really needs toexperience to understand, especially if it's an expensive product. Wouldyou buy a car just based on a review, or would you want to test-drive itfirst? For these products, you'll need a launch strategy that is veryhands-on-focused, both for the initial launch and with follow-up eventsthat let customers try the product. The VR/AR (virtual reality/augmentedreality) space is a great example. The best way for people to understandwhy VR/AR is compelling is for them to try it themselves. When HTCreleased its high-end Vive VR system, it had a traveling roadshow wherecustomers could try the Vive in specially built trailers.These are the key things to think about for your launch type:- Which personas care about this feature, and what customers do they map to?- How will you reach new customers?- How do you reach existing customers?- What's your launch objective, beyond reaching the right customers effectively?If you have a new product or a significant new version of an existingproduct, you'll want to reach new customers and existing customers, anda large event might be appropriate. If you have a big new feature, asmall event or a series of press briefings focused on reaching existingcustomers and some new customers is likely more appropriate. If it's asmall new feature, then reaching existing customers is more importantthan securing press coverage.For a small company struggling for attention, successful launches can behard. You might do everything perfectly, but if customers don't show up,it doesn't matter. One simple approach is to build up an email list ofinterested customers prelaunch. A "tell me more" landing page for yourproduct is a simple way to capture email addresses. This ensures thatyou're reaching people who are explicitly interested in your product.You'll want to make sure your outreach methods match your capability. Ifyou have a sales person who manually sends email and makes calls, willhe be able to handle the volume if you want him to reach out tothousands of customers the day your product launches?Many smaller companies choose to work with a PR agency that hasconnections at various media outlets to help get coverage in places yourtarget personas look. That's another reason that knowing how your targetcustomers find information-part of the Business Model Canvas-isimportant: it lets you be efficient!Once you've picked how you want to launch, you'll align your launchplanning on delivering what you need to make that method successful.Launch Asset PlanningNo matter how small of a launch event you're planning, the launch teamwill always end up creating various assets to accompany the productlaunch. As the product manager, you'll often have a hand in creatingthese launch assets, even though other people will handle the details.Specific launch assets to consider include the following:- Website updates. How will the product's page be updated on your website?- Support documentation. What needs to be updated on your product's support page for the new version? Is there new training material to be created ahead of time?- Sample video/images. Do you need to create new screenshots for the App Store or wherever you distribute the product?- Blog posts and other social media material What material do you want to create for the product's launch on your company's blog/social media channels? These outlets are called owned media because you control them, and you want to make sure they support your launch/company goals.- Ads. Do you intend to have any advertising material with your product launch? If so, you'll need to create the media ahead of time.- Demo plan. When company representatives are showing off the product, how will they demo the new product? Or if you're releasing a new version/feature, how does it affect existing demo plans?- Distribution review needs. Application stores like the App Store often require special reviewer logins or video demos so they can make sure your app works as designed. Do you have to create anything for this process?- Internal product FAQ. If you're planning on doing press briefings as part of the launch, it's also handy to create an internal product FAQ with the questions you expect to get about the product from reporters. Having clear, on-message answers to common questions, including any hard questions you might get, helps whomever is doing the press briefings prepare effectively.- Support-team training materials. While the design, engineering, and product teams are likely quite familiar with the product when launch comes around, the support teams might not be as familiar. Create materials for them with the most common problems customers will face, and the solutions. Use what you learned during your testing periods to gauge the most likely problems. During and after launch, update these training materials with any new questions that arise.- Sales-team training materials. As with support, it's important to create materials for the sales team so that the reps clearly understand the value in the product. These materials should focus on understanding the key buyer personas and what the product offers for them. For existing customers, be sure to provide migration information so that the sales team can help ensure smooth migrations.While not an explicit asset, make sure to work appropriately with anyexternal partners so that they're not caught off guard by your launch.For example, with Moover we'd want to make sure the moving companieshave been notified and helped test our messaging feature. We might evenchoose to launch the updated web console with them quietly beforelaunching the app to support a beta test.A Helpful Prelaunch Marketing FrameworkThere is a marketing framework that's very handy for the launch team tokeep in mind as they determine how to launch a product. This framework,called the 4Ps Framework, is a guide to making marketing decisions and areminder of key decisions you have to make when launching a product. ThePs stand for product, price, promotion, andplace. Let's dive into each.Product includes both the obvious partsof the product (what is it, who's it for, what's the benefit?) alongwith the non-obvious. Non-obvious elements include the packaging,accessories, support, warranty, and return policy. A helpful way toremember these non-obvious elements is that they're things the customerencounters after purchasing the product. For example, after you buy it,you unbox it. Or you buy an accessory. Or you have a problem and contactsupport.Price refers to what you charge for-bothnormal, everyday transactions and with possible volume and salediscounts. Determining the right price can be quite complex, and it'sinfluenced by your product goals and your desired business model. Socialgames are often free to play to get as many people as possibledownloading them, which enables a better social game. Then, ads helpprovide a small bit of income from each customer, and in-app purchaseshelp generate revenue from engaged customers while also making the gamebetter for them. Hardware pricing is commonly based on componentpricing, but sometimes companies use a razor/blade model and sell thecore hardware at a loss, making money on software and accessories. As aproduct manager, you'll often have input on the pricing strategy, as theprice is influenced by your product goals and has an impact on yoursuccess metrics and product planning.The next P is promotion. This is what we think of traditionally withmarketing: What will your press release be like? What ads will youcreate? How will the sales team reach customers?Finally, we come to place. Where doyour customers find your product for sale? Is it only on your website?Is it in specific stores, either virtual or physical? The key here is tomake sure the place lines up with where your target customers go to findproducts. Some customers don't feel safe buying from a no-namestart-up's website, for example. They might be interested in yourproduct, but they'll hold off buying it until it's available on Amazon.Or perhaps customers expect your app to be on the Google Play store, andthey'll look for it there instead of in the Amazon app store. If you'renot selling where your customers are, you'll miss out.LaunchThe nice thing about planning thoroughly before launch is that duringlaunch you're mainly executing on your plan, which is relativelyrelaxing and even fun!Product managers are often company spokespeople, and we recommendworking with your communication team to make sure you speak well andknow the key product messages. And of course, if you're speakingexternally, take care to look your best, wash your hands, trim yournails, and present a professional image.Back in the office, the engineering and support teams will want to watchto ensure everything is functioning correctly and customers arereceiving any aid they need. You, as the PM, will also want to work withthem to look for any critical bugs you might have missed during yourtesting phase. Have a plan in place with Engineering ahead of time toasses, fix, and release these bugs as needed. But beyond that, you cantake a breath and watch how your customers react to your hard work.We call the social media posts your customers write, reviews yourproduct receives, and articles the press writes about your productearned media because you don't controlit nor did you pay for it. Earned media is very valuable because itmeans people find your product worth writing about. Of course the riskis that they don't like it and the earned media isn't positive.Fortunately, most people, especially professionals, usually choose notto write a review rather than writing something negative.PostlaunchIn Chapter 9 we'll go into more detail for what you, the PM, will dopostlaunch. Most of your work will be internally focused, assessingearly results and metrics and planning what's next. The marketing andsales teams will focus on how to promote and sell the new, currentversion. We'll briefly define some terms you might hear when workingwith those teams.The Customer Life CycleJust like we think about product funnels with analytics (covered back inChapter 3), marketing also thinks about funnels. Sort of. Productmarketing has become complex enough that many people think aboutengaging with customers as a loop called the customer life cycle.Customers often start their journey with the awareness, interest, andengagement phases. This simply means people know about your product andseek to learn more. Marketing teams often pay for display and social adsto get more customers at this part of the funnel. A display ad is thetypical visual advertisement we think of, such as an ad in a magazine ora banner ad. A social ad is an ad you pay for on a social network,whether it's a text ad on Twitter or an image on Instagram. Whatmarketers love about online marketing is that it can be very targeted.Unlike a newspaper ad that lots of people see, online ads can be shownonly to 31-year-old women who are interested in casual video games. Thishelps ensure your advertising reaches the right personas!The next life cycle phase is about getting people to trust your productwill deliver on its promise and to buy it-offering money-backguarantees is a common technique here. It often includes seeking outpeer opinions and doing research on the product, such as looking forreviews. Affiliate marketing can help move customers through thesesteps. Affiliate marketing is when a trusted source receives a smallpayment for encouraging its audience to buy your product. Customers arehappy because they now feel they can trust your product, affiliates arehappy because they received a payment for their expert advice, and yourcompany's happy because you have a new customer. Sometimes companiesprovide special deals for their affiliate partners, such as discountcodes, which gives new customers even more incentive to purchase yourproduct.The last phases of the customer life cycle are about customersatisfaction and advocacy. The ultimate goal of the customer life cycleis to have customers advocating for you. Word of mouth is one of themost important factors in why people buy certain products, and it bringsnew customers into the customer life cycle, making them aware of yourproduct. While the support team will play the largest role in thisphase, ensuring customers have a positive experience, the marketing teamwill often also help with customer retention and loyalty so that they inturn recommend the product again. They might do this by sending swaglike T-shirts to customers or by sending special offers to get thecustomer to make another transaction. If you've ever tried to cancelyour cable, phone, or Internet service, you've likely found yourselftalking to a person whose job is to do whatever it takes to retain youas a customer, such as offering you a fantastic deal.As a customer moves through each phase, you'll need to make sure shesees the appropriate messaging and material. You don't need to show amoney-back guarantee-which helps the trust phase-when you're tryingto just make people aware of your product.The different messaging is important when working with search engineoptimization and marketing (SEO/SEM). This is an entire field, and we'renot going to go into it in depth, but SEO refers to how you optimizeyour site so that when people search for keywords, you're the relevantresult. SEM is when you pay to have an ad for your website appear basedon certain keywords.Marketing Cost Measurement TermsWith all of these approaches, there are a few key terms you should beaware of, as they sometimes come up during strategy meetings betweenproduct and marketing:- Pay per impression (PPI): You pay for the ad whenever it's shown. Impression means "someone saw the ad."- Pay per click (PPC): You pay for the ad only when someone clicks on it.- Pay per action (PPA): You pay only when the user achieves some final action, such as downloading your app.- Click-through rate (CTR): The percentage of people who click on your ad.- Cost per impression (CPI)/cost per thousand impressions (CPM): This is how much you pay to have your ad shown once (CPI)-more commonly listed as the cost to have it shown 1,000 times (CPM). This can be used to assess how effective a campaign is. It's simply the advertising cost divided by the number of impressions.- Cost per click (CPC): This is the actual price you pay for each click in your PPC advertising. In bid-based systems like on Google and Bing, this might be lower than the price you entered. For example, if you placed the highest bid at $2/click, which means you'd pay at most $2 for each click, the actual amount you'll pay is based on various factors such as the closest competitor's bid and your ad quality. CPC is often used when there's a daily budget for running display and search ads. When you hit your budget, you stop running the ad for the day. As you'd expect, CPC is often CPI divided by CTR.- Customer lifetime value (CLV/LTV): How much money do you expect to make from this customer over the product's lifetime? This is useful for determining how much to spend advertising to this customer. The CLV should be greater than what you spend to acquire the customer. If you have to spend $100 on display and affiliate promotions to acquire a customer but only expect to make $20 on this customer, you'll have lost money.Moover's GTM PlanHere's a first pass at Moover's GTM plan. The launch team will breakthese tasks down into explicit action items and assign them, and theymight raise concerns during launch for issues not listed here. But thisshould give you an understanding of how to start thinking aboutlaunching and marketing a product.Key message: Moover takes the hassleout of planning a move.New-feature message: Moover's new chatfeature takes the hassle out of talking with movers.Prelaunch- How we will test this internally? We'll ask for volunteers on various teams to help test the mobile app and web dashboard for 10 minutes each day over the course of two weeks. By using both aspects, they can make sure everything goes through as they expected. Using the product for a few minutes each day is likely the most common use case. We'll also designate one person on the QA team to handle a different fake company in the database so that she can test the "many clients/one response source" system.- How will we test this externally? We will ship it and turn it on for a small group of customers with no special announcement and see how usage changes, if customers have problems, and more. It's tough to create a beta pool for moving customers because people move and then don't do it again for a while. Letting customers try this feature also means we'll have to roll out the web portal to our moving companies earlier, as they'll need to be able to answer messages. We'll need to create training material for these companies and provide support.- How will we launch this? This is not a huge feature, so it doesn't need much fanfare. However, because many people haven't heard of Moover, we want to use this to help generate fresh articles about our product. We'll work with our PR firm to do a small press tour, and we'll make sure the focus is on the core product message more than this specific new feature. We'll need to come up with a sample demo flow for these briefings. Perhaps we can have a fake moving company that automatically sends a series of replies on the back end so that it appears like you're having a real conversation with the company during the press briefing.- What assets do we need to create? We need training and support materials for our moving-company customers, updated screenshots and documentation for the website and app stores, and a blog post describing what's in this update.- How will we reach customers? We don't have frequently recurring customers, so reaching existing customers isn't a big concern. We can continue to promote Moover in general on job boards like LinkedIn (given that after people get a new job, they often move).LaunchThere should be very little to do during launch, aside from updating thewebsite with new product information and releasing the updated app.We'll want to make sure our website can handle an increased visitorload, but given how infrequently people move, we don't expect a hugeuptick in simultaneous active users in the app. Given we see an averageof 1,000 users per day, we could start by assuming that each user sendstwo chats per day to every moving company he has a bid from. There's anaverage of five bids per user. This means we should be prepared tohandle 1000 * 2 * 5, or 10,000 chats per day, which isn't a hugenumber. We can adjust capacity as needed after things level off.PostlaunchWe will continue to promote Moover as normal, especially focusing ontargeted display and search ads. The general message is still the keymessage to promote, as our app awareness isn't at the point where it'sworth advertising specific features initially.We'll want to watch how often people use the chat feature to make sureit's sufficiently discoverable and intuitive.For many in your company, especially the sales, marketing, and supportteams, postlaunch is when they really go to work. For you, this is thelast major step in the product-development life cycle. Read on to learnhow to finish up the life cycle. Chapter Eight TipThis tip comes from an amazing product leader, Kirk Paulsen, SVP forMarketing at DxO. For more than a decade, Kirk directed worldwideproduct marketing for all photo software and cloud-based services fromApple's headquarters in Cupertino. As an executive for start-ups Sonicand then Spruce, he helped launch the world's first commerciallyavailable DVD encoding and authoring systems. Kirk was also one of thefirst technology experts to introduce the very concept of computer-basedaudio and video editing systems to the music and filmindustries.Ask the DRI to Whiteboard It for YouIn my experience at a certain fruit-named company, each of our softwareapplication releases typically involved dozens of new features andenhancements. For each launch, it was the PM's job to cull the completelist down to a half dozen or so top-level features (TLF) whichrepresented the story of that particular release. It was theresponsibility of the PM to present the TLF to the broader marketingteam, which included creative directors, copywriters, graphic designers,etc. It was absolutely essential that the message be clear, concise, anddelivered with enthusiasm. Tell the story right, with clarity andpassion, and the entire creative team would get engaged to do their verybest work to help you showcase the product. Were the message to lackcohesion or come off as uninspired, the creative team could just aseasily disengage, performing mediocre work at best, which wouldinvariably result in the industry giving it a collective yawn. Thequickest way for a PM to lose the respect of engineering is to make theproduct sound boring or obscure. Conversely, one of the best ways for aPM to earn kudos from other teams is to tell the story in an articulate,engaging, and insightful manner.So how exactly do you figure out how to succinctly and effectivelycommunicate the solution that will make the customer awesome? Simple:for each and every TLF ask the engineer or scientist most directlyresponsible for that particular bit to explain it to you in detail, inlayman's terms. The process requires you to search out the directlyresponsible individual (DRI) for that exact feature or technology. Insome cases, particularly with small start-ups, it may the founder. Oftenit's the product's chief architect who directs the engineering team. Ina Fortune 100 company, it might well be a shy but brilliant scientistwho works within one tiny team among a vast R&D organization. What I canassure you is, it isn't someone who is somewhat close to the feature butnot directly involved. Rather, it must be the DRI, the person who coded,engineered, designed, or directed the work that led to that particularfeature. At Sonic Solutions it was Dr. Andy Moorer, at Apple it wasusually Randy Ubillos, and at DxO it is often Dr. Frédéric Guichard.When you take the time to identify the precise DRI for that specificfeature or technology, you'll discover that that person, and only thatperson, is capable of explaining it to you, in depth and with moreclarity than you could possibly imagine. Most important, you will havethe opportunity to feel firsthand their personal passion for theproduct, and gain a better understanding of the true benefit of thesolution as they originally conceived of it. In my experience thisprocess typically involved either a private one-on-one session, or avery select gathering, but never a large group. And in my experience italways, always involved a whiteboard, because I've never met an engineeror scientist who wasn't keen to express themselves with an erasablemarker. After listening carefully to their description of the feature ortechnology, it's essential for you to try to immediately channel theirvoice and repeat what you've just learned, as in, "so, would I becorrect in describing this as...?" The process, which involves focusedlistening and detailed note-taking, may well require severalinteractions before you are in complete harmony with the DRI and areable to perfectly articulate, in layman's terms, the solution. Followthis tip and you as the PM will be properly equipped to tell a greatstory to the creative marketing team, who will help you share yourmessage with the industry, media, channel partners, and your soon-to-beawesome customers.Congratulations! You've successfully shipped your product! Everything'sdone, right? Well, you need to do three more things during this cycle:PARTY, self-assess the cycle, and create a recommendation for the nextiteration. Let's look at these three in detail.Celebrate!It's really important for team and company morale to celebrate evensmall wins. For instance, you might celebrate fixing a difficult bug bygetting cupcakes (make sure to take dietary requirements likegluten/sugar-free into account.) When you ship a major version of yourproduct, you might take the core team out for a nice dinner. And whenyou ship something big, you might help organize a companywidecelebration.These celebrations provide a way for individual contributors to getrecognized for their work. Product managers are often the most visiblerepresentatives for their products, even though they're not the onesdesigning it or doing the coding. It's important to give credit to theteam for doing a great job so that each person feels important and likea part of something bigger. It's also a great way to build respectbetween you and the team-one of the easiest ways to lose your team'srespect is to take credit for the team's work.If you're organizing a companywide celebration, as a PM you'll likelygive a quick speech. This is a great opportunity to recognize the coreteam, specific others who have gone above and beyond to help get theproduct launched, and any groups that contributed to it beyond theproduct's core team. It's also really nice to have positive feedbackfrom internal people (what'd the CEO think?) and external people (pressquotes, customer emails) to share. This feedback is extra validationthat the team's work is being well received. If a launch wasn't wellreceived, you should still recognize the effort that went into it, asyou want the team to have a positive attitude when working on the nextiteration of the product.Organizing small activities and celebrations while building the productcan also be very helpful for team morale. When the team hits a keymilestone, you might go on an outing to play mini-golf.It will likely fall to you to organize these celebrations-though youroffice manager/HR team can help with companywide ones. Make sure to becognizant of the importance of these celebrations, as it's easy toforget about them with all the other things on a product manager'splate.Assess How Things WentUltimately what matters most to the company is what your customers thinkof the product and if you achieve your success metrics, but it'simportant to look at how you got to the release. If you alienatedeveryone or made the product extremely hard to build, the people on yourteam likely won't want to work on the next version and might even lookfor different jobs. Assessing how things went ensures that you gatherfeedback, letting people feel their concerns are heard, and think abouthow to do better in the next cycle.For some people, assessing how things went during the development cycleis very difficult, personally. This is when you explicitly put yourselfout there and ask for feedback, and you will get feedback, both positiveand negative.Discussion with Your LeadThe first part of getting feedback is to see what your lead thought ofyour work. Was she happy with how you approached everything, or werethere things she'd like you to try doing differently? Did she getpositive feedback from other teams about you, or were other leads alwayscomplaining about you? It's very useful to schedule a one-on-one meetingwith your lead, if you don't have regularly scheduled meetings, to checkin and make sure everything is good. A way to start the conversation isby asking, "Could you give me feedback on how you feel this cycle went?I want to make sure I'm doing the best job possible." After all, we growby working on our weak spots.Team PostmortemThe other part of assessing how things went is to get the team'sfeedback, and an effective way to do this is with a postmortem meeting.There are a few different ways to run these meetings. We'll walk youthrough how to run one yourself with the core team. If you feel you hadproblems working with the team, you might ask someone else to run thepostmortem so you can be absent from the room to make the team feelcomfortable speaking openly. Some companies have open-door postmortems,where anyone in the company can drop in to hear about the process.You'll just have to pick what feels most appropriate for your situation.Here's how we like to run postmortems. Find a time where the product'score team and the key stakeholders are available, and schedule a meetingfor an hour or so. You'll want to try to create a relaxed and openatmosphere, which can mean anything from booking the meeting room withthe comfy chairs to providing food and alcoholic/non-alcoholic drinksfor the team-it varies company to company. Just make sure you have awhiteboard or something to write on that everyone can see.Since this meeting is about feedback, all opinions are valid-make sureyou don't put value judgments on what people say, especially if theygive you negative feedback. Divide the whiteboard into two columns:things you did well, and things you wish went more smoothly. Start byasking everyone to say what they think went well. After a bit, switch tothe other list and ask for things people wish had gone better. Bounceback and forth between the lists until you feel everyone's been heard.Last, take some time to discuss what you want to do differently and whatyou want to keep the same during the next cycle. You should write downthe postmortem notes somewhere, like on the product's wiki page,including the key things you're committing to doing differently duringthe next cycle. Periodically refer back to this list to make sure you'realleviating as much of the process pain as you can while keeping thegood things.Recommending What's NextAfter launch, it's time to start another iteration of theproduct-development life cycle. However, there's a challenge. In anideal world, you'd have useful data about how what you did during thisiteration affected your success metrics and goals. Unfortunately, itusually takes time to gather enough useful data to see whether yourchanges worked. Your immediate next iteration will be driven by yourproduct roadmap (Chapter 2) and other approaches we covered in Chapter3. Then, after enough time has passed to gather useful data from thisiteration, you'll put this product into one of three high-level buckets.Specifically, you'll recommend moving on to something else because thisproduct/feature is good enough, iterating more on this product, orsunsetting this product.If you've achieved or surpassed your success-metric goals, then yourrecommendation will likely be to move on to something else. Automaticcrash reporting can be very helpful here for mobile and desktop apps, asyou might uncover bugs affecting lots of customers that you want to fixbefore moving on, even if you hit your success-metric goals.If you're not hitting your goals, then you need to dig deeper to thinkabout where and how you want to iterate. Running simple A/B tests withtools like Optimizely is a great way to quickly see if you can make anysmall changes to help you achieve your goals. Sometimes non-core-productchanges, like the wording on a website, can make a big difference. Themarketing team will likely be running a lot of A/B tests on themarketing website to see what gets the most customers buying/using yourproduct.Looking at what your customers think is also important. Maybe you hityour revenue goals by switching to a subscription payment model, but ifyour customers hate it and are looking for alternatives, your long-termsuccess is in question. What's nice about releasing a product into thewild is that you'll see product reviews, social media posts, and supporttickets about the new product. Look through these, in addition toreviewing your metrics, to see what customers think.We'd recommend rereading Chapters 3 and 4, thinking about how to come upwith your next opportunity hypothesis for an existing product/featurethat's not achieving its goals. Moover, for example, might find thatcustomers love and use the chat feature, but the company still is nothitting its goals. By leveraging the advice in Chapter 3 around askingwhy, we might conclude we have a platform-growth problem to addressnext.You might conclude that no reasonable amount of effort will make theproduct achieve your success-metric goals. Or maybe your company'spriorities have shifted, and this product just doesn't fit with theoverall strategy anymore. Or maybe a technological development has madesomething much better for your customers possible, but creating that"something better" will mean a completely different product and not anupgrade. In this case, your recommendation should be to end-of-life or"sunset" the product.Sunsetting a product simply means you'll stop doing active developmenton it, and customers should switch to something else. We won't go intothis in depth, but you usually don't just suddenly stop selling aproduct. It's important to have a window where customer support is stillavailable for the product, time where customer data is still availableso that customers can retrieve it for online products, and ideally amigration path to help customers move to an alternative product. Whileit can be frustrating for loyal customers, sunsetting products isn't abad thing, and companies do it all the time. The trick is just to makesure you have a reasonable plan in place.In March 2013 Google announced it was going to discontinue its ReaderRSS feed aggregator because fewer and fewer people were using it and thecompany wanted to focus on other products. Google gave customers fourmonths to retrieve and move their data, and they showed customers how touse Google Takeout to retrieve that data.In another example, Apple retired its professional photo-managementtool, Aperture, in mid-2014. The company provided an update to make sureAperture worked on the upcoming version of OS X so that customers couldcontinue to use it for at least another year. Apple also worked with itsmain competitor, Adobe, to ensure Adobe's professional photo-managementtool, Lightroom, had an "Import from Aperture" command to help customersmigrate their data.Ultimately, whatever your recommendation is, this final step of theproduct-development life cycle feeds nicely into the first step we wentover in Chapter 3: deciding what you should do next. The key differenceis that you start by evaluating whether you're happy with what you justdid, whether you need to work on it more, or whether you need to sunsetthe product so that you can focus on something else. And then you repeatand repeat and repeat.Chapter Nine TipOur final tip comes from Carlos González de Villaumbrosia, founder andCEO of Product School. He has dedicated his entire career to bridgingthe gap between education and employment in tech. Carlos was inspired tocreate Product School based on his own experience when he had to learnhow to break into product management the hard way.As a good agile PM and lean entrepreneur, Carlos focused on tacklingthat specific problem and built a very basic MVP to validate hissolution. Product School started as a casual recurring meeting betweenCarlos and seven aspiring product managers in Starbucks around theFinancial District in San Francisco. In those meetings, Carlos wouldshare his experience and would even invite other PMs as guest speakersto share theirs. The reaction was so positive that Carlos rented a roomin a coworking space, created the first version of the productmanagement curriculum, taught the first 10 cohorts to refine everydetail related to delighting his students, and make sure they wereequipped with the right tools and knowledge to build products and get PMjobs.In just two years, Product School became the first tech business schoolin the world. It currently offers product management courses in SanFrancisco, Silicon Valley, Los Angeles, and New York. All of itsinstructors are senior-level PMs at top companies such as Google,Facebook, Snapchat, Airbnb, PayPal, American Express, andNetflix.This piece of advice comes from the data and experience gained fromworking with Product School's product management students everyday.How to Break into Product ManagementI transitioned into product management from software engineering eightyears ago, and I founded Product School to teach others aspiring productmanagers do the same.The main reason people make a career shift into product management isbecause they are interested in having more decision-making power on theproduct strategy of the company. I don't blame them; this is a big shiftthat will impact your long-term upside since you will stop being aspecialist in one part of the process to become a generalist in all theparts involved in the process by leveraging other people's talents. Thisapproach will serve you well professionally and personally.Throughout my career, I have meet dozens of current product managers,and entrepreneurs and investors who worked as product managers in thepast. They all shared the exact same problem about how they didn't haveproper training when they started their management careers in tech. Yes,it's true that a lot of them earned MBAs or similar business-relateddegrees at top universities that provided different skillets and accessto networks that helped in the long term. But these business degreesaren't always applicable to product management, nor do they teach youhow to be a product manager. In fact, most of today's product managers,whether they have MBAs or computer science degrees, had to learn theircraft on the go because there wasn't any product management school thathad a holistic view, incorporating business, engineering, and design,Fortunately, Product School fills that gap.Here are some examples of different career paths to break into productmanagement. Keep in mind that this list isn't complete:The one thing all of these career paths have in common is that PMs don'tstart as PMs. They spend at least a few years in a different role,develop a few key skills, and then transition into product. The threecritical skills I think you have to develop in order to get a job as aproduct manager are technical expertise, domain expertise, andcommunication expertise. Let's look at these three.As you've learned from the previous chapters, even if you don't know howto code, it's critical for product managers to understand some of theengineering behind the products they're managing. This knowledge willhelp you communicate with designers and engineers, assess technicalfeasibility, and understand what the technical side of implementing aproject.Next, especially for your first product management job, it's importantto understand the domain you're working within. As we discussed inChapter 1, we've found that when you get your first PM job, if you knowabout the field you're working in, you will be able to spend your timefocusing on how to be a product manager rather than learning thenuances, challenges, competitive landscape, and more of your domain.Finally, something we don't cover in detail in this book is how criticalgreat communication skills are to PMs. PMs have to communicate all thetime, whether via email or presentation. In our Product Schoolbootcamps, we spend multiple hours teaching students how to be greatpublic speakers with plenty of practice. If you can't communicate, itdoesn't matter how great of a PM you are because no one can understandyou.Beyond Product School, there are a few specific things that will helpyou transition into product management:Build something. In class, our studentswork towards a final capstone project where they pick a company they'dbe qualified to work at, determine what feature that company shouldbuild next, and create a presentation explaining why the company shouldbuild it next and the key requirements. Try doing this on your own! Ifyou know how to code, take a project from start to finish so that youcan experience shipping a product and getting feedback from customers.Attend hackathons. Check out producthackathons such as ProtoHack or StartupWeekend to get hands-onexperience building a product in high-pressure environments.Find a mentor. Reach out to PMs yourespect and who you feel could be good mentors to you. Product Schoolhas an active Slack community, product-school, which is a great place tofind a mentor. A mentor can provide war stories and help you understandbest practices.Network. Check out product events in yourcity. Websites like Meetup and Eventbrite often feature events. Theseevents can be a great place to find a mentor, too.Read. The Further Reading list at theback of this book has great resources to help you learn more about beinga PM. We'd highly recommend you check out Cracking the PMInterview by Gayle Laakmann McDowell orDecode and Conquer by Lewis C. Lin tounderstand what PM interviews involve.Apply to associate product manager (APM) programs. Some big tech companies such as Google, Yahoo, andFacebook have entry-level APM roles for new college graduates, wherethey teach you how to be a PM on the job. You might qualify to apply.One of the most common mistakes in landing your first PM job is settingyour expectations too high, either in terms of your title or yourcompany. Just because you are a senior software engineer now does notmean your first PM job will be as a senior product manager. Similarly,your current company might not be your dream company, but if there's anopening for a PM, you likely have a better chance landing that as yourfirst PM job than getting a job elsewhere.Be realistic! Asses your current expertise and map out realistic careerpaths inside or outside your current company. Your ideal PM job willlikely not be your first PM job, but that's OK. As long as your first PMjob is relevant to your career goals and you're surrounded by moresenior people that you learn from, it will still be a great job.